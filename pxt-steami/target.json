{
    "id": "steami",
    "nickname": "steami",
    "name": "makecode.steami.",
    "title": "MakeCode for STeaMi",
    "description": "A Blocks / JavaScript code editor for the STeaMi:bit powered by Microsoft MakeCode.",
    "corepkg": "core",
    "bundleddirs": ["libs/core"],
    "cloud": {
        "workspace": false,
        "packages": true,
        "sharing": true,
        "thumbnails": true,
        "publishing": true,
        "importing": true,
        "showBadges": false,
        "preferredPackages": ["Microsoft/pxt-neopixel"],
        "githubPackages": true,
        "cloudProviders": {
            "github": {
                "id": "github",
                "name": "GitHub",
                "icon": "docs/static/providers/github-mark.png",
                "identity": false,
                "order": 3
            },
            "microsoft": {
                "id": "microsoft",
                "name": "Microsoft",
                "icon": "docs/static/providers/microsoft-logo.svg",
                "identity": true,
                "redirect": true,
                "order": 1
            },
            "google": {
                "id": "google",
                "name": "Google",
                "icon": "docs/static/providers/google-logo.svg",
                "identity": true,
                "redirect": true,
                "order": 2
            },
            "clever": {
                "id": "clever",
                "name": "Clever",
                "icon": "docs/static/providers/clever-logo.png",
                "identity": true,
                "redirect": true,
                "order": 3
            }
        }
    },
    "compile": {
        "isNative": false,
        "useUF2": false,
        "hasHex": true,
        "deployDrives": "(DAPLINK|UNDEFINED)",
        "driveName": "DAPLINK",
        "hexMimeType": "application/x-steami-hex",
        "openocdScript": "source [find interface/cmsis-dap.cfg]; source [find target/nrf51.cfg]",
        "flashCodeAlign": 1024,
        "flashChecksumAddr": 0,
        "floatingPoint": true,
        "taggedInts": true,
        "utf8": false,
        "gc": false,
        "webUSB": true,
        "useNewFunctions": true,
        "nativeType": "thumb",
        "switches": {},
        "jsRefCounting": false,
        "noSourceInFlash": true
    },
    "compileService": {
        "buildEngine": "codal",
        "codalTarget": {
            "name": "codal-stm32-STEAM32_WB55RG",
            "url": "https://github.com/letssteam/codal-stm32-STEAM32_WB55RG",
            "branch": "main",
            "type": "git",
            "dev": true
        },
        "codalBinary": "STM32",
        "githubCorePackage": "letssteam/codal",
        "gittag": "v0.10.0",
        "serviceId": "steami",
        "dockerImage": "pext/yotta:latest"
    },
    "multiVariants": ["codalsteami"],
    "alwaysMultiVariant": true,
    "variants": {
        "codalsteami": {
            "compile": {
                "flashCodeAlign": 1024,
                "flashChecksumAddr": 0
            },
            "compileService": {
                "buildEngine": "codal",
                "codalTarget": {
                    "name": "codal-stm32-STEAM32_WB55RG",
                    "url": "https://github.com/letssteam/codal-stm32-STEAM32_WB55RG",
                    "branch": "main",
                    "type": "git",
                    "dev": true
                },
                "codalBinary": "STM32",
                "githubCorePackage": "letssteam/codal",
                "gittag": "v0.10.0",
                "serviceId": "codalsteami",
                "dockerImage": "pext/yotta:latest"
            }
        }
    },
    "runtime": {
        "mathBlocks": true,
        "loopsBlocks": true,
        "logicBlocks": true,
        "variablesBlocks": true,
        "textBlocks": true,
        "listsBlocks": true,
        "functionBlocks": true,
        "breakBlock": true,
        "continueBlock": true,
        "functionsOptions": {
            "useNewFunctions": true,
            "extraFunctionEditorTypes": [
                {
                    "typeName": "game.LedSprite",
                    "label": "LedSprite",
                    "icon": "send",
                    "defaultName": "sprite"
                },
                {
                    "typeName": "Image",
                    "label": "Image",
                    "icon": "image outline",
                    "defaultName": "image"
                }
            ]
        },
        "onStartColor": "#1E90FF",
        "onStartNamespace": "basic",
        "onStartWeight": 54
    },
    "simulator": {
        "autoRun": true,
        "streams": false,
        "aspectRatio": 1.22,
        "parts": true,
        "partsAspectRatio": 0.69,
        "dynamicBoardDefinition": true,
        "messageSimulators": {
            "jacdac": {
                "url": "https://microsoft.github.io/jacdac-docs/tools/makecode-sim?webusb=0&parentOrigin=$PARENT_ORIGIN$",
                "localHostUrl": "http://localhost:8000/tools/makecode-sim?webusb=0&parentOrigin=$PARENT_ORIGIN$",
                "aspectRatio": 1.22,
                "permanent": true
            },
            "robot": {
                "url": "https://microsoft.github.io/microbit-robot/?parentOrigin=$PARENT_ORIGIN$",
                "localHostUrl": "http://localhost:3000/microbit-robot/?parentOrigin=$PARENT_ORIGIN$",
                "aspectRatio": 1.22,
                "permanent": true
            }
        }
    },
    "serial": {
        "nameFilter": "^(mbed Serial Port|DAPLink CMSIS-DAP)",
        "log": true,
        "useEditor": true,
        "editorTheme": {
            "graphBackground": "#d9d9d9",
            "lineColors": [
                "#6633cc",
                "#2C7485",
                "#3454D1",
                "#EF767A",
                "#F46197",
                "#107C10"
            ]
        },
        "vendorId": "0x0d28",
        "productId": "0x0204",
        "rawHID": true
    },
    "appTheme": {
        "accentColor": "#0089BF",
        "logoUrl": "https://steami.cc/",
        "logo": "docs/static/logo.svg",
        "docsLogo": "docs/static/logo.svg",
        "portraitLogo": "docs/static/logo.svg",
        "footerLogo": "docs/static/logo.svg",
        "cardLogo": "docs/static/icons/apple-touch-icon.png",
        "appLogo": "docs/static/icons/apple-touch-icon.png",
        "organization": "Microsoft MakeCode",
        "organizationUrl": "https://makecode.com/",
        "organizationLogo": "docs/static/Microsoft_logo_rgb_W-white_D-square.png",
        "organizationWideLogo": "docs/static/Microsoft_logo_rgb_W-white_D.png",
        "homeScreenHero": {
            "imageUrl": "docs/static/hero.svg",
            "name": "Flashing Heart",
            "url": "/projects/flashing-heart",
            "description": "New? Start here!",
            "cardType": "tutorial"
        },
        "homeScreenHeroGallery": "/hero-banner",
        "homeUrl": "/",
        "embedUrl": "https://makecode.steami.cc/",
        "shareUrl": "https://makecode.steami.cc/",
        "privacyUrl": "https://makecode.com/privacy",
        "termsOfUseUrl": "https://makecode.com/termsofuse",
        "githubUrl": "https://github.com/Microsoft/pxt-microbit",
        "boardName": "steami",
        "boardNickname": "STeaMi",
        "driveDisplayName": "STEAMI",
        "crowdinProject": "makecode-steami",
        "extendEditor": true,
        "extendFieldEditors": true,
        "enableTrace": true,
        "ignoreDocsErrors": false,
        "errorList": true,
        "workspaceSearch": true,
        "allowPackageExtensions": true,
        "addNewTypeScriptFile": true,
        "experiments": [
            "accessibleBlocks",
            "debugExtensionCode",
            "bluetoothUartConsole",
            "bluetoothPartialFlashing",
            "identity",
            "blocksErrorList"
        ],
        "bluetoothUartFilters": [
            {
                "namePrefix": "STeaMi"
            }
        ],
        "docMenu": [
            {
                "name": "Support",
                "path": "https://support.steami.cc/"
            },
            {
                "name": "Reference",
                "path": "/docs/reference"
            },
            {
                "name": "Hardware",
                "path": "/docs/device"
            },
            {
                "name": "Buy",
                "path": "https://steami.cc/resellers"
            }
        ],
        "hasReferenceDocs": true,
        "usbDocs": "/device/usb",
        "hideHomeDetailsVideo": true,
        "invertedMenu": true,
        "coloredToolbox": true,
        "monacoToolbox": true,
        "hasAudio": true,
        "socialOptions": {
            "orgTwitterHandle": "MSMakeCode",
            "hashtags": "MakeCode",
            "discourse": "https://forum.makecode.com/",
            "discourseCategory": "micro:bit"
        },
        "blocklyOptions": {
            "grid": {
                "spacing": 45,
                "length": 7,
                "colour": "rgba(189, 195, 199, 0.30)",
                "snap": false
            }
        },
        "blockColors": {
            "input": "#E9407F",
            "loops": "#61b22f",
            "logic": "#fdc400",
            "math": "#62549f",
            "variables": "#140e4e",
            "text": "#3BBDD6",
            "advanced": "#00272B",
            "functions": "#005a9e",
            "arrays": "#8A1C7C"
        },
        "blocksCollapsing": true,
        "highContrast": true,
        "greenScreen": true,
        "print": true,
        "selectLanguage": true,
        "availableLocales": [
            "en",
            "ar",
            "bg",
            "ca",
            "cs",
            "cy",
            "da",
            "de",
            "el",
            "es-ES",
            "fi",
            "fr",
            "he",
            "hu",
            "is",
            "it",
            "ja",
            "ko",
            "nl",
            "nb",
            "nn-NO",
            "pl",
            "pt-BR",
            "pt-PT",
            "ru",
            "si-LK",
            "sk",
            "sr",
            "sv-SE",
            "tr",
            "uk",
            "vi",
            "zh-CN",
            "zh-TW"
        ],
        "monacoColors": {
            "editor.background": "#39474e"
        },
        "monacoFieldEditors": ["soundeffect-editor", "image-editor"],
        "browserDbPrefixes": {
            "1": "v1",
            "2": "v2",
            "3": "v3",
            "4": "v4",
            "5": "v5",
            "6": "v6",
            "7": "v7"
        },
        "editorVersionPaths": {
            "0": "v0"
        },
        "showProjectSettings": true,
        "scriptManager": true,
        "debugger": true,
        "simGifTransparent": "rgba(0,0,0,0)",
        "simGifMaxFrames": 44,
        "simScreenshot": true,
        "simScreenshotMaxUriLength": 300000,
        "simGif": true,
        "simGifWidth": 240,
        "qrCode": true,
        "importExtensionFiles": true,
        "nameProjectFirst": true,
        "githubEditor": true,
        "chooseLanguageRestrictionOnNewProject": true,
        "openProjectNewTab": true,
        "python": true,
        "appFlashingTroubleshoot": "/device/windows-app/troubleshoot",
        "immersiveReader": true,
        "tutorialCodeValidation": true,
        "downloadDialogTheme": {
            "webUSBDeviceNames": ["STeaMi CMSIS-DAP", "DAPLink CMSIS-DAP"],
            "minimumFirmwareVersion": "0249",
            "deviceIcon": "xicon microbit",
            "deviceSuccessIcon": "xicon microbit-check",
            "downloadMenuHelpURL": "/device/usb",
            "downloadHelpURL": "/device/usb",
            "troubleshootWebUSBHelpURL": "/device/usb/webusb/troubleshoot",
            "incompatibleHardwareHelpURL": "/device/v2",
            "dragFileImage": "docs/static/download/transfer.png",
            "connectDeviceImage": "docs/static/download/connect-microbit.gif",
            "selectDeviceImage": "docs/static/download/selecting-microbit.gif",
            "connectionSuccessImage": "docs/static/download/successfully-paired.png",
            "incompatibleHardwareImage": "docs/static/download/incompatible.png",
            "usbDeviceForgottenImage": "docs/static/download/device-forgotten.gif",
            "browserUnpairImage": "docs/static/download/browser-unpair-image.gif"
        },
        "winAppDeprImage": "docs/static/winapp.PNG",
        "showWinAppDeprBanner": false,
        "tours": {
            "editor": "/tours/editor-tour"
        },
        "tutorialSimSidebarLayout": true,
        "preferWebUSBDownload": true,
        "hideReplaceMyCode": true,
        "matchWebUSBDeviceInSim": true,
        "condenseProfile": true,
        "cloudProfileIcon": "docs/static/profile/microbit-cloud.png",
        "timeMachine": true,
        "timeMachineDiffInterval": 600000,
        "timeMachineSnapshotInterval": 1800000,
        "TOC": [
            {
                "name": "About",
                "path": "/about",
                "subitems": []
            },
            {
                "name": "FAQ",
                "path": "/faq",
                "subitems": []
            },
            {
                "name": "Projects",
                "path": "/projects",
                "subitems": []
            },
            {
                "name": "GitHub",
                "path": "/github",
                "subitems": []
            },
            {
                "name": "Blocks",
                "path": "/blocks",
                "subitems": [
                    {
                        "name": "On Start",
                        "path": "/blocks/on-start",
                        "subitems": []
                    },
                    {
                        "name": "Loops",
                        "path": "/blocks/loops",
                        "subitems": [
                            {
                                "name": "repeat",
                                "path": "/blocks/loops/repeat",
                                "subitems": []
                            },
                            {
                                "name": "for",
                                "path": "/blocks/loops/for",
                                "subitems": []
                            },
                            {
                                "name": "while",
                                "path": "/blocks/loops/while",
                                "subitems": []
                            },
                            {
                                "name": "for of",
                                "path": "/blocks/loops/for-of",
                                "subitems": []
                            }
                        ]
                    },
                    {
                        "name": "Logic",
                        "path": "/blocks/logic",
                        "subitems": [
                            {
                                "name": "if",
                                "path": "/blocks/logic/if",
                                "subitems": []
                            },
                            {
                                "name": "Boolean",
                                "path": "/blocks/logic/boolean",
                                "subitems": []
                            }
                        ]
                    },
                    {
                        "name": "Variables",
                        "path": "/blocks/variables",
                        "subitems": [
                            {
                                "name": "assign",
                                "path": "/blocks/variables/assign",
                                "subitems": []
                            },
                            {
                                "name": "change var",
                                "path": "/blocks/variables/change",
                                "subitems": []
                            },
                            {
                                "name": "var",
                                "path": "/blocks/variables/var",
                                "subitems": []
                            }
                        ]
                    },
                    {
                        "name": "Math",
                        "path": "/blocks/math",
                        "subitems": []
                    },
                    {
                        "name": "JavaScript blocks",
                        "path": "/blocks/javascript-blocks",
                        "subitems": []
                    },
                    {
                        "name": "Custom blocks",
                        "path": "/blocks/custom",
                        "subitems": []
                    }
                ]
            },
            {
                "name": "Python",
                "path": "/python",
                "subitems": [
                    {
                        "name": "Calling",
                        "path": "/python/call",
                        "subitems": []
                    },
                    {
                        "name": "Sequencing",
                        "path": "/python/sequence",
                        "subitems": []
                    },
                    {
                        "name": "Variables",
                        "path": "/python/variables",
                        "subitems": []
                    },
                    {
                        "name": "Operators",
                        "path": "/python/operators",
                        "subitems": []
                    },
                    {
                        "name": "Statements",
                        "path": "/python/statements",
                        "subitems": []
                    },
                    {
                        "name": "Functions",
                        "path": "/python/functions",
                        "subitems": []
                    },
                    {
                        "name": "Classes",
                        "path": "/python/classes",
                        "subitems": []
                    }
                ]
            },
            {
                "name": "JavaScript",
                "path": "/javascript",
                "subitems": [
                    {
                        "name": "Calling",
                        "path": "/javascript/call",
                        "subitems": []
                    },
                    {
                        "name": "Sequencing",
                        "path": "/javascript/sequence",
                        "subitems": []
                    },
                    {
                        "name": "Variables",
                        "path": "/javascript/variables",
                        "subitems": []
                    },
                    {
                        "name": "Operators",
                        "path": "/javascript/operators",
                        "subitems": []
                    },
                    {
                        "name": "Statements",
                        "path": "/javascript/statements",
                        "subitems": []
                    },
                    {
                        "name": "Functions",
                        "path": "/javascript/functions",
                        "subitems": []
                    },
                    {
                        "name": "Types",
                        "path": "/javascript/types",
                        "subitems": []
                    },
                    {
                        "name": "Classes",
                        "path": "/javascript/classes",
                        "subitems": []
                    },
                    {
                        "name": "Interfaces",
                        "path": "/javascript/interfaces",
                        "subitems": []
                    },
                    {
                        "name": "Generics",
                        "path": "/javascript/generics",
                        "subitems": []
                    }
                ]
            },
            {
                "name": "Types",
                "path": "/types",
                "subitems": [
                    {
                        "name": "Number",
                        "path": "/types/number",
                        "subitems": []
                    },
                    {
                        "name": "String",
                        "path": "/types/string",
                        "subitems": []
                    },
                    {
                        "name": "Boolean",
                        "path": "/types/boolean",
                        "subitems": []
                    },
                    {
                        "name": "Array",
                        "path": "/types/array",
                        "subitems": []
                    },
                    {
                        "name": "Function",
                        "path": "/types/function",
                        "subitems": []
                    }
                ]
            },
            {
                "name": "Miscellaneous",
                "path": "",
                "subitems": [
                    {
                        "name": "About",
                        "path": "/about",
                        "subitems": []
                    },
                    {
                        "name": "Support",
                        "path": "/support",
                        "subitems": []
                    },
                    {
                        "name": "Translate",
                        "path": "/translate",
                        "subitems": []
                    },
                    {
                        "name": "Sharing projects",
                        "path": "/share",
                        "subitems": []
                    },
                    {
                        "name": "Offline support",
                        "path": "/offline",
                        "subitems": []
                    },
                    {
                        "name": "Save",
                        "path": "/save",
                        "subitems": []
                    },
                    {
                        "name": "Home page content",
                        "path": "/homepage-content",
                        "subitems": []
                    }
                ]
            },
            {
                "name": "Developers",
                "path": "",
                "subitems": [
                    {
                        "name": "Command Line Interface",
                        "path": "/cli",
                        "subitems": []
                    },
                    {
                        "name": "Visual Studio Code support",
                        "path": "/code",
                        "subitems": []
                    },
                    {
                        "name": "Blocks Embed",
                        "path": "/blocks-embed",
                        "subitems": []
                    }
                ]
            }
        ],
        "id": "steami",
        "title": "MakeCode for STeaMi",
        "name": "makecode.steami.",
        "description": "A Blocks / JavaScript code editor for the STeaMi:bit powered by Microsoft MakeCode.",
        "htmlDocIncludes": {}
    },
    "queryVariants": {
        "hidemenu": {
            "appTheme": {
                "hideMenuBar": true
            }
        },
        "androidapp": {
            "compile": {
                "webUSB": false
            },
            "appTheme": {
                "disableBlobObjectDownload": true
            }
        },
        "skillsMap=1": {
            "appTheme": {
                "hideReplaceMyCode": false
            }
        },
        "teachertool=1": {
            "appTheme": {
                "hideMenuBar": true,
                "workspaceSearch": true
            }
        }
    },
    "uploadDocs": false,
    "versions": {
        "target": "0.0.2",
        "pxt": "10.0.23"
    },
    "blocksprj": {
        "id": "blocksprj",
        "config": {
            "name": "{0} block",
            "dependencies": {
                "core": "*"
            },
            "description": "",
            "files": ["main.blocks", "main.ts", "README.md"],
            "additionalFilePaths": []
        },
        "files": {
            "README.md": "",
            "main.blocks": "<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"forever\"></block>\n</xml>",
            "main.ts": "\n"
        }
    },
    "tsprj": {
        "id": "tsprj",
        "config": {
            "name": "{0} bit",
            "dependencies": {
                "core": "*"
            },
            "description": "",
            "files": ["main.ts", "README.md"],
            "additionalFilePaths": []
        },
        "files": {
            "README.md": "",
            "main.ts": "forever(function () {\n    pause(500);\n});\n"
        }
    },
    "bundledpkgs": {
        "core": {
            "README.md": "# core\n\nThe core library.\n\n",
            "advmath.cpp": "#include \"pxtbase.h\"\n\nusing namespace std;\n\n#define SINGLE(op) return fromDouble(::op(toDouble(x)));\n\nnamespace Math_ {\n\n//%\nTNumber log2(TNumber x){SINGLE(log2)}\n//%\nTNumber exp(TNumber x){SINGLE(exp)}\n//%\nTNumber tanh(TNumber x){SINGLE(tanh)}\n//%\nTNumber sinh(TNumber x){SINGLE(sinh)}\n//%\nTNumber cosh(TNumber x){SINGLE(cosh)}\n//%\nTNumber atanh(TNumber x){SINGLE(atanh)}\n//%\nTNumber asinh(TNumber x){SINGLE(asinh)}\n//%\nTNumber acosh(TNumber x){SINGLE(acosh)}\n\n}",
            "board.json": "{\n    \"visual\": {\n        \"image\": \"pkg://board.svg\",\n        \"outlineImage\": \"pkg://boardwireframe.svg\",\n        \"useCrocClips\": false,\n        \"width\": 350,\n        \"height\": 350,\n        \"pinDist\": 10,\n        \"pinBlocks\": [\n            {\n                \"x\": 111.893255123826,\n                \"y\": 93.3587830762523,\n                \"labels\": [\n                    \"SCL\",\n                    \"SDA\",\n                    \"AREF\",\n                    \"GND0\",\n                    \"~D13\",\n                    \"~D12\",\n                    \"~D11\",\n                    \"~D10\",\n                    \"~D9\",\n                    \"~D8\"\n                ]\n            },\n            {\n                \"x\": 216.74056057524268,\n                \"y\": 93.35989712141898,\n                \"labels\": [\n                    \"D7\",\n                    \"~D6\",\n                    \"~D5\",\n                    \"~D4\",\n                    \"~D3\",\n                    \"D2\",\n                    \"TX/D1\",\n                    \"RX/D0\"\n                ]\n            },\n            {\n                \"x\": 147.55630353559405,\n                \"y\": 277.17711508873947,\n                \"labels\": [\n                    \" \",\n                    \"IOREF\",\n                    \"RESET\",\n                    \"3.3V\",\n                    \"5V\",\n                    \"GND1\",\n                    \"GND2\",\n                    \"VIN\"\n                ]\n            },\n            {\n                \"x\": 236.509741585078,\n                \"y\": 277.17711508873947,\n                \"labels\": [\"A0\", \"A1\", \"A2\", \"A3\", \"A4\", \"A5\"]\n            }\n        ],\n        \"leds\": [\n            {\n                \"x\": 369,\n                \"y\": 110,\n                \"h\": 7,\n                \"w\": 17,\n                \"color\": \"#1EFF1E\",\n                \"label\": \"LED2\"\n            },\n            {\n                \"x\": 332,\n                \"y\": 110,\n                \"h\": 7,\n                \"w\": 17,\n                \"color\": \"#1EFF1E\",\n                \"label\": \"LED\"\n            }\n        ],\n        \"buttons\": [\n            {\n                \"x\": 33.6,\n                \"y\": 163,\n                \"w\": 19,\n                \"h\": 19,\n                \"index\": 0,\n                \"label\": \"USER\"\n            }\n        ],\n        \"reset\": {\n            \"x\": 33.6,\n            \"y\": 235,\n            \"w\": 19,\n            \"h\": 19\n        }\n    },\n    \"gpioPinBlocks\": [\n        [\"SCL\", \"SDA\", \"~D13\", \"~D12\", \"~D11\", \"~D10\", \"~D9\", \"~D8\"],\n        [\"D7\", \"~D6\", \"~D5\", \"~D4\", \"~D3\", \"D2\", \"TX/D1\", \"RX/D0\"],\n        [\"A0\", \"A1\", \"A2\", \"A3\", \"A4\", \"A5\"]\n    ],\n    \"gpioPinMap\": {\n        \"A0\": \"A0\",\n        \"A1\": \"A1\",\n        \"A2\": \"A2\",\n        \"A3\": \"A3\",\n        \"A4\": \"A4\",\n        \"A5\": \"A5\",\n\n        \"D0\": \"RX/D0\",\n        \"D1\": \"TX/D1\",\n        \"D2\": \"D2\",\n        \"D3\": \"~D3\",\n        \"D4\": \"~D4\",\n        \"D5\": \"~D5\",\n        \"D6\": \"~D6\",\n        \"D7\": \"D7\",\n        \"D8\": \"~D8\",\n        \"D9\": \"~D9\",\n        \"D10\": \"~D10\",\n        \"D11\": \"~D11\",\n        \"D12\": \"~D12\",\n        \"D13\": \"~D13\",\n        \"D14\": \"SDA\",\n        \"D15\": \"SCL\",\n\n        \"LCD_RESET\": \"D7\",\n        \"LCD_ENABLE\": \"D8\",\n        \"LCD_DATALINE4\": \"D9\",\n        \"LCD_DATALINE5\": \"D10\",\n        \"LCD_DATALINE6\": \"D11\",\n        \"LCD_DATALINE7\": \"D12\",\n\n        \"BTN_USER\": \"BTN_USER\"\n    },\n    \"spiPins\": {\n        \"MOSI\": \"~D11\",\n        \"MISO\": \"~D12\",\n        \"SCK\": \"~D13\"\n    },\n    \"i2cPins\": {\n        \"SDA\": \"SDA\",\n        \"SCL\": \"SCL\"\n    },\n    \"groundPins\": [\"GND1\", \"GND0\", \"GND2\"],\n    \"threeVoltPins\": [\"3.3V\"],\n    \"fiveVoltPins\": [\"5V\"],\n    \"onboardComponents\": [\n        \"accelerometer\",\n        \"thermometer\",\n        \"humidity\",\n        \"pressure\"\n    ],\n    \"marginWhenBreadboarding\": [0, 0, 80, 0]\n}\n",
            "board.svg": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<svg\n   inkscape:export-ydpi=\"300\"\n   inkscape:export-xdpi=\"300\"\n   inkscape:export-filename=\"../Images/steami.png\"\n   inkscape:version=\"1.2.2 (b0a8486541, 2022-12-01)\"\n   sodipodi:docname=\"steami.svg\"\n   id=\"svg7007\"\n   version=\"1.1\"\n   viewBox=\"0 0 220.06459 316.30044\"\n   height=\"316.30045mm\"\n   width=\"220.06459mm\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\">\n  <defs\n     id=\"defs7001\">\n    <marker\n       style=\"overflow:visible\"\n       id=\"marker33752\"\n       refX=\"0\"\n       refY=\"0\"\n       orient=\"auto-start-reverse\"\n       inkscape:stockid=\"TriangleStart\"\n       markerWidth=\"2\"\n       markerHeight=\"2\"\n       viewBox=\"0 0 5.3244081 6.1553851\"\n       inkscape:isstock=\"true\"\n       inkscape:collect=\"always\"\n       preserveAspectRatio=\"xMidYMid\">\n      <path\n         transform=\"scale(0.5)\"\n         style=\"fill:context-stroke;fill-rule:evenodd;stroke:context-stroke;stroke-width:1pt\"\n         d=\"M 5.77,0 -2.88,5 V -5 Z\"\n         id=\"path33750\" />\n    </marker>\n    <marker\n       style=\"overflow:visible\"\n       id=\"TriangleStart\"\n       refX=\"0\"\n       refY=\"0\"\n       orient=\"auto-start-reverse\"\n       inkscape:stockid=\"TriangleStart\"\n       markerWidth=\"2\"\n       markerHeight=\"2\"\n       viewBox=\"0 0 5.3244081 6.1553851\"\n       inkscape:isstock=\"true\"\n       inkscape:collect=\"always\"\n       preserveAspectRatio=\"xMidYMid\">\n      <path\n         transform=\"scale(0.5)\"\n         style=\"fill:context-stroke;fill-rule:evenodd;stroke:context-stroke;stroke-width:1pt\"\n         d=\"M 5.77,0 -2.88,5 V -5 Z\"\n         id=\"path135\" />\n    </marker>\n    <filter\n       height=\"1.080566\"\n       y=\"-0.040251784\"\n       width=\"1.1485966\"\n       x=\"-0.07424071\"\n       id=\"filter9604\"\n       style=\"color-interpolation-filters:sRGB\"\n       inkscape:collect=\"always\">\n      <feGaussianBlur\n         id=\"feGaussianBlur9606\"\n         stdDeviation=\"0.68192124\"\n         inkscape:collect=\"always\" />\n    </filter>\n    <radialGradient\n       r=\"249.35139\"\n       fy=\"503.09894\"\n       fx=\"132.58411\"\n       cy=\"503.09894\"\n       cx=\"132.58411\"\n       gradientTransform=\"matrix(1.7228054,-0.08453398,0.01834008,0.40223989,-42.573293,216.18843)\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"radialGradient12357\"\n       xlink:href=\"#linearGradient23785\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       id=\"linearGradient23785\">\n      <stop\n         style=\"stop-color:#ffcc00;stop-opacity:1\"\n         offset=\"0\"\n         id=\"stop23787\" />\n      <stop\n         style=\"stop-color:#c8ab37;stop-opacity:0;\"\n         offset=\"1\"\n         id=\"stop23789\" />\n    </linearGradient>\n    <radialGradient\n       r=\"249.35139\"\n       fy=\"503.09894\"\n       fx=\"132.58411\"\n       cy=\"503.09894\"\n       cx=\"132.58411\"\n       gradientTransform=\"matrix(1.7228054,-0.08453398,0.01834008,0.40223989,-42.573293,216.18843)\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"radialGradient12353\"\n       xlink:href=\"#linearGradient10704\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       id=\"linearGradient10704\">\n      <stop\n         style=\"stop-color:#d4aa00;stop-opacity:1\"\n         offset=\"0\"\n         id=\"stop10706\" />\n      <stop\n         style=\"stop-color:#d3b12c;stop-opacity:1\"\n         offset=\"1\"\n         id=\"stop10708\" />\n    </linearGradient>\n    <radialGradient\n       r=\"249.35139\"\n       fy=\"503.09894\"\n       fx=\"132.58411\"\n       cy=\"503.09894\"\n       cx=\"132.58411\"\n       gradientTransform=\"matrix(1.7228054,-0.08453398,0.01834008,0.40223989,-42.573293,216.18843)\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"radialGradient12355\"\n       xlink:href=\"#linearGradient10704\"\n       inkscape:collect=\"always\" />\n    <radialGradient\n       r=\"249.35139\"\n       fy=\"503.09894\"\n       fx=\"132.58411\"\n       cy=\"503.09894\"\n       cx=\"132.58411\"\n       gradientTransform=\"matrix(0.66043213,-0.03125341,0.00703061,0.14871379,-4.26896,221.75567)\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"radialGradient12359\"\n       xlink:href=\"#linearGradient23785\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       gradientTransform=\"rotate(90,66.526448,186.74179)\"\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient10704\"\n       id=\"linearGradient10716\"\n       gradientUnits=\"userSpaceOnUse\"\n       x1=\"171.6794\"\n       y1=\"223.3912\"\n       x2=\"150.93372\"\n       y2=\"223.30081\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       id=\"linearGradient10710\">\n      <stop\n         style=\"stop-color:#ffe680;stop-opacity:1\"\n         offset=\"0\"\n         id=\"stop10712\" />\n      <stop\n         style=\"stop-color:#d4aa00;stop-opacity:1\"\n         offset=\"1\"\n         id=\"stop10714\" />\n    </linearGradient>\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient10704\"\n       id=\"linearGradient10806\"\n       gradientUnits=\"userSpaceOnUse\"\n       x1=\"171.6794\"\n       y1=\"223.3912\"\n       x2=\"150.93372\"\n       y2=\"223.30081\"\n       gradientTransform=\"rotate(90,47.583717,167.79906)\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient10710\"\n       id=\"linearGradient10808\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"rotate(90,36.128205,154.93306)\"\n       x1=\"-215.44655\"\n       y1=\"128.35896\"\n       x2=\"-211.76324\"\n       y2=\"132.42793\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24437\"\n       id=\"linearGradient24435\"\n       x1=\"38.412743\"\n       y1=\"372.25626\"\n       x2=\"43.168636\"\n       y2=\"382.10031\"\n       gradientUnits=\"userSpaceOnUse\" />\n    <linearGradient\n       id=\"linearGradient24437\"\n       inkscape:collect=\"always\">\n      <stop\n         id=\"stop24439\"\n         offset=\"0\"\n         style=\"stop-color:#ffff00;stop-opacity:0\" />\n      <stop\n         style=\"stop-color:#ffdd55;stop-opacity:1\"\n         offset=\"0.25231078\"\n         id=\"stop24441\" />\n      <stop\n         id=\"stop24443\"\n         offset=\"1\"\n         style=\"stop-color:#ffdd55;stop-opacity:0\" />\n    </linearGradient>\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24361\"\n       id=\"linearGradient24423\"\n       x1=\"137.76236\"\n       y1=\"370.2446\"\n       x2=\"142.97569\"\n       y2=\"377.36786\"\n       gradientUnits=\"userSpaceOnUse\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       id=\"linearGradient24361\">\n      <stop\n         style=\"stop-color:#ffff00;stop-opacity:0\"\n         offset=\"0\"\n         id=\"stop24363\" />\n      <stop\n         id=\"stop24369\"\n         offset=\"0.55225623\"\n         style=\"stop-color:#ffdd55;stop-opacity:1\" />\n      <stop\n         style=\"stop-color:#ffdd55;stop-opacity:0\"\n         offset=\"1\"\n         id=\"stop24365\" />\n    </linearGradient>\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24361\"\n       id=\"linearGradient24425\"\n       x1=\"251.10089\"\n       y1=\"371.15778\"\n       x2=\"252.1458\"\n       y2=\"377.98868\"\n       gradientUnits=\"userSpaceOnUse\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24361\"\n       id=\"linearGradient24445\"\n       x1=\"356.77228\"\n       y1=\"366.14532\"\n       x2=\"361.01593\"\n       y2=\"382.00784\"\n       gradientUnits=\"userSpaceOnUse\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24437\"\n       id=\"linearGradient24453\"\n       x1=\"439.36942\"\n       y1=\"369.01877\"\n       x2=\"446.69507\"\n       y2=\"383.37164\"\n       gradientUnits=\"userSpaceOnUse\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24437\"\n       id=\"linearGradient24451\"\n       x1=\"464.57236\"\n       y1=\"368.43402\"\n       x2=\"466.07184\"\n       y2=\"381.72372\"\n       gradientUnits=\"userSpaceOnUse\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       id=\"linearGradient22993\">\n      <stop\n         style=\"stop-color:#808080;stop-opacity:1;\"\n         offset=\"0\"\n         id=\"stop22995\" />\n      <stop\n         style=\"stop-color:#8c8c8c;stop-opacity:1\"\n         offset=\"1\"\n         id=\"stop22997\" />\n    </linearGradient>\n    <linearGradient\n       inkscape:collect=\"always\"\n       id=\"linearGradient23003\">\n      <stop\n         style=\"stop-color:#ffffff;stop-opacity:1;\"\n         offset=\"0\"\n         id=\"stop23005\" />\n      <stop\n         style=\"stop-color:#ffffff;stop-opacity:0;\"\n         offset=\"1\"\n         id=\"stop23007\" />\n    </linearGradient>\n    <linearGradient\n       id=\"linearGradient23519\"\n       inkscape:collect=\"always\">\n      <stop\n         id=\"stop23521\"\n         offset=\"0\"\n         style=\"stop-color:#cccccc;stop-opacity:1\" />\n      <stop\n         id=\"stop23523\"\n         offset=\"1\"\n         style=\"stop-color:#8c8c8c;stop-opacity:1\" />\n    </linearGradient>\n    <linearGradient\n       id=\"linearGradient24549\"\n       inkscape:collect=\"always\">\n      <stop\n         id=\"stop24551\"\n         offset=\"0\"\n         style=\"stop-color:#ffffff;stop-opacity:1\" />\n      <stop\n         style=\"stop-color:#adadad;stop-opacity:0.6;\"\n         offset=\"0.69260091\"\n         id=\"stop24555\" />\n      <stop\n         id=\"stop24553\"\n         offset=\"1\"\n         style=\"stop-color:#333333;stop-opacity:0;\" />\n    </linearGradient>\n    <linearGradient\n       inkscape:collect=\"always\"\n       id=\"linearGradient24179\">\n      <stop\n         style=\"stop-color:#000000;stop-opacity:1;\"\n         offset=\"0\"\n         id=\"stop24181\" />\n      <stop\n         style=\"stop-color:#000000;stop-opacity:0;\"\n         offset=\"1\"\n         id=\"stop24183\" />\n    </linearGradient>\n    <linearGradient\n       inkscape:collect=\"always\"\n       id=\"linearGradient24275\">\n      <stop\n         style=\"stop-color:#333333;stop-opacity:1;\"\n         offset=\"0\"\n         id=\"stop24277\" />\n      <stop\n         style=\"stop-color:#333333;stop-opacity:0;\"\n         offset=\"1\"\n         id=\"stop24279\" />\n    </linearGradient>\n    <linearGradient\n       inkscape:collect=\"always\"\n       id=\"linearGradient24539\">\n      <stop\n         style=\"stop-color:#ffd5d5;stop-opacity:1\"\n         offset=\"0\"\n         id=\"stop24541\" />\n      <stop\n         style=\"stop-color:#cccccc;stop-opacity:0;\"\n         offset=\"1\"\n         id=\"stop24543\" />\n    </linearGradient>\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient23519\"\n       id=\"radialGradient3637\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-1.042022,-1.0083526,0.95442073,-1.0005399,40.179297,-1601.671)\"\n       cx=\"-290.16394\"\n       cy=\"-654.83032\"\n       fx=\"-290.16394\"\n       fy=\"-654.83032\"\n       r=\"4.6559095\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24549\"\n       id=\"radialGradient3645\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-2.7323378,3.7815376e-7,-2.6301646e-7,-2.3126096,901.4922,-2170.3816)\"\n       cx=\"241.00996\"\n       cy=\"-655.03149\"\n       fx=\"241.00996\"\n       fy=\"-655.03149\"\n       r=\"4.0617666\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24539\"\n       id=\"radialGradient3679\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-0.69969957,0.31804293,-0.27726489,-0.60998698,-259.33399,1138.6771)\"\n       cx=\"-265.55276\"\n       cy=\"655.29767\"\n       fx=\"-265.55276\"\n       fy=\"655.29767\"\n       r=\"18.04899\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient23519\"\n       id=\"radialGradient3735\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-1.042022,-1.0083526,0.95442073,-1.0005399,40.179297,-1601.671)\"\n       cx=\"-290.16394\"\n       cy=\"-654.83032\"\n       fx=\"-290.16394\"\n       fy=\"-654.83032\"\n       r=\"4.6559095\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24549\"\n       id=\"radialGradient3743\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-2.7323378,3.7815376e-7,-2.6301646e-7,-2.3126096,901.4922,-2170.3816)\"\n       cx=\"241.00996\"\n       cy=\"-655.03149\"\n       fx=\"241.00996\"\n       fy=\"-655.03149\"\n       r=\"4.0617666\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24539\"\n       id=\"radialGradient3777\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-0.69969957,0.31804293,-0.27726489,-0.60998698,-259.33399,1138.6771)\"\n       cx=\"-265.55276\"\n       cy=\"655.29767\"\n       fx=\"-265.55276\"\n       fy=\"655.29767\"\n       r=\"18.04899\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient23519\"\n       id=\"radialGradient3833\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-1.042022,-1.0083526,0.95442073,-1.0005399,40.179297,-1601.671)\"\n       cx=\"-290.16394\"\n       cy=\"-654.83032\"\n       fx=\"-290.16394\"\n       fy=\"-654.83032\"\n       r=\"4.6559095\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24549\"\n       id=\"radialGradient3841\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-2.7323378,3.7815376e-7,-2.6301646e-7,-2.3126096,901.4922,-2170.3816)\"\n       cx=\"241.00996\"\n       cy=\"-655.03149\"\n       fx=\"241.00996\"\n       fy=\"-655.03149\"\n       r=\"4.0617666\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24539\"\n       id=\"radialGradient3875\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-0.69969957,0.31804293,-0.27726489,-0.60998698,-259.33399,1138.6771)\"\n       cx=\"-265.55276\"\n       cy=\"655.29767\"\n       fx=\"-265.55276\"\n       fy=\"655.29767\"\n       r=\"18.04899\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient23519\"\n       id=\"radialGradient3931\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-1.042022,-1.0083526,0.95442073,-1.0005399,40.179297,-1601.671)\"\n       cx=\"-290.16394\"\n       cy=\"-654.83032\"\n       fx=\"-290.16394\"\n       fy=\"-654.83032\"\n       r=\"4.6559095\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24549\"\n       id=\"radialGradient3939\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-2.7323378,3.7815376e-7,-2.6301646e-7,-2.3126096,901.4922,-2170.3816)\"\n       cx=\"241.00996\"\n       cy=\"-655.03149\"\n       fx=\"241.00996\"\n       fy=\"-655.03149\"\n       r=\"4.0617666\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24539\"\n       id=\"radialGradient3973\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-0.69969957,0.31804293,-0.27726489,-0.60998698,-259.33399,1138.6771)\"\n       cx=\"-265.55276\"\n       cy=\"655.29767\"\n       fx=\"-265.55276\"\n       fy=\"655.29767\"\n       r=\"18.04899\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient23519\"\n       id=\"radialGradient4029\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-1.042022,-1.0083526,0.95442073,-1.0005399,40.179297,-1601.671)\"\n       cx=\"-290.16394\"\n       cy=\"-654.83032\"\n       fx=\"-290.16394\"\n       fy=\"-654.83032\"\n       r=\"4.6559095\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24549\"\n       id=\"radialGradient4037\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-2.7323378,3.7815376e-7,-2.6301646e-7,-2.3126096,901.4922,-2170.3816)\"\n       cx=\"241.00996\"\n       cy=\"-655.03149\"\n       fx=\"241.00996\"\n       fy=\"-655.03149\"\n       r=\"4.0617666\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24539\"\n       id=\"radialGradient4071\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-0.69969957,0.31804293,-0.27726489,-0.60998698,-259.33399,1138.6771)\"\n       cx=\"-265.55276\"\n       cy=\"655.29767\"\n       fx=\"-265.55276\"\n       fy=\"655.29767\"\n       r=\"18.04899\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient23519\"\n       id=\"radialGradient4127\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-1.042022,-1.0083526,0.95442073,-1.0005399,40.179297,-1601.671)\"\n       cx=\"-290.16394\"\n       cy=\"-654.83032\"\n       fx=\"-290.16394\"\n       fy=\"-654.83032\"\n       r=\"4.6559095\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24549\"\n       id=\"radialGradient4135\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-2.7323378,3.7815376e-7,-2.6301646e-7,-2.3126096,901.4922,-2170.3816)\"\n       cx=\"241.00996\"\n       cy=\"-655.03149\"\n       fx=\"241.00996\"\n       fy=\"-655.03149\"\n       r=\"4.0617666\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24539\"\n       id=\"radialGradient4169\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-0.69969957,0.31804293,-0.27726489,-0.60998698,-259.33399,1138.6771)\"\n       cx=\"-265.55276\"\n       cy=\"655.29767\"\n       fx=\"-265.55276\"\n       fy=\"655.29767\"\n       r=\"18.04899\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient23519\"\n       id=\"radialGradient4225\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-1.042022,-1.0083526,0.95442073,-1.0005399,40.179297,-1601.671)\"\n       cx=\"-290.16394\"\n       cy=\"-654.83032\"\n       fx=\"-290.16394\"\n       fy=\"-654.83032\"\n       r=\"4.6559095\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24549\"\n       id=\"radialGradient4233\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-2.7323378,3.7815376e-7,-2.6301646e-7,-2.3126096,901.4922,-2170.3816)\"\n       cx=\"241.00996\"\n       cy=\"-655.03149\"\n       fx=\"241.00996\"\n       fy=\"-655.03149\"\n       r=\"4.0617666\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24539\"\n       id=\"radialGradient4267\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-0.69969957,0.31804293,-0.27726489,-0.60998698,-259.33399,1138.6771)\"\n       cx=\"-265.55276\"\n       cy=\"655.29767\"\n       fx=\"-265.55276\"\n       fy=\"655.29767\"\n       r=\"18.04899\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient23519\"\n       id=\"radialGradient4323\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-1.042022,-1.0083526,0.95442073,-1.0005399,40.179297,-1601.671)\"\n       cx=\"-290.16394\"\n       cy=\"-654.83032\"\n       fx=\"-290.16394\"\n       fy=\"-654.83032\"\n       r=\"4.6559095\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24549\"\n       id=\"radialGradient4331\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-2.7323378,3.7815376e-7,-2.6301646e-7,-2.3126096,901.4922,-2170.3816)\"\n       cx=\"241.00996\"\n       cy=\"-655.03149\"\n       fx=\"241.00996\"\n       fy=\"-655.03149\"\n       r=\"4.0617666\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24539\"\n       id=\"radialGradient4365\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-0.69969957,0.31804293,-0.27726489,-0.60998698,-259.33399,1138.6771)\"\n       cx=\"-265.55276\"\n       cy=\"655.29767\"\n       fx=\"-265.55276\"\n       fy=\"655.29767\"\n       r=\"18.04899\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient23519\"\n       id=\"radialGradient4421\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-1.042022,-1.0083526,0.95442073,-1.0005399,40.179297,-1601.671)\"\n       cx=\"-290.16394\"\n       cy=\"-654.83032\"\n       fx=\"-290.16394\"\n       fy=\"-654.83032\"\n       r=\"4.6559095\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24549\"\n       id=\"radialGradient4429\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-2.7323378,3.7815376e-7,-2.6301646e-7,-2.3126096,901.4922,-2170.3816)\"\n       cx=\"241.00996\"\n       cy=\"-655.03149\"\n       fx=\"241.00996\"\n       fy=\"-655.03149\"\n       r=\"4.0617666\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24539\"\n       id=\"radialGradient4463\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-0.69969957,0.31804293,-0.27726489,-0.60998698,-259.33399,1138.6771)\"\n       cx=\"-265.55276\"\n       cy=\"655.29767\"\n       fx=\"-265.55276\"\n       fy=\"655.29767\"\n       r=\"18.04899\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient23519\"\n       id=\"radialGradient4519\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-1.042022,-1.0083526,0.95442073,-1.0005399,40.179297,-1601.671)\"\n       cx=\"-290.16394\"\n       cy=\"-654.83032\"\n       fx=\"-290.16394\"\n       fy=\"-654.83032\"\n       r=\"4.6559095\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24549\"\n       id=\"radialGradient4527\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-2.7323378,3.7815376e-7,-2.6301646e-7,-2.3126096,901.4922,-2170.3816)\"\n       cx=\"241.00996\"\n       cy=\"-655.03149\"\n       fx=\"241.00996\"\n       fy=\"-655.03149\"\n       r=\"4.0617666\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24539\"\n       id=\"radialGradient4561\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-0.69969957,0.31804293,-0.27726489,-0.60998698,-259.33399,1138.6771)\"\n       cx=\"-265.55276\"\n       cy=\"655.29767\"\n       fx=\"-265.55276\"\n       fy=\"655.29767\"\n       r=\"18.04899\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient23519\"\n       id=\"radialGradient4617\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-1.042022,-1.0083526,0.95442073,-1.0005399,40.179297,-1601.671)\"\n       cx=\"-290.16394\"\n       cy=\"-654.83032\"\n       fx=\"-290.16394\"\n       fy=\"-654.83032\"\n       r=\"4.6559095\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24549\"\n       id=\"radialGradient4625\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-2.7323378,3.7815376e-7,-2.6301646e-7,-2.3126096,901.4922,-2170.3816)\"\n       cx=\"241.00996\"\n       cy=\"-655.03149\"\n       fx=\"241.00996\"\n       fy=\"-655.03149\"\n       r=\"4.0617666\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24539\"\n       id=\"radialGradient4659\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-0.69969957,0.31804293,-0.27726489,-0.60998698,-259.33399,1138.6771)\"\n       cx=\"-265.55276\"\n       cy=\"655.29767\"\n       fx=\"-265.55276\"\n       fy=\"655.29767\"\n       r=\"18.04899\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient23519\"\n       id=\"radialGradient4715\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-1.042022,-1.0083526,0.95442073,-1.0005399,40.179297,-1601.671)\"\n       cx=\"-290.16394\"\n       cy=\"-654.83032\"\n       fx=\"-290.16394\"\n       fy=\"-654.83032\"\n       r=\"4.6559095\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24549\"\n       id=\"radialGradient4723\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-2.7323378,3.7815376e-7,-2.6301646e-7,-2.3126096,901.4922,-2170.3816)\"\n       cx=\"241.00996\"\n       cy=\"-655.03149\"\n       fx=\"241.00996\"\n       fy=\"-655.03149\"\n       r=\"4.0617666\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24539\"\n       id=\"radialGradient4757\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-0.69969957,0.31804293,-0.27726489,-0.60998698,-259.33399,1138.6771)\"\n       cx=\"-265.55276\"\n       cy=\"655.29767\"\n       fx=\"-265.55276\"\n       fy=\"655.29767\"\n       r=\"18.04899\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient23519\"\n       id=\"radialGradient4813\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-1.042022,-1.0083526,0.95442073,-1.0005399,40.179297,-1601.671)\"\n       cx=\"-290.16394\"\n       cy=\"-654.83032\"\n       fx=\"-290.16394\"\n       fy=\"-654.83032\"\n       r=\"4.6559095\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24549\"\n       id=\"radialGradient4821\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-2.7323378,3.7815376e-7,-2.6301646e-7,-2.3126096,901.4922,-2170.3816)\"\n       cx=\"241.00996\"\n       cy=\"-655.03149\"\n       fx=\"241.00996\"\n       fy=\"-655.03149\"\n       r=\"4.0617666\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24539\"\n       id=\"radialGradient4855\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-0.69969957,0.31804293,-0.27726489,-0.60998698,-259.33399,1138.6771)\"\n       cx=\"-265.55276\"\n       cy=\"655.29767\"\n       fx=\"-265.55276\"\n       fy=\"655.29767\"\n       r=\"18.04899\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient23519\"\n       id=\"radialGradient4911\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-1.042022,-1.0083526,0.95442073,-1.0005399,40.179297,-1601.671)\"\n       cx=\"-290.16394\"\n       cy=\"-654.83032\"\n       fx=\"-290.16394\"\n       fy=\"-654.83032\"\n       r=\"4.6559095\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24549\"\n       id=\"radialGradient4919\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-2.7323378,3.7815376e-7,-2.6301646e-7,-2.3126096,901.4922,-2170.3816)\"\n       cx=\"241.00996\"\n       cy=\"-655.03149\"\n       fx=\"241.00996\"\n       fy=\"-655.03149\"\n       r=\"4.0617666\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24539\"\n       id=\"radialGradient4953\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-0.69969957,0.31804293,-0.27726489,-0.60998698,-259.33399,1138.6771)\"\n       cx=\"-265.55276\"\n       cy=\"655.29767\"\n       fx=\"-265.55276\"\n       fy=\"655.29767\"\n       r=\"18.04899\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient23519\"\n       id=\"radialGradient5009\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-1.042022,-1.0083526,0.95442073,-1.0005399,40.179297,-1601.671)\"\n       cx=\"-290.16394\"\n       cy=\"-654.83032\"\n       fx=\"-290.16394\"\n       fy=\"-654.83032\"\n       r=\"4.6559095\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24549\"\n       id=\"radialGradient5017\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-2.7323378,3.7815376e-7,-2.6301646e-7,-2.3126096,901.4922,-2170.3816)\"\n       cx=\"241.00996\"\n       cy=\"-655.03149\"\n       fx=\"241.00996\"\n       fy=\"-655.03149\"\n       r=\"4.0617666\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24539\"\n       id=\"radialGradient5051\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-0.69969957,0.31804293,-0.27726489,-0.60998698,-259.33399,1138.6771)\"\n       cx=\"-265.55276\"\n       cy=\"655.29767\"\n       fx=\"-265.55276\"\n       fy=\"655.29767\"\n       r=\"18.04899\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient23519\"\n       id=\"radialGradient5107\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-1.042022,-1.0083526,0.95442073,-1.0005399,40.179297,-1601.671)\"\n       cx=\"-290.16394\"\n       cy=\"-654.83032\"\n       fx=\"-290.16394\"\n       fy=\"-654.83032\"\n       r=\"4.6559095\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24549\"\n       id=\"radialGradient5115\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-2.7323378,3.7815376e-7,-2.6301646e-7,-2.3126096,901.4922,-2170.3816)\"\n       cx=\"241.00996\"\n       cy=\"-655.03149\"\n       fx=\"241.00996\"\n       fy=\"-655.03149\"\n       r=\"4.0617666\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24539\"\n       id=\"radialGradient5149\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-0.69969957,0.31804293,-0.27726489,-0.60998698,-259.33399,1138.6771)\"\n       cx=\"-265.55276\"\n       cy=\"655.29767\"\n       fx=\"-265.55276\"\n       fy=\"655.29767\"\n       r=\"18.04899\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient23519\"\n       id=\"radialGradient5205\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-1.042022,-1.0083526,0.95442073,-1.0005399,40.179297,-1601.671)\"\n       cx=\"-290.16394\"\n       cy=\"-654.83032\"\n       fx=\"-290.16394\"\n       fy=\"-654.83032\"\n       r=\"4.6559095\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24549\"\n       id=\"radialGradient5213\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-2.7323378,3.7815376e-7,-2.6301646e-7,-2.3126096,901.4922,-2170.3816)\"\n       cx=\"241.00996\"\n       cy=\"-655.03149\"\n       fx=\"241.00996\"\n       fy=\"-655.03149\"\n       r=\"4.0617666\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24539\"\n       id=\"radialGradient5247\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-0.69969957,0.31804293,-0.27726489,-0.60998698,-259.33399,1138.6771)\"\n       cx=\"-265.55276\"\n       cy=\"655.29767\"\n       fx=\"-265.55276\"\n       fy=\"655.29767\"\n       r=\"18.04899\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient23519\"\n       id=\"radialGradient5303\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-1.042022,-1.0083526,0.95442073,-1.0005399,40.179297,-1601.671)\"\n       cx=\"-290.16394\"\n       cy=\"-654.83032\"\n       fx=\"-290.16394\"\n       fy=\"-654.83032\"\n       r=\"4.6559095\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24549\"\n       id=\"radialGradient5311\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-2.7323378,3.7815376e-7,-2.6301646e-7,-2.3126096,901.4922,-2170.3816)\"\n       cx=\"241.00996\"\n       cy=\"-655.03149\"\n       fx=\"241.00996\"\n       fy=\"-655.03149\"\n       r=\"4.0617666\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24539\"\n       id=\"radialGradient5345\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-0.69969957,0.31804293,-0.27726489,-0.60998698,-259.33399,1138.6771)\"\n       cx=\"-265.55276\"\n       cy=\"655.29767\"\n       fx=\"-265.55276\"\n       fy=\"655.29767\"\n       r=\"18.04899\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient23519\"\n       id=\"radialGradient5401\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-1.042022,-1.0083526,0.95442073,-1.0005399,40.179297,-1601.671)\"\n       cx=\"-290.16394\"\n       cy=\"-654.83032\"\n       fx=\"-290.16394\"\n       fy=\"-654.83032\"\n       r=\"4.6559095\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24549\"\n       id=\"radialGradient5409\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-2.7323378,3.7815376e-7,-2.6301646e-7,-2.3126096,901.4922,-2170.3816)\"\n       cx=\"241.00996\"\n       cy=\"-655.03149\"\n       fx=\"241.00996\"\n       fy=\"-655.03149\"\n       r=\"4.0617666\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24539\"\n       id=\"radialGradient5443\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-0.69969957,0.31804293,-0.27726489,-0.60998698,-259.33399,1138.6771)\"\n       cx=\"-265.55276\"\n       cy=\"655.29767\"\n       fx=\"-265.55276\"\n       fy=\"655.29767\"\n       r=\"18.04899\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient23519\"\n       id=\"radialGradient5499\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-1.042022,-1.0083526,0.95442073,-1.0005399,40.179297,-1601.671)\"\n       cx=\"-290.16394\"\n       cy=\"-654.83032\"\n       fx=\"-290.16394\"\n       fy=\"-654.83032\"\n       r=\"4.6559095\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24549\"\n       id=\"radialGradient5507\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-2.7323378,3.7815376e-7,-2.6301646e-7,-2.3126096,901.4922,-2170.3816)\"\n       cx=\"241.00996\"\n       cy=\"-655.03149\"\n       fx=\"241.00996\"\n       fy=\"-655.03149\"\n       r=\"4.0617666\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24539\"\n       id=\"radialGradient5541\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-0.69969957,0.31804293,-0.27726489,-0.60998698,-259.33399,1138.6771)\"\n       cx=\"-265.55276\"\n       cy=\"655.29767\"\n       fx=\"-265.55276\"\n       fy=\"655.29767\"\n       r=\"18.04899\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient23519\"\n       id=\"radialGradient5597\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-1.042022,-1.0083526,0.95442073,-1.0005399,40.179297,-1601.671)\"\n       cx=\"-290.16394\"\n       cy=\"-654.83032\"\n       fx=\"-290.16394\"\n       fy=\"-654.83032\"\n       r=\"4.6559095\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24549\"\n       id=\"radialGradient5605\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-2.7323378,3.7815376e-7,-2.6301646e-7,-2.3126096,901.4922,-2170.3816)\"\n       cx=\"241.00996\"\n       cy=\"-655.03149\"\n       fx=\"241.00996\"\n       fy=\"-655.03149\"\n       r=\"4.0617666\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24539\"\n       id=\"radialGradient5639\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-0.69969957,0.31804293,-0.27726489,-0.60998698,-259.33399,1138.6771)\"\n       cx=\"-265.55276\"\n       cy=\"655.29767\"\n       fx=\"-265.55276\"\n       fy=\"655.29767\"\n       r=\"18.04899\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient23519\"\n       id=\"radialGradient5695\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-1.042022,-1.0083526,0.95442073,-1.0005399,40.179297,-1601.671)\"\n       cx=\"-290.16394\"\n       cy=\"-654.83032\"\n       fx=\"-290.16394\"\n       fy=\"-654.83032\"\n       r=\"4.6559095\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24549\"\n       id=\"radialGradient5703\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-2.7323378,3.7815376e-7,-2.6301646e-7,-2.3126096,901.4922,-2170.3816)\"\n       cx=\"241.00996\"\n       cy=\"-655.03149\"\n       fx=\"241.00996\"\n       fy=\"-655.03149\"\n       r=\"4.0617666\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24539\"\n       id=\"radialGradient5737\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-0.69969957,0.31804293,-0.27726489,-0.60998698,-259.33399,1138.6771)\"\n       cx=\"-265.55276\"\n       cy=\"655.29767\"\n       fx=\"-265.55276\"\n       fy=\"655.29767\"\n       r=\"18.04899\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient23519\"\n       id=\"radialGradient5793\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-1.042022,-1.0083526,0.95442073,-1.0005399,40.179297,-1601.671)\"\n       cx=\"-290.16394\"\n       cy=\"-654.83032\"\n       fx=\"-290.16394\"\n       fy=\"-654.83032\"\n       r=\"4.6559095\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24549\"\n       id=\"radialGradient5801\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-2.7323378,3.7815376e-7,-2.6301646e-7,-2.3126096,901.4922,-2170.3816)\"\n       cx=\"241.00996\"\n       cy=\"-655.03149\"\n       fx=\"241.00996\"\n       fy=\"-655.03149\"\n       r=\"4.0617666\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24539\"\n       id=\"radialGradient5835\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-0.69969957,0.31804293,-0.27726489,-0.60998698,-259.33399,1138.6771)\"\n       cx=\"-265.55276\"\n       cy=\"655.29767\"\n       fx=\"-265.55276\"\n       fy=\"655.29767\"\n       r=\"18.04899\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient23519\"\n       id=\"radialGradient5891\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-1.042022,-1.0083526,0.95442073,-1.0005399,40.179297,-1601.671)\"\n       cx=\"-290.16394\"\n       cy=\"-654.83032\"\n       fx=\"-290.16394\"\n       fy=\"-654.83032\"\n       r=\"4.6559095\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24549\"\n       id=\"radialGradient5899\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-2.7323378,3.7815376e-7,-2.6301646e-7,-2.3126096,901.4922,-2170.3816)\"\n       cx=\"241.00996\"\n       cy=\"-655.03149\"\n       fx=\"241.00996\"\n       fy=\"-655.03149\"\n       r=\"4.0617666\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24539\"\n       id=\"radialGradient5933\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-0.69969957,0.31804293,-0.27726489,-0.60998698,-259.33399,1138.6771)\"\n       cx=\"-265.55276\"\n       cy=\"655.29767\"\n       fx=\"-265.55276\"\n       fy=\"655.29767\"\n       r=\"18.04899\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient23519\"\n       id=\"radialGradient5989\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-1.042022,-1.0083526,0.95442073,-1.0005399,40.179297,-1601.671)\"\n       cx=\"-290.16394\"\n       cy=\"-654.83032\"\n       fx=\"-290.16394\"\n       fy=\"-654.83032\"\n       r=\"4.6559095\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24549\"\n       id=\"radialGradient5997\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-2.7323378,3.7815376e-7,-2.6301646e-7,-2.3126096,901.4922,-2170.3816)\"\n       cx=\"241.00996\"\n       cy=\"-655.03149\"\n       fx=\"241.00996\"\n       fy=\"-655.03149\"\n       r=\"4.0617666\" />\n    <radialGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24539\"\n       id=\"radialGradient6031\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-0.69969957,0.31804293,-0.27726489,-0.60998698,-259.33399,1138.6771)\"\n       cx=\"-265.55276\"\n       cy=\"655.29767\"\n       fx=\"-265.55276\"\n       fy=\"655.29767\"\n       r=\"18.04899\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient7162\"\n       id=\"linearGradient7160\"\n       x1=\"221.32861\"\n       y1=\"86.331848\"\n       x2=\"221.31621\"\n       y2=\"85.812134\"\n       gradientUnits=\"userSpaceOnUse\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       id=\"linearGradient7162\">\n      <stop\n         style=\"stop-color:#999999;stop-opacity:1\"\n         offset=\"0\"\n         id=\"stop7164\" />\n      <stop\n         style=\"stop-color:#666666;stop-opacity:1\"\n         offset=\"1\"\n         id=\"stop7166\" />\n    </linearGradient>\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient22703\"\n       id=\"linearGradient14874\"\n       gradientUnits=\"userSpaceOnUse\"\n       x1=\"489.07578\"\n       y1=\"252.94917\"\n       x2=\"489.07578\"\n       y2=\"254.40347\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       id=\"linearGradient22703\">\n      <stop\n         style=\"stop-color:#cccccc;stop-opacity:1;\"\n         offset=\"0\"\n         id=\"stop22705\" />\n      <stop\n         style=\"stop-color:#cccccc;stop-opacity:0;\"\n         offset=\"1\"\n         id=\"stop22707\" />\n    </linearGradient>\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient7154\"\n       id=\"linearGradient7152\"\n       x1=\"98.347786\"\n       y1=\"-231.04932\"\n       x2=\"98.347786\"\n       y2=\"-231.61627\"\n       gradientUnits=\"userSpaceOnUse\" />\n    <linearGradient\n       id=\"linearGradient7154\"\n       inkscape:collect=\"always\">\n      <stop\n         id=\"stop7156\"\n         offset=\"0\"\n         style=\"stop-color:#cccccc;stop-opacity:1\" />\n      <stop\n         id=\"stop7158\"\n         offset=\"1\"\n         style=\"stop-color:#999999;stop-opacity:1\" />\n    </linearGradient>\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient22993\"\n       id=\"linearGradient14872\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(0.35277776,0,0,0.35277776,-4.0314059,40.36157)\"\n       x1=\"259.50125\"\n       y1=\"497.6174\"\n       x2=\"312.20377\"\n       y2=\"537.39496\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient23003\"\n       id=\"linearGradient13378\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(0.35277776,0,0,0.35277776,-4.0314059,40.36157)\"\n       x1=\"243.45654\"\n       y1=\"521.90735\"\n       x2=\"314.98929\"\n       y2=\"490.82068\" />\n    <filter\n       inkscape:collect=\"always\"\n       style=\"color-interpolation-filters:sRGB\"\n       id=\"filter23159\"\n       x=\"-0.082563439\"\n       width=\"1.1651269\"\n       y=\"-0.082563439\"\n       height=\"1.1651269\">\n      <feGaussianBlur\n         inkscape:collect=\"always\"\n         stdDeviation=\"1.0410454\"\n         id=\"feGaussianBlur23161\" />\n    </filter>\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient23003\"\n       id=\"linearGradient14882\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"rotate(-165,285.96091,510.34836)\"\n       x1=\"267.24683\"\n       y1=\"527.85547\"\n       x2=\"287.50952\"\n       y2=\"509.34302\" />\n    <filter\n       inkscape:collect=\"always\"\n       style=\"color-interpolation-filters:sRGB\"\n       id=\"filter23261\"\n       x=\"-0.019173586\"\n       width=\"1.038338\"\n       y=\"-0.019161761\"\n       height=\"1.0383107\">\n      <feGaussianBlur\n         inkscape:collect=\"always\"\n         stdDeviation=\"0.22398929\"\n         id=\"feGaussianBlur23263\" />\n    </filter>\n    <linearGradient\n       gradientTransform=\"matrix(0.35277776,0,0,0.35277776,-4.0314059,40.36157)\"\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient23003\"\n       id=\"linearGradient23165\"\n       x1=\"267.24683\"\n       y1=\"527.85547\"\n       x2=\"287.50952\"\n       y2=\"509.34302\"\n       gradientUnits=\"userSpaceOnUse\" />\n    <filter\n       inkscape:collect=\"always\"\n       style=\"color-interpolation-filters:sRGB\"\n       id=\"filter9372\"\n       x=\"-0.020713228\"\n       width=\"1.0414265\"\n       y=\"-0.020713228\"\n       height=\"1.0414265\">\n      <feGaussianBlur\n         inkscape:collect=\"always\"\n         stdDeviation=\"0.057384014\"\n         id=\"feGaussianBlur9374\" />\n    </filter>\n    <linearGradient\n       y2=\"537.39496\"\n       x2=\"312.20377\"\n       y1=\"497.6174\"\n       x1=\"259.50125\"\n       gradientTransform=\"matrix(0.85376672,0,0,0.29901966,18.152391,502.57131)\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"linearGradient9616\"\n       xlink:href=\"#linearGradient22993\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       y2=\"490.82068\"\n       x2=\"314.98929\"\n       y1=\"521.90735\"\n       x1=\"243.45654\"\n       gradientTransform=\"matrix(0.51497039,0,0,0.34391533,114.90035,479.65889)\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"linearGradient9618\"\n       xlink:href=\"#linearGradient23003\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       y2=\"517.77496\"\n       x2=\"264.10657\"\n       y1=\"517.77496\"\n       x1=\"314.45364\"\n       gradientTransform=\"matrix(0.18138711,0,0,0.29901966,190.40217,502.57131)\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"linearGradient9620\"\n       xlink:href=\"#linearGradient22993\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       y2=\"517.77496\"\n       x2=\"264.10657\"\n       y1=\"517.77496\"\n       x1=\"314.45364\"\n       gradientTransform=\"matrix(0.20066212,0,0,0.29901966,184.31623,502.57131)\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"linearGradient9622\"\n       xlink:href=\"#linearGradient22993\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       y2=\"517.77496\"\n       x2=\"264.10657\"\n       y1=\"517.77496\"\n       x1=\"314.45364\"\n       gradientTransform=\"matrix(0.20226838,0,0,0.29901966,-341.44939,-807.77959)\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"linearGradient9624\"\n       xlink:href=\"#linearGradient22993\"\n       inkscape:collect=\"always\" />\n    <radialGradient\n       r=\"4.6559095\"\n       fy=\"-654.83032\"\n       fx=\"-290.16394\"\n       cy=\"-654.83032\"\n       cx=\"-290.16394\"\n       gradientTransform=\"matrix(-1.042022,-1.0083526,0.95442073,-1.0005399,40.179297,-1601.671)\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"radialGradient9626\"\n       xlink:href=\"#linearGradient23519\"\n       inkscape:collect=\"always\" />\n    <radialGradient\n       r=\"4.0617666\"\n       fy=\"-655.03149\"\n       fx=\"241.00996\"\n       cy=\"-655.03149\"\n       cx=\"241.00996\"\n       gradientTransform=\"matrix(-2.7323378,3.7815376e-7,-2.6301646e-7,-2.3126096,901.4922,-2170.3816)\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"radialGradient9628\"\n       xlink:href=\"#linearGradient24549\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       y2=\"643.5799\"\n       x2=\"271.26025\"\n       y1=\"670.54395\"\n       x1=\"242.73628\"\n       gradientTransform=\"matrix(0.98522318,0,0,0.98345389,-521.45711,10.716848)\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"linearGradient9630\"\n       xlink:href=\"#linearGradient24179\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       y2=\"-655.11206\"\n       x2=\"-247.30458\"\n       y1=\"-655.11206\"\n       x1=\"-241.78746\"\n       gradientTransform=\"matrix(0.97609682,0,0,1,482.33434,1310.2952)\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"linearGradient9632\"\n       xlink:href=\"#linearGradient24275\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       y2=\"-655.11206\"\n       x2=\"-247.30458\"\n       y1=\"-655.11206\"\n       x1=\"-241.78746\"\n       gradientTransform=\"matrix(0.97609682,0,0,1,-43.089089,1.995697e-6)\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"linearGradient9634\"\n       xlink:href=\"#linearGradient24275\"\n       inkscape:collect=\"always\" />\n    <radialGradient\n       r=\"18.04899\"\n       fy=\"655.29767\"\n       fx=\"-265.55276\"\n       cy=\"655.29767\"\n       cx=\"-265.55276\"\n       gradientTransform=\"matrix(-0.69969957,0.31804293,-0.27726489,-0.60998698,-259.33399,1138.6771)\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"radialGradient9636\"\n       xlink:href=\"#linearGradient24539\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       y2=\"254.40347\"\n       x2=\"489.07578\"\n       y1=\"252.94917\"\n       x1=\"489.07578\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"linearGradient10678\"\n       xlink:href=\"#linearGradient22703\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       y2=\"254.40347\"\n       x2=\"489.07578\"\n       y1=\"252.94917\"\n       x1=\"489.07578\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"linearGradient10680\"\n       xlink:href=\"#linearGradient22703\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       y2=\"254.40347\"\n       x2=\"489.07578\"\n       y1=\"252.94917\"\n       x1=\"489.07578\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"linearGradient10682\"\n       xlink:href=\"#linearGradient22703\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       y2=\"537.39496\"\n       x2=\"312.20377\"\n       y1=\"497.6174\"\n       x1=\"259.50125\"\n       gradientTransform=\"matrix(0.35277776,0,0,0.35277776,-4.0314059,40.36157)\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"linearGradient10684\"\n       xlink:href=\"#linearGradient22993\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       y2=\"132.42793\"\n       x2=\"-211.76324\"\n       y1=\"128.35896\"\n       x1=\"-215.44655\"\n       gradientTransform=\"rotate(90,55.070936,173.87579)\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"linearGradient10688\"\n       xlink:href=\"#linearGradient10710\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       gradientTransform=\"rotate(90,66.526448,186.74179)\"\n       y2=\"223.30081\"\n       x2=\"150.93372\"\n       y1=\"223.3912\"\n       x1=\"171.6794\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"linearGradient10690\"\n       xlink:href=\"#linearGradient10704\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       y2=\"132.42793\"\n       x2=\"-211.76324\"\n       y1=\"128.35896\"\n       x1=\"-215.44655\"\n       gradientTransform=\"rotate(90,55.070936,173.87579)\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"linearGradient10692\"\n       xlink:href=\"#linearGradient10710\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       gradientTransform=\"rotate(90,66.526448,186.74179)\"\n       y2=\"223.30081\"\n       x2=\"150.93372\"\n       y1=\"223.3912\"\n       x1=\"171.6794\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"linearGradient10694\"\n       xlink:href=\"#linearGradient10704\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       y2=\"132.42793\"\n       x2=\"-211.76324\"\n       y1=\"128.35896\"\n       x1=\"-215.44655\"\n       gradientTransform=\"rotate(90,55.070936,173.87579)\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"linearGradient10696\"\n       xlink:href=\"#linearGradient10710\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       y2=\"132.42793\"\n       x2=\"-211.76324\"\n       y1=\"128.35896\"\n       x1=\"-215.44655\"\n       gradientTransform=\"rotate(90,55.070936,173.87579)\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"linearGradient10698\"\n       xlink:href=\"#linearGradient10710\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       y2=\"382.10031\"\n       x2=\"43.168636\"\n       y1=\"372.25626\"\n       x1=\"38.412743\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"linearGradient10700\"\n       xlink:href=\"#linearGradient24437\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       y2=\"382.10031\"\n       x2=\"43.168636\"\n       y1=\"372.25626\"\n       x1=\"38.412743\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"linearGradient10702\"\n       xlink:href=\"#linearGradient24437\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       y2=\"377.36786\"\n       x2=\"142.97569\"\n       y1=\"370.2446\"\n       x1=\"137.76236\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"linearGradient10705\"\n       xlink:href=\"#linearGradient24361\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       y2=\"377.36786\"\n       x2=\"142.97569\"\n       y1=\"370.2446\"\n       x1=\"137.76236\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"linearGradient10707\"\n       xlink:href=\"#linearGradient24361\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       y2=\"377.98868\"\n       x2=\"252.1458\"\n       y1=\"371.15778\"\n       x1=\"251.10089\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"linearGradient10709\"\n       xlink:href=\"#linearGradient24361\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       y2=\"377.98868\"\n       x2=\"252.1458\"\n       y1=\"371.15778\"\n       x1=\"251.10089\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"linearGradient10711\"\n       xlink:href=\"#linearGradient24361\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       y2=\"382.00784\"\n       x2=\"361.01593\"\n       y1=\"366.14532\"\n       x1=\"356.77228\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"linearGradient10713\"\n       xlink:href=\"#linearGradient24361\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       y2=\"382.00784\"\n       x2=\"361.01593\"\n       y1=\"366.14532\"\n       x1=\"356.77228\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"linearGradient10715\"\n       xlink:href=\"#linearGradient24361\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       y2=\"383.37164\"\n       x2=\"446.69507\"\n       y1=\"369.01877\"\n       x1=\"439.36942\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"linearGradient10717\"\n       xlink:href=\"#linearGradient24437\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       y2=\"383.37164\"\n       x2=\"446.69507\"\n       y1=\"369.01877\"\n       x1=\"439.36942\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"linearGradient10719\"\n       xlink:href=\"#linearGradient24437\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       y2=\"381.72372\"\n       x2=\"466.07184\"\n       y1=\"368.43402\"\n       x1=\"464.57236\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"linearGradient10721\"\n       xlink:href=\"#linearGradient24437\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       y2=\"381.72372\"\n       x2=\"466.07184\"\n       y1=\"368.43402\"\n       x1=\"464.57236\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"linearGradient10723\"\n       xlink:href=\"#linearGradient24437\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       y2=\"381.72372\"\n       x2=\"466.07184\"\n       y1=\"368.43402\"\n       x1=\"464.57236\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"linearGradient10725\"\n       xlink:href=\"#linearGradient24437\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       gradientUnits=\"userSpaceOnUse\"\n       y2=\"85.812134\"\n       x2=\"221.31621\"\n       y1=\"86.331848\"\n       x1=\"221.32861\"\n       id=\"linearGradient7160-8\"\n       xlink:href=\"#linearGradient7162\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient22703\"\n       id=\"linearGradient10678-4\"\n       gradientUnits=\"userSpaceOnUse\"\n       x1=\"489.07578\"\n       y1=\"252.94917\"\n       x2=\"489.07578\"\n       y2=\"254.40347\" />\n    <linearGradient\n       gradientUnits=\"userSpaceOnUse\"\n       y2=\"-231.61627\"\n       x2=\"98.347786\"\n       y1=\"-231.04932\"\n       x1=\"98.347786\"\n       id=\"linearGradient7152-0\"\n       xlink:href=\"#linearGradient7154\"\n       inkscape:collect=\"always\" />\n    <filter\n       height=\"1.1651269\"\n       y=\"-0.082563439\"\n       width=\"1.1651269\"\n       x=\"-0.082563439\"\n       id=\"filter23159-4\"\n       style=\"color-interpolation-filters:sRGB\"\n       inkscape:collect=\"always\">\n      <feGaussianBlur\n         id=\"feGaussianBlur23161-3\"\n         stdDeviation=\"1.0410454\"\n         inkscape:collect=\"always\" />\n    </filter>\n    <filter\n       height=\"1.0383107\"\n       y=\"-0.019161761\"\n       width=\"1.038338\"\n       x=\"-0.019173586\"\n       id=\"filter23261-7\"\n       style=\"color-interpolation-filters:sRGB\"\n       inkscape:collect=\"always\">\n      <feGaussianBlur\n         id=\"feGaussianBlur23263-1\"\n         stdDeviation=\"0.22398929\"\n         inkscape:collect=\"always\" />\n    </filter>\n    <filter\n       height=\"1.0414265\"\n       y=\"-0.020713228\"\n       width=\"1.0414265\"\n       x=\"-0.020713228\"\n       id=\"filter9372-2\"\n       style=\"color-interpolation-filters:sRGB\"\n       inkscape:collect=\"always\">\n      <feGaussianBlur\n         id=\"feGaussianBlur9374-2\"\n         stdDeviation=\"0.057384014\"\n         inkscape:collect=\"always\" />\n    </filter>\n    <linearGradient\n       y2=\"254.40347\"\n       x2=\"489.07578\"\n       y1=\"252.94917\"\n       x1=\"489.07578\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"linearGradient19420\"\n       xlink:href=\"#linearGradient22703\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       y2=\"254.40347\"\n       x2=\"489.07578\"\n       y1=\"252.94917\"\n       x1=\"489.07578\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"linearGradient19422\"\n       xlink:href=\"#linearGradient22703\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       y2=\"254.40347\"\n       x2=\"489.07578\"\n       y1=\"252.94917\"\n       x1=\"489.07578\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"linearGradient19424\"\n       xlink:href=\"#linearGradient22703\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       y2=\"537.39496\"\n       x2=\"312.20377\"\n       y1=\"497.6174\"\n       x1=\"259.50125\"\n       gradientTransform=\"matrix(0.35277776,0,0,0.35277776,-4.0314059,40.36157)\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"linearGradient19426\"\n       xlink:href=\"#linearGradient22993\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       y2=\"537.39496\"\n       x2=\"312.20377\"\n       y1=\"497.6174\"\n       x1=\"259.50125\"\n       gradientTransform=\"matrix(0.35277776,0,0,0.35277776,-4.0145335,40.36157)\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"linearGradient19428\"\n       xlink:href=\"#linearGradient22993\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       y2=\"490.82068\"\n       x2=\"314.98929\"\n       y1=\"521.90735\"\n       x1=\"243.45654\"\n       gradientTransform=\"matrix(0.35277776,0,0,0.35277776,-4.0145335,40.36157)\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"linearGradient19430\"\n       xlink:href=\"#linearGradient23003\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       y2=\"509.34302\"\n       x2=\"287.50952\"\n       y1=\"527.85547\"\n       x1=\"267.24683\"\n       gradientTransform=\"rotate(-165,285.96091,510.34836)\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"linearGradient19432\"\n       xlink:href=\"#linearGradient23003\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       y2=\"509.34302\"\n       x2=\"287.50952\"\n       y1=\"527.85547\"\n       x1=\"267.24683\"\n       gradientTransform=\"matrix(0.35277776,0,0,0.35277776,-4.0314059,40.36157)\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"linearGradient19434\"\n       xlink:href=\"#linearGradient23003\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient7162\"\n       id=\"linearGradient7160-8-6\"\n       x1=\"221.32861\"\n       y1=\"86.331848\"\n       x2=\"221.31621\"\n       y2=\"85.812134\"\n       gradientUnits=\"userSpaceOnUse\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient22703\"\n       id=\"linearGradient19420-1\"\n       gradientUnits=\"userSpaceOnUse\"\n       x1=\"489.07578\"\n       y1=\"252.94917\"\n       x2=\"489.07578\"\n       y2=\"254.40347\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient7154\"\n       id=\"linearGradient7152-0-8\"\n       x1=\"98.347786\"\n       y1=\"-231.04932\"\n       x2=\"98.347786\"\n       y2=\"-231.61627\"\n       gradientUnits=\"userSpaceOnUse\" />\n    <filter\n       inkscape:collect=\"always\"\n       style=\"color-interpolation-filters:sRGB\"\n       id=\"filter23159-0\"\n       x=\"-0.082563439\"\n       width=\"1.1651269\"\n       y=\"-0.082563439\"\n       height=\"1.1651269\">\n      <feGaussianBlur\n         inkscape:collect=\"always\"\n         stdDeviation=\"1.0410454\"\n         id=\"feGaussianBlur23161-6\" />\n    </filter>\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient23003\"\n       id=\"linearGradient14882-2\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"rotate(-165,285.96091,510.34836)\"\n       x1=\"267.24683\"\n       y1=\"527.85547\"\n       x2=\"287.50952\"\n       y2=\"509.34302\" />\n    <filter\n       inkscape:collect=\"always\"\n       style=\"color-interpolation-filters:sRGB\"\n       id=\"filter23261-6\"\n       x=\"-0.019173586\"\n       width=\"1.038338\"\n       y=\"-0.019161761\"\n       height=\"1.0383107\">\n      <feGaussianBlur\n         inkscape:collect=\"always\"\n         stdDeviation=\"0.22398929\"\n         id=\"feGaussianBlur23263-18\" />\n    </filter>\n    <filter\n       inkscape:collect=\"always\"\n       style=\"color-interpolation-filters:sRGB\"\n       id=\"filter9372-7\"\n       x=\"-0.020713228\"\n       width=\"1.0414265\"\n       y=\"-0.020713228\"\n       height=\"1.0414265\">\n      <feGaussianBlur\n         inkscape:collect=\"always\"\n         stdDeviation=\"0.057384014\"\n         id=\"feGaussianBlur9374-9\" />\n    </filter>\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient22703\"\n       id=\"linearGradient1691\"\n       gradientUnits=\"userSpaceOnUse\"\n       x1=\"489.07578\"\n       y1=\"252.94917\"\n       x2=\"489.07578\"\n       y2=\"254.40347\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient22703\"\n       id=\"linearGradient1693\"\n       gradientUnits=\"userSpaceOnUse\"\n       x1=\"489.07578\"\n       y1=\"252.94917\"\n       x2=\"489.07578\"\n       y2=\"254.40347\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient22703\"\n       id=\"linearGradient1695\"\n       gradientUnits=\"userSpaceOnUse\"\n       x1=\"489.07578\"\n       y1=\"252.94917\"\n       x2=\"489.07578\"\n       y2=\"254.40347\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient22993\"\n       id=\"linearGradient1697\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(0.35277776,0,0,0.35277776,-4.0314059,40.36157)\"\n       x1=\"259.50125\"\n       y1=\"497.6174\"\n       x2=\"312.20377\"\n       y2=\"537.39496\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient22993\"\n       id=\"linearGradient1699\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(0.35277776,0,0,0.35277776,-4.0314059,40.36157)\"\n       x1=\"259.50125\"\n       y1=\"497.6174\"\n       x2=\"312.20377\"\n       y2=\"537.39496\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient23003\"\n       id=\"linearGradient1701\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(0.35277776,0,0,0.35277776,-4.0314059,40.36157)\"\n       x1=\"243.45654\"\n       y1=\"521.90735\"\n       x2=\"314.98929\"\n       y2=\"490.82068\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient23003\"\n       id=\"linearGradient1703\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(0.35277776,0,0,0.35277776,-4.0314059,40.36157)\"\n       x1=\"267.24683\"\n       y1=\"527.85547\"\n       x2=\"287.50952\"\n       y2=\"509.34302\" />\n    <linearGradient\n       y2=\"537.39496\"\n       x2=\"312.20377\"\n       y1=\"497.6174\"\n       x1=\"259.50125\"\n       gradientTransform=\"matrix(0.85376672,0,0,0.29901966,18.152391,502.57131)\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"linearGradient9616-9\"\n       xlink:href=\"#linearGradient22993\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       y2=\"490.82068\"\n       x2=\"314.98929\"\n       y1=\"521.90735\"\n       x1=\"243.45654\"\n       gradientTransform=\"matrix(0.51497039,0,0,0.34391533,114.90035,479.65889)\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"linearGradient9618-8\"\n       xlink:href=\"#linearGradient23003\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       y2=\"517.77496\"\n       x2=\"264.10657\"\n       y1=\"517.77496\"\n       x1=\"314.45364\"\n       gradientTransform=\"matrix(0.18138711,0,0,0.29901966,190.40217,502.57131)\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"linearGradient9620-0\"\n       xlink:href=\"#linearGradient22993\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       y2=\"517.77496\"\n       x2=\"264.10657\"\n       y1=\"517.77496\"\n       x1=\"314.45364\"\n       gradientTransform=\"matrix(0.20066212,0,0,0.29901966,184.31623,502.57131)\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"linearGradient9622-3\"\n       xlink:href=\"#linearGradient22993\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       y2=\"517.77496\"\n       x2=\"264.10657\"\n       y1=\"517.77496\"\n       x1=\"314.45364\"\n       gradientTransform=\"matrix(0.20226838,0,0,0.29901966,-341.44939,-807.77959)\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"linearGradient9624-6\"\n       xlink:href=\"#linearGradient22993\"\n       inkscape:collect=\"always\" />\n    <radialGradient\n       r=\"4.6559095\"\n       fy=\"-654.83032\"\n       fx=\"-290.16394\"\n       cy=\"-654.83032\"\n       cx=\"-290.16394\"\n       gradientTransform=\"matrix(-1.042022,-1.0083526,0.95442073,-1.0005399,40.179297,-1601.671)\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"radialGradient9626-1\"\n       xlink:href=\"#linearGradient23519\"\n       inkscape:collect=\"always\" />\n    <radialGradient\n       r=\"4.0617666\"\n       fy=\"-655.03149\"\n       fx=\"241.00996\"\n       cy=\"-655.03149\"\n       cx=\"241.00996\"\n       gradientTransform=\"matrix(-2.7323378,3.7815376e-7,-2.6301646e-7,-2.3126096,901.4922,-2170.3816)\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"radialGradient9628-3\"\n       xlink:href=\"#linearGradient24549\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       y2=\"643.5799\"\n       x2=\"271.26025\"\n       y1=\"670.54395\"\n       x1=\"242.73628\"\n       gradientTransform=\"matrix(0.98522318,0,0,0.98345389,-521.45711,10.716848)\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"linearGradient9630-1\"\n       xlink:href=\"#linearGradient24179\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       y2=\"-655.11206\"\n       x2=\"-247.30458\"\n       y1=\"-655.11206\"\n       x1=\"-241.78746\"\n       gradientTransform=\"matrix(0.97609682,0,0,1,482.33434,1310.2952)\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"linearGradient9632-4\"\n       xlink:href=\"#linearGradient24275\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       y2=\"-655.11206\"\n       x2=\"-247.30458\"\n       y1=\"-655.11206\"\n       x1=\"-241.78746\"\n       gradientTransform=\"matrix(0.97609682,0,0,1,-43.089089,1.995697e-6)\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"linearGradient9634-5\"\n       xlink:href=\"#linearGradient24275\"\n       inkscape:collect=\"always\" />\n    <radialGradient\n       r=\"18.04899\"\n       fy=\"655.29767\"\n       fx=\"-265.55276\"\n       cy=\"655.29767\"\n       cx=\"-265.55276\"\n       gradientTransform=\"matrix(-0.69969957,0.31804293,-0.27726489,-0.60998698,-259.33399,1138.6771)\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"radialGradient9636-6\"\n       xlink:href=\"#linearGradient24539\"\n       inkscape:collect=\"always\" />\n    <radialGradient\n       r=\"4.6559095\"\n       fy=\"-654.83032\"\n       fx=\"-290.16394\"\n       cy=\"-654.83032\"\n       cx=\"-290.16394\"\n       gradientTransform=\"matrix(-1.042022,-1.0083526,0.95442073,-1.0005399,40.179297,-1601.671)\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"radialGradient9626-9\"\n       xlink:href=\"#linearGradient23519\"\n       inkscape:collect=\"always\" />\n    <radialGradient\n       r=\"4.0617666\"\n       fy=\"-655.03149\"\n       fx=\"241.00996\"\n       cy=\"-655.03149\"\n       cx=\"241.00996\"\n       gradientTransform=\"matrix(-2.7323378,3.7815376e-7,-2.6301646e-7,-2.3126096,901.4922,-2170.3816)\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"radialGradient9628-6\"\n       xlink:href=\"#linearGradient24549\"\n       inkscape:collect=\"always\" />\n    <radialGradient\n       r=\"18.04899\"\n       fy=\"655.29767\"\n       fx=\"-265.55276\"\n       cy=\"655.29767\"\n       cx=\"-265.55276\"\n       gradientTransform=\"matrix(-0.69969957,0.31804293,-0.27726489,-0.60998698,-259.33399,1138.6771)\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"radialGradient9636-7\"\n       xlink:href=\"#linearGradient24539\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient22993\"\n       id=\"linearGradient10689\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(0.85376672,0,0,0.29901966,18.152391,502.57131)\"\n       x1=\"259.50125\"\n       y1=\"497.6174\"\n       x2=\"312.20377\"\n       y2=\"537.39496\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient23003\"\n       id=\"linearGradient10691\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(0.51497039,0,0,0.34391533,114.90035,479.65889)\"\n       x1=\"243.45654\"\n       y1=\"521.90735\"\n       x2=\"314.98929\"\n       y2=\"490.82068\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient22993\"\n       id=\"linearGradient10693\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(0.18138711,0,0,0.29901966,190.40217,502.57131)\"\n       x1=\"314.45364\"\n       y1=\"517.77496\"\n       x2=\"264.10657\"\n       y2=\"517.77496\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient22993\"\n       id=\"linearGradient10695\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(0.20066212,0,0,0.29901966,184.31623,502.57131)\"\n       x1=\"314.45364\"\n       y1=\"517.77496\"\n       x2=\"264.10657\"\n       y2=\"517.77496\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient22993\"\n       id=\"linearGradient10697\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(0.20226838,0,0,0.29901966,-341.44939,-807.77959)\"\n       x1=\"314.45364\"\n       y1=\"517.77496\"\n       x2=\"264.10657\"\n       y2=\"517.77496\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24179\"\n       id=\"linearGradient10699\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(0.98522318,0,0,0.98345389,-521.45711,10.716848)\"\n       x1=\"242.73628\"\n       y1=\"670.54395\"\n       x2=\"271.26025\"\n       y2=\"643.5799\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24275\"\n       id=\"linearGradient10701\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(0.97609682,0,0,1,482.33434,1310.2952)\"\n       x1=\"-241.78746\"\n       y1=\"-655.11206\"\n       x2=\"-247.30458\"\n       y2=\"-655.11206\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24275\"\n       id=\"linearGradient10703\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(0.97609682,0,0,1,-43.089089,1.995697e-6)\"\n       x1=\"-241.78746\"\n       y1=\"-655.11206\"\n       x2=\"-247.30458\"\n       y2=\"-655.11206\" />\n    <radialGradient\n       r=\"4.6559095\"\n       fy=\"-654.83032\"\n       fx=\"-290.16394\"\n       cy=\"-654.83032\"\n       cx=\"-290.16394\"\n       gradientTransform=\"matrix(-1.042022,-1.0083526,0.95442073,-1.0005399,40.179297,-1601.671)\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"radialGradient9626-8\"\n       xlink:href=\"#linearGradient23519\"\n       inkscape:collect=\"always\" />\n    <radialGradient\n       r=\"4.0617666\"\n       fy=\"-655.03149\"\n       fx=\"241.00996\"\n       cy=\"-655.03149\"\n       cx=\"241.00996\"\n       gradientTransform=\"matrix(-2.7323378,3.7815376e-7,-2.6301646e-7,-2.3126096,901.4922,-2170.3816)\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"radialGradient9628-1\"\n       xlink:href=\"#linearGradient24549\"\n       inkscape:collect=\"always\" />\n    <radialGradient\n       r=\"18.04899\"\n       fy=\"655.29767\"\n       fx=\"-265.55276\"\n       cy=\"655.29767\"\n       cx=\"-265.55276\"\n       gradientTransform=\"matrix(-0.69969957,0.31804293,-0.27726489,-0.60998698,-259.33399,1138.6771)\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"radialGradient9636-4\"\n       xlink:href=\"#linearGradient24539\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient22993\"\n       id=\"linearGradient15943\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(0.85376672,0,0,0.29901966,18.152391,502.57131)\"\n       x1=\"259.50125\"\n       y1=\"497.6174\"\n       x2=\"312.20377\"\n       y2=\"537.39496\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient23003\"\n       id=\"linearGradient15945\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(0.51497039,0,0,0.34391533,114.90035,479.65889)\"\n       x1=\"243.45654\"\n       y1=\"521.90735\"\n       x2=\"314.98929\"\n       y2=\"490.82068\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient22993\"\n       id=\"linearGradient15947\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(0.18138711,0,0,0.29901966,190.40217,502.57131)\"\n       x1=\"314.45364\"\n       y1=\"517.77496\"\n       x2=\"264.10657\"\n       y2=\"517.77496\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient22993\"\n       id=\"linearGradient15949\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(0.20066212,0,0,0.29901966,184.31623,502.57131)\"\n       x1=\"314.45364\"\n       y1=\"517.77496\"\n       x2=\"264.10657\"\n       y2=\"517.77496\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient22993\"\n       id=\"linearGradient15951\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(0.20226838,0,0,0.29901966,-341.44939,-807.77959)\"\n       x1=\"314.45364\"\n       y1=\"517.77496\"\n       x2=\"264.10657\"\n       y2=\"517.77496\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24179\"\n       id=\"linearGradient15953\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(0.98522318,0,0,0.98345389,-521.45711,10.716848)\"\n       x1=\"242.73628\"\n       y1=\"670.54395\"\n       x2=\"271.26025\"\n       y2=\"643.5799\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24275\"\n       id=\"linearGradient15955\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(0.97609682,0,0,1,482.33434,1310.2952)\"\n       x1=\"-241.78746\"\n       y1=\"-655.11206\"\n       x2=\"-247.30458\"\n       y2=\"-655.11206\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24275\"\n       id=\"linearGradient15957\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(0.97609682,0,0,1,-43.089089,1.995697e-6)\"\n       x1=\"-241.78746\"\n       y1=\"-655.11206\"\n       x2=\"-247.30458\"\n       y2=\"-655.11206\" />\n    <radialGradient\n       r=\"4.6559095\"\n       fy=\"-654.83032\"\n       fx=\"-290.16394\"\n       cy=\"-654.83032\"\n       cx=\"-290.16394\"\n       gradientTransform=\"matrix(-1.042022,-1.0083526,0.95442073,-1.0005399,40.179297,-1601.671)\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"radialGradient9626-18\"\n       xlink:href=\"#linearGradient23519\"\n       inkscape:collect=\"always\" />\n    <radialGradient\n       r=\"4.0617666\"\n       fy=\"-655.03149\"\n       fx=\"241.00996\"\n       cy=\"-655.03149\"\n       cx=\"241.00996\"\n       gradientTransform=\"matrix(-2.7323378,3.7815376e-7,-2.6301646e-7,-2.3126096,901.4922,-2170.3816)\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"radialGradient9628-4\"\n       xlink:href=\"#linearGradient24549\"\n       inkscape:collect=\"always\" />\n    <radialGradient\n       r=\"18.04899\"\n       fy=\"655.29767\"\n       fx=\"-265.55276\"\n       cy=\"655.29767\"\n       cx=\"-265.55276\"\n       gradientTransform=\"matrix(-0.69969957,0.31804293,-0.27726489,-0.60998698,-259.33399,1138.6771)\"\n       gradientUnits=\"userSpaceOnUse\"\n       id=\"radialGradient9636-77\"\n       xlink:href=\"#linearGradient24539\"\n       inkscape:collect=\"always\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient22993\"\n       id=\"linearGradient16121\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(0.85376672,0,0,0.29901966,18.152391,502.57131)\"\n       x1=\"259.50125\"\n       y1=\"497.6174\"\n       x2=\"312.20377\"\n       y2=\"537.39496\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient23003\"\n       id=\"linearGradient16123\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(0.51497039,0,0,0.34391533,114.90035,479.65889)\"\n       x1=\"243.45654\"\n       y1=\"521.90735\"\n       x2=\"314.98929\"\n       y2=\"490.82068\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient22993\"\n       id=\"linearGradient16125\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(0.18138711,0,0,0.29901966,190.40217,502.57131)\"\n       x1=\"314.45364\"\n       y1=\"517.77496\"\n       x2=\"264.10657\"\n       y2=\"517.77496\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient22993\"\n       id=\"linearGradient16127\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(0.20066212,0,0,0.29901966,184.31623,502.57131)\"\n       x1=\"314.45364\"\n       y1=\"517.77496\"\n       x2=\"264.10657\"\n       y2=\"517.77496\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient22993\"\n       id=\"linearGradient16129\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(0.20226838,0,0,0.29901966,-341.44939,-807.77959)\"\n       x1=\"314.45364\"\n       y1=\"517.77496\"\n       x2=\"264.10657\"\n       y2=\"517.77496\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24179\"\n       id=\"linearGradient16131\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(0.98522318,0,0,0.98345389,-521.45711,10.716848)\"\n       x1=\"242.73628\"\n       y1=\"670.54395\"\n       x2=\"271.26025\"\n       y2=\"643.5799\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24275\"\n       id=\"linearGradient16133\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(0.97609682,0,0,1,482.33434,1310.2952)\"\n       x1=\"-241.78746\"\n       y1=\"-655.11206\"\n       x2=\"-247.30458\"\n       y2=\"-655.11206\" />\n    <linearGradient\n       inkscape:collect=\"always\"\n       xlink:href=\"#linearGradient24275\"\n       id=\"linearGradient16135\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(0.97609682,0,0,1,-43.089089,1.995697e-6)\"\n       x1=\"-241.78746\"\n       y1=\"-655.11206\"\n       x2=\"-247.30458\"\n       y2=\"-655.11206\" />\n  </defs>\n  <sodipodi:namedview\n     fit-margin-bottom=\"5\"\n     fit-margin-right=\"5\"\n     fit-margin-left=\"5\"\n     fit-margin-top=\"5\"\n     showguides=\"false\"\n     inkscape:window-maximized=\"1\"\n     inkscape:window-y=\"32\"\n     inkscape:window-x=\"58\"\n     inkscape:window-height=\"1011\"\n     inkscape:window-width=\"1862\"\n     showgrid=\"false\"\n     inkscape:document-rotation=\"0\"\n     inkscape:current-layer=\"layer1\"\n     inkscape:document-units=\"mm\"\n     inkscape:cy=\"637\"\n     inkscape:cx=\"819\"\n     inkscape:zoom=\"0.5\"\n     inkscape:pageshadow=\"2\"\n     inkscape:pageopacity=\"0.0\"\n     borderopacity=\"1.0\"\n     bordercolor=\"#666666\"\n     pagecolor=\"#ffffff\"\n     id=\"base\"\n     inkscape:showpageshadow=\"2\"\n     inkscape:pagecheckerboard=\"0\"\n     inkscape:deskcolor=\"#d1d1d1\" />\n  <metadata\n     id=\"metadata7004\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     transform=\"translate(1.6248036,24.153622)\"\n     id=\"layer1\"\n     inkscape:groupmode=\"layer\"\n     inkscape:label=\"Calque 1\">\n    <g\n       transform=\"matrix(0.97011885,-0.24263021,0.43678787,1.7464278,-77.586056,-215.16412)\"\n       id=\"g10770\">\n      <g\n         transform=\"matrix(0.26458333,0,0,0.26458333,-1527.8789,182.85328)\"\n         id=\"g749\"\n         style=\"display:inline;enable-background:new\">\n        <g\n           id=\"layer1-7\"\n           inkscape:label=\"micro-USB\" />\n        <g\n           transform=\"matrix(0.45604278,0,0,0.45604278,3620.8634,-271.47561)\"\n           id=\"g9786\">\n          <path\n             inkscape:connector-curvature=\"0\"\n             id=\"path9359\"\n             d=\"m 5457.0966,169.08117 v -27.77492 l -5.6629,-4.58421 6.7415,-6.47182 6.7415,5.39319 0.2697,5.9325 h 11.5953 V 129.7109 l 5.1236,-5.12353 h 225.4352 l 4.1797,4.17972 v 12.2695 h 11.7302 v -4.04489 l 12.4043,-9.97739 5.9325,5.39319 -9.5729,9.5729 v 26.83111 z\"\n             style=\"fill:#999999;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\" />\n          <path\n             inkscape:connector-curvature=\"0\"\n             id=\"path9361\"\n             d=\"m 5493.3658,169.04938 v -27.50526 h -6.7415 v 27.50526 z\"\n             style=\"fill:#d5d3ce;fill-opacity:1;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:0\" />\n          <path\n             sodipodi:nodetypes=\"cccccc\"\n             inkscape:connector-curvature=\"0\"\n             id=\"path9363\"\n             d=\"m 5504.2196,124.59551 v 4.94355 5.41897 h 5.3932 v -10.40206 z\"\n             style=\"fill:#c2bfb8;fill-opacity:1;stroke:#000000;stroke-width:1.08323px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:0\" />\n          <path\n             style=\"fill:#c2bfb8;fill-opacity:1;stroke:#000000;stroke-width:1.07994px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:0\"\n             d=\"m 5599.106,124.55373 v 10.29965 h 5.3932 v -10.33895 z\"\n             id=\"path9391\"\n             inkscape:connector-curvature=\"0\"\n             sodipodi:nodetypes=\"ccccc\" />\n          <path\n             sodipodi:nodetypes=\"ccccc\"\n             style=\"fill:#d5d3ce;fill-opacity:1;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:0\"\n             d=\"m 5704.7631,168.84626 -0.022,-27.74833 h -6.7415 l 0.022,27.74833 z\"\n             id=\"path9393\"\n             inkscape:connector-curvature=\"0\" />\n          <path\n             sodipodi:nodetypes=\"cccccc\"\n             inkscape:connector-curvature=\"0\"\n             id=\"path9472\"\n             d=\"m 5704.7631,168.84626 -0.022,-27.74833 18.5093,-0.0613 6.1246,4.17973 v 23.59519 z\"\n             style=\"fill:#bdbdb7;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\" />\n          <path\n             inkscape:connector-curvature=\"0\"\n             id=\"path9367\"\n             d=\"m 5502.5342,138.39619 7.0786,-3.43816 h 75.9765 l 5.9381,3.42839 v 2.97603 h -89.128 z\"\n             style=\"fill:#333331;fill-opacity:1;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:0\" />\n          <path\n             style=\"fill:#333331;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:0\"\n             d=\"m 5597.6081,138.31683 7.0786,-3.43816 h 75.9765 l 5.9381,3.42839 v 2.97603 h -89.128 z\"\n             id=\"path9389\"\n             inkscape:connector-curvature=\"0\" />\n          <path\n             sodipodi:nodetypes=\"cccccccc\"\n             inkscape:connector-curvature=\"0\"\n             id=\"path9397\"\n             d=\"m 5579.6069,151.57727 v 14.13009 l 2.4501,2.57779 h 62.3442 l 2.5862,-2.721 v -14.08235 0 z\"\n             style=\"fill:#9a9a97;fill-opacity:0;stroke:#a1a19d;stroke-width:0.976316px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\" />\n          <path\n             sodipodi:nodetypes=\"ccccc\"\n             inkscape:connector-curvature=\"0\"\n             id=\"path9403\"\n             d=\"M 5493.3502,168.84626 V 141.341 l 204.6493,-0.24307 0.022,27.74833 z\"\n             style=\"fill:#8a8b87;fill-opacity:1;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:0\" />\n          <path\n             inkscape:connector-curvature=\"0\"\n             id=\"path9442\"\n             d=\"m 5723.2504,141.03659 v -4.04489 l 12.4043,-9.97739 5.9325,5.39319 -9.5729,9.5729 v 26.83111 h -2.6393 v -23.59519 z\"\n             style=\"fill:#8b8b88;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\" />\n          <path\n             inkscape:connector-curvature=\"0\"\n             id=\"path9446\"\n             d=\"m 5465.1864,141.57591 -0.2697,-5.9325 -6.7415,-5.39319 -6.7415,6.47182 5.6629,4.58421 v 27.77492 h 2.6534 V 143.75 Z\"\n             style=\"fill:#8b8b88;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\" />\n          <path\n             sodipodi:nodetypes=\"ccccc\"\n             inkscape:connector-curvature=\"0\"\n             id=\"path9448\"\n             d=\"m 5476.7817,129.7109 5.1236,-5.12353 22.3143,0.008 0.01,5.11072 z\"\n             style=\"fill:#a9a8a3;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\" />\n          <path\n             inkscape:connector-curvature=\"0\"\n             id=\"path9454\"\n             d=\"m 5509.6128,124.55597 v 10.40206 h 75.9765 v -10.42459 z\"\n             style=\"fill:#b0b0ab;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\" />\n          <path\n             inkscape:connector-curvature=\"0\"\n             id=\"path9456\"\n             d=\"M 5459.75,169.08117 V 143.75 l 5.4364,-2.17409 21.4379,-0.0318 v 27.50526 z\"\n             style=\"fill:#c1c1bb;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\" />\n          <path\n             sodipodi:nodetypes=\"ccccc\"\n             inkscape:connector-curvature=\"0\"\n             id=\"path9458\"\n             d=\"m 5604.4992,124.51443 v 10.33895 l 76.164,0.0253 v -10.3345 z\"\n             style=\"fill:#b0b0ab;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\" />\n          <path\n             inkscape:connector-curvature=\"0\"\n             id=\"path9460\"\n             d=\"m 5585.5893,134.95803 v -10.42459 l 13.5167,0.0203 v 10.29965 l 5.5807,0.0253 -7.0786,3.43816 -0.1348,2.96626 -5.9459,0.0794 v -2.97603 z\"\n             style=\"fill:#a3a39f;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\" />\n          <path\n             sodipodi:nodetypes=\"cccccccc\"\n             inkscape:connector-curvature=\"0\"\n             id=\"path9462\"\n             d=\"M 5476.7817,141.57591 V 129.7109 l 27.4479,-0.005 -0.01,5.25213 5.3932,2.7e-4 -7.0786,3.43816 -0.1348,2.96626 z\"\n             style=\"fill:#bebdb8;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\" />\n          <path\n             inkscape:connector-curvature=\"0\"\n             id=\"path9464\"\n             d=\"m 5686.6013,138.30706 v -13.72942 l -5.9381,-0.0335 v 10.3345 z\"\n             style=\"fill:#979794;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\" />\n          <path\n             sodipodi:nodetypes=\"ccccc\"\n             inkscape:connector-curvature=\"0\"\n             id=\"path9468\"\n             d=\"m 5686.6013,141.28309 v -2.97603 h 24.8769 l 0.042,2.72953 z\"\n             style=\"fill:#bcbab5;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\" />\n          <path\n             inkscape:connector-curvature=\"0\"\n             id=\"path9470\"\n             d=\"m 5686.6013,138.30706 v -13.72942 l 20.7392,0.01 4.1797,4.17972 -0.042,9.53997 z\"\n             style=\"fill:#abaaa6;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\" />\n          <path\n             style=\"fill:#949490;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"\n             d=\"m 5637.2361,154.49408 h 3.9775 v 14.23053 h -61.9603 v -14.14214 h 3.8891 v 10.34144 h 54.0937 z\"\n             id=\"path9508\"\n             inkscape:connector-curvature=\"0\"\n             sodipodi:nodetypes=\"ccccccccc\" />\n          <path\n             style=\"fill:#646461;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"\n             d=\"m 5579.2533,154.58247 4.1543,-3.18198 h 53.9169 l 3.8891,3.09359 z\"\n             id=\"path9510\"\n             inkscape:connector-curvature=\"0\" />\n          <path\n             style=\"fill:#8b8b88;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"\n             d=\"m 5583.1424,154.58247 54.0937,-0.0884 v 10.42982 h -54.0937 z\"\n             id=\"path9512\"\n             inkscape:connector-curvature=\"0\" />\n          <path\n             transform=\"matrix(1.0014187,0,0,0.97489213,-7.9559851,4.1582928)\"\n             sodipodi:nodetypes=\"cccccc\"\n             inkscape:connector-curvature=\"0\"\n             id=\"path9514\"\n             d=\"m 5621.4989,164.83923 c 0.01,-1.60418 0.2928,-3.30043 0,-4.80508 -1.611,-2.74993 -3.547,-3.63268 -5.6569,-3.51591 -7.6461,-0.7846 -9.0406,6.04618 -16.2634,6.09424 -4.6775,-0.13012 -5.2207,-1.88444 -5.4801,-3.75029 l 0.052,-4.45349 v -30.22881\"\n             style=\"fill:none;stroke:#61615e;stroke-width:0.814227px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;filter:url(#filter9604)\" />\n        </g>\n      </g>\n      <path\n         inkscape:connector-curvature=\"0\"\n         id=\"path783\"\n         d=\"m 88.921099,131.42692 32.692601,-0.0325 v 0\"\n         style=\"display:inline;fill:none;stroke:#000000;stroke-width:0.264583px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;enable-background:new\" />\n    </g>\n    <g\n       id=\"g7195\"\n       transform=\"rotate(90,150.56903,253.85104)\" />\n    <path\n       id=\"path21916\"\n       style=\"fill:#1a1a1a;fill-opacity:1;stroke-width:0.264583\"\n       d=\"m 107.45846,-20.090759 c -29.696083,7e-6 -58.175645,11.7965846 -79.173978,32.794896 C 16.066575,24.922044 6.9688341,40.2827 1.4949024,56.841494 c -0.132471,0.353348 -0.2573237,0.720307 -0.2573486,1.102775 0.3944986,1.673548 1.41732,2.471206 2.8752768,2.462901 v 0.0062 H 22.586121 c 0.257739,0 0.509064,0.02558 0.752409,0.07183 h -0.549836 c 2.038004,0 3.678328,1.640281 3.678328,3.678327 0,2.038046 -1.604637,3.766775 -3.642673,3.765661 l -2.203481,-0.0016 c -0.07411,-0.0044 -0.148511,-0.0072 -0.223761,-0.0072 H 7.2475229 l -1.7306438,-0.0011 c 9.16e-5,2.65e-4 -1.04e-4,5.29e-4 0,0.0011 H 2.629717 c -2.0380444,0 -3.6788452,1.640801 -3.6788452,3.678846 v 23.353612 c 0,2.038046 1.6408008,3.67833 3.6788452,3.67833 h 17.76739 c 0.02178,0 0.04344,-0.0011 0.06511,-0.0016 l 2.336289,0.0011 c 2.038049,7.94e-4 3.668512,1.716254 3.668512,3.754294 0,2.03805 -1.640324,3.67885 -3.678328,3.67885 h 0.340029 c -0.168764,0.0217 -0.339637,0.0367 -0.514696,0.0367 H 1.3197194 c -0.1574715,-0.003 -0.31692,-0.002 -0.45216894,-0.003 -1.37653631,-1.2e-4 -2.49247156,1.11582 -2.49235406,2.49235 0.6207561,5.9269 0.84198167,9.31357 1.92908102,14.01982 2.01757008,8.52854 4.44934678,16.59301 15.54582158,33.10961 0,0 3.561311,9.01165 2.971393,23.50295 -0.589915,14.49131 -5.331296,51.39559 -5.765021,64.39039 -0.867452,25.9896 -1.287943,32.25451 -1.183391,36.57814 0.209105,8.64725 5.736565,11.74036 12.483477,11.74036 H 190.80583 c 6.7469,0 12.3818,-5.28894 12.22871,-11.79412 0,0 0.63004,-24.43284 -0.82838,-37.61941 -1.287,-11.63673 -6.59006,-50.60571 -6.69571,-65.25286 -0.10565,-14.6471 4.98626,-21.90564 4.98626,-21.90564 5.36059,-8.7836 10.28514,-19.42477 13.86943,-30.44258 1.9886,-6.11278 3.22015,-10.51767 4.02612,-15.89774 h -5.3e-4 c 0.0319,-0.16013 0.048,-0.323 0.0481,-0.48628 -2.7e-4,-1.30683 -1.01008,-2.41059 -2.31356,-2.50424 v 0 h -23.03011 c -0.17507,0 -0.34594,-0.015 -0.5147,-0.0367 h 0.34313 c -2.03804,0 -3.67833,-1.64027 -3.67833,-3.67833 0,-2.03803 1.63047,-3.754029 3.66851,-3.754807 l 2.33629,-0.0011 c 0.0217,5.29e-4 0.0428,0.0021 0.0646,0.0021 h 17.7679 c 2.03805,0 3.67885,-1.640801 3.67885,-3.678844 V 71.527337 c 0,-2.038043 -1.6408,-3.678327 -3.67885,-3.678327 h -2.88716 c 8e-5,-2.65e-4 -9e-5,-7.94e-4 0,-0.0011 l -1.73064,0.0011 h -13.1501 c -0.0752,0 -0.14966,0.0028 -0.22376,0.0072 l -2.20297,0.0011 c -2.03804,0.0011 -3.64319,-1.727099 -3.64319,-3.765145 0,-2.038046 1.64081,-3.678846 3.67885,-3.678846 h -0.55294 c 0.24334,-0.04624 0.49467,-0.07183 0.75241,-0.07183 6.258,-0.03426 12.65195,0.04903 18.85983,-0.0047 1.37654,1.19e-4 2.50332,-1.054322 2.50321,-2.430859 -1.2e-4,-0.383855 -0.0889,-0.762495 -0.25942,-1.106392 C 208.60838,40.298113 198.97616,25.047276 186.63299,12.704112 165.63466,-8.2941994 137.15462,-20.090777 107.4585,-20.090784 Z m 92.5313,89.735607 h 3.8716 c 0.94655,0 1.70894,0.761878 1.70894,1.708422 v 0.09302 c 0,0.946544 -0.76239,1.708423 -1.70894,1.708423 h -3.8716 c -0.94654,0 -1.70842,-0.761879 -1.70842,-1.708423 v -0.09302 c 0,-0.946544 0.76188,-1.708422 1.70842,-1.708422 z m -188.138384,0.07183 h 3.872115 c 0.946538,0 1.708423,0.761881 1.708423,1.708422 v 0.09302 c 0,0.946542 -0.761885,1.708422 -1.708423,1.708422 h -3.872115 c -0.946548,0 -1.708423,-0.76188 -1.708423,-1.708422 V 71.4251 c 0,-0.946541 0.761875,-1.708422 1.708423,-1.708422 z m 179.365274,6.176367 c 0.005,-2.9e-5 0.0107,-2.9e-5 0.016,0 0.004,-1.6e-5 0.008,-1.6e-5 0.0119,0 0.79148,0.0065 1.42953,0.631854 1.42937,1.400948 -1.6e-4,0.773377 -0.64534,1.400286 -1.44126,1.400431 -0.79612,1.33e-4 -1.44162,-0.626856 -1.44177,-1.400431 -1.9e-4,-0.767737 0.63569,-1.392547 1.42575,-1.400948 z m -166.751574,0.07183 h 0.0031 c 0.0041,-1.9e-5 0.0083,-1.9e-5 0.01241,0 0.795917,1.45e-4 1.441101,0.627054 1.441254,1.400431 1.41e-4,0.773579 -0.645128,1.400802 -1.441254,1.400948 -0.796327,1.32e-4 -1.441913,-0.627171 -1.441773,-1.400948 1.09e-4,-0.767728 0.63621,-1.392306 1.426269,-1.400431 z m 166.720054,5.876126 c 0.005,-2.9e-5 0.0107,-2.9e-5 0.016,0 0.004,-1.6e-5 0.008,-1.6e-5 0.0119,0 0.79148,0.0065 1.42954,0.631854 1.42937,1.400947 -1.5e-4,0.773377 -0.64533,1.400286 -1.44125,1.400432 -0.79612,1.32e-4 -1.44162,-0.626856 -1.44177,-1.400432 -1.9e-4,-0.767736 0.63568,-1.392547 1.42575,-1.400947 z m -166.688532,0.07183 c 0.0013,-2e-6 0.0024,-2e-6 0.0036,0 0.004,-1.6e-5 0.0079,-1.6e-5 0.01188,0 0.79612,-1.32e-4 1.441619,0.626856 1.441772,1.400429 1.41e-4,0.773777 -0.645443,1.401083 -1.441772,1.400951 -0.79633,1.32e-4 -1.441913,-0.627174 -1.441773,-1.400951 1.08e-4,-0.767728 0.636209,-1.392303 1.426268,-1.400429 z m 166.756742,5.926252 c 0.005,-2.7e-5 0.01,-2.7e-5 0.015,0 0.004,-1.6e-5 0.008,-1.6e-5 0.0119,0 0.79127,0.0065 1.42925,0.631539 1.42937,1.400431 1.4e-4,0.773581 -0.64513,1.400805 -1.44126,1.400948 -0.79612,-1.46e-4 -1.44139,-0.62737 -1.44125,-1.400948 1.1e-4,-0.767728 0.63621,-1.392306 1.42627,-1.400431 z m -166.824438,0.07131 c 0.0013,-3e-6 0.0024,-3e-6 0.0036,0 0.004,-1.6e-5 0.0079,-1.6e-5 0.01188,0 0.79633,-1.33e-4 1.441913,0.627173 1.441773,1.40095 1.4e-4,0.773777 -0.645446,1.40108 -1.441773,1.400947 -0.796126,-1.42e-4 -1.441397,-0.627366 -1.441256,-1.400947 -1.88e-4,-0.767736 0.635687,-1.39255 1.425752,-1.40095 z m 175.450788,5.403289 h 3.8716 c 0.94654,0 1.70842,0.762397 1.70842,1.708938 v 0.0925 c 0,0.946544 -0.76188,1.708941 -1.70842,1.708941 h -3.8716 c -0.94655,0 -1.70842,-0.762397 -1.70842,-1.708941 v -0.0925 c 0,-0.946541 0.76187,-1.708938 1.70842,-1.708938 z m -187.918243,0.07183 h 3.872115 c 0.946548,0 1.708424,0.761881 1.708424,1.708425 v 0.09302 c 0,0.946541 -0.761876,1.708938 -1.708424,1.708938 h -3.872115 c -0.946548,0 -1.708423,-0.762397 -1.708423,-1.708938 v -0.09302 c 0,-0.946544 0.761875,-1.708425 1.708423,-1.708425 z\"\n       sodipodi:nodetypes=\"ssccccsccsccscccsssssccsccscccccssssscsscscccccsccsccssssscccsccsccccccsssssssssssssssssssscscsssscscssccsccssssscssccssscscsssscsscssssssssssssssssssssss\" />\n    <g\n       id=\"MIC1\"\n       style=\"isolation:isolate\"\n       transform=\"matrix(0.71300408,0,0,0.71300408,-53.299026,-33.015256)\">\n      <path\n         fill=\"#b2b2b2\"\n         id=\"path1243\"\n         d=\"m 301.70376,280.79916 v -3.48293 h 5.24449 v 3.48293 z m 0,-7.1251 v -3.48634 h 5.24449 v 3.48634 z m 10.13295,7.1251 v -3.48293 h 5.24335 v 3.48293 z m 0,-7.1251 v -3.48634 h 5.24335 v 3.48634 z\" />\n      <path\n         fill=\"#999999\"\n         id=\"path1245\"\n         d=\"m 302.33543,280.79916 v -10.60803 h 13.95901 v 10.60803 z\" />\n      <path\n         fill=\"#e5e5e5\"\n         id=\"path1247\"\n         d=\"m 303.07099,279.94151 v -8.89727 h 12.48789 v 8.89727 z\" />\n      <path\n         fill=\"#cccccc\"\n         id=\"path1249\"\n         d=\"m 303.57148,279.47856 v -7.97024 h 11.48918 v 7.97024 z\" />\n      <circle\n         stroke-miterlimit=\"4\"\n         stroke-linecap=\"butt\"\n         stroke-linejoin=\"miter\"\n         stroke=\"#aaaaaa\"\n         stroke-width=\"0.0364\"\n         fill=\"#3e2c28\"\n         id=\"ellipse1251\"\n         r=\"1.3088471\"\n         cy=\"275.46063\"\n         cx=\"311.93832\"\n         vector-effect=\"non-scaling-stroke\" />\n    </g>\n    <g\n       transform=\"matrix(0.02905553,0.12514233,0.11634189,-0.02701224,6.2360689,-12.453708)\"\n       id=\"use8788\"\n       style=\"display:inline;stroke-width:2.42865;enable-background:new\"\n       inkscape:tile-x0=\"202.09758\"\n       inkscape:tile-y0=\"377.30997\">\n      <rect\n         ry=\"3.6799715\"\n         transform=\"rotate(-90)\"\n         y=\"215.41093\"\n         x=\"-702.90289\"\n         height=\"94.58654\"\n         width=\"95.592773\"\n         id=\"rect9586\"\n         style=\"opacity:1;fill:none;fill-opacity:1\" />\n      <g\n         id=\"g9612\">\n        <rect\n           ry=\"0\"\n           rx=\"0\"\n           y=\"646.2702\"\n           x=\"236.86981\"\n           height=\"17.810518\"\n           width=\"50.852936\"\n           id=\"rect9588\"\n           style=\"opacity:1;fill:url(#linearGradient9616);fill-opacity:1;stroke:none;stroke-width:5.46447;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n        <rect\n           style=\"opacity:0.5;fill:#e6e6e6;fill-opacity:1;stroke:url(#linearGradient9618);stroke-width:0.910744;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n           id=\"rect9590\"\n           width=\"30.673195\"\n           height=\"20.48464\"\n           x=\"246.82515\"\n           y=\"644.93317\"\n           rx=\"0\"\n           ry=\"0\" />\n        <rect\n           style=\"opacity:1;fill:url(#linearGradient9620);fill-opacity:1;stroke:none;stroke-width:5.46447;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n           id=\"rect9592\"\n           width=\"10.803967\"\n           height=\"17.810518\"\n           x=\"236.86981\"\n           y=\"646.2702\"\n           rx=\"0\"\n           ry=\"0\" />\n        <rect\n           ry=\"0\"\n           rx=\"0\"\n           y=\"646.2702\"\n           x=\"235.72174\"\n           height=\"17.810518\"\n           width=\"11.952045\"\n           id=\"rect9594\"\n           style=\"opacity:1;fill:url(#linearGradient9622);fill-opacity:1;stroke:none;stroke-width:5.46447;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n        <rect\n           style=\"opacity:1;fill:url(#linearGradient9624);fill-opacity:1;stroke:none;stroke-width:5.46447;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n           id=\"rect9596\"\n           width=\"12.047719\"\n           height=\"17.810518\"\n           x=\"-289.63242\"\n           y=\"-664.08069\"\n           rx=\"0\"\n           ry=\"0\"\n           transform=\"scale(-1)\" />\n        <rect\n           ry=\"0\"\n           rx=\"0\"\n           y=\"643.39716\"\n           x=\"244.77632\"\n           height=\"23.668133\"\n           width=\"35.714989\"\n           id=\"rect9598\"\n           style=\"opacity:0.5;fill:#cccccc;fill-opacity:1;stroke:none;stroke-width:0.910744;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n        <rect\n           transform=\"scale(-1)\"\n           ry=\"0\"\n           rx=\"0\"\n           y=\"-661.56409\"\n           x=\"-288.38864\"\n           height=\"12.920165\"\n           width=\"7.9501214\"\n           id=\"rect9600\"\n           style=\"opacity:1;fill:url(#radialGradient9626);fill-opacity:1;stroke:none;stroke-width:5.46447;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n        <rect\n           style=\"opacity:0.7;fill:url(#radialGradient9628);fill-opacity:1;stroke:none;stroke-width:5.46447;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n           id=\"rect9602\"\n           width=\"8.1235332\"\n           height=\"15.916349\"\n           x=\"236.86981\"\n           y=\"-663.12421\"\n           rx=\"0\"\n           ry=\"0\"\n           transform=\"scale(1,-1)\" />\n        <rect\n           style=\"opacity:0.5;fill:#cccccc;fill-opacity:1;stroke:url(#linearGradient9630);stroke-width:0.910744;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n           id=\"rect9604\"\n           width=\"35.187237\"\n           height=\"23.276518\"\n           x=\"-280.29782\"\n           y=\"643.46826\"\n           rx=\"0\"\n           ry=\"0\"\n           transform=\"scale(-1,1)\" />\n        <rect\n           ry=\"0\"\n           rx=\"0\"\n           y=\"646.21448\"\n           x=\"240.59035\"\n           height=\"17.86623\"\n           width=\"4.4552469\"\n           id=\"rect9606\"\n           style=\"opacity:1;fill:url(#linearGradient9632);fill-opacity:1;stroke:none;stroke-width:5.46447;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n        <rect\n           style=\"opacity:1;fill:url(#linearGradient9634);fill-opacity:1;stroke:none;stroke-width:5.46447;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n           id=\"rect9608\"\n           width=\"4.4552469\"\n           height=\"17.86623\"\n           x=\"-284.83307\"\n           y=\"-664.08075\"\n           rx=\"0\"\n           ry=\"0\"\n           transform=\"scale(-1)\" />\n        <rect\n           transform=\"scale(-1,1)\"\n           ry=\"0\"\n           rx=\"0\"\n           y=\"643.46826\"\n           x=\"-280.29782\"\n           height=\"23.276518\"\n           width=\"35.187237\"\n           id=\"rect9610\"\n           style=\"opacity:0.5;fill:url(#radialGradient9636);fill-opacity:1;stroke:url(#linearGradient14901);stroke-width:0.910744;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n      </g>\n    </g>\n    <g\n       id=\"g16182\"\n       transform=\"rotate(2.1354705,82.888926,5.0408548)\">\n      <g\n         transform=\"matrix(0.03891341,0.122436,0.11382588,-0.03617688,-3.7565534,-2.7958302)\"\n         id=\"use8788-4\"\n         style=\"display:inline;stroke-width:2.42865;enable-background:new\"\n         inkscape:tile-x0=\"202.09758\"\n         inkscape:tile-y0=\"377.30997\">\n        <rect\n           ry=\"3.6799715\"\n           transform=\"rotate(-90)\"\n           y=\"215.41093\"\n           x=\"-702.90289\"\n           height=\"94.58654\"\n           width=\"95.592773\"\n           id=\"rect9586-7\"\n           style=\"opacity:1;fill:none;fill-opacity:1\" />\n        <g\n           id=\"g9612-6\">\n          <rect\n             ry=\"0\"\n             rx=\"0\"\n             y=\"646.2702\"\n             x=\"236.86981\"\n             height=\"17.810518\"\n             width=\"50.852936\"\n             id=\"rect9588-3\"\n             style=\"opacity:1;fill:url(#linearGradient15943);fill-opacity:1;stroke:none;stroke-width:5.46447;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n          <rect\n             style=\"opacity:0.5;fill:#e6e6e6;fill-opacity:1;stroke:url(#linearGradient15945);stroke-width:0.910744;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n             id=\"rect9590-17\"\n             width=\"30.673195\"\n             height=\"20.48464\"\n             x=\"246.82515\"\n             y=\"644.93317\"\n             rx=\"0\"\n             ry=\"0\" />\n          <rect\n             style=\"opacity:1;fill:url(#linearGradient15947);fill-opacity:1;stroke:none;stroke-width:5.46447;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n             id=\"rect9592-59\"\n             width=\"10.803967\"\n             height=\"17.810518\"\n             x=\"236.86981\"\n             y=\"646.2702\"\n             rx=\"0\"\n             ry=\"0\" />\n          <rect\n             ry=\"0\"\n             rx=\"0\"\n             y=\"646.2702\"\n             x=\"235.72174\"\n             height=\"17.810518\"\n             width=\"11.952045\"\n             id=\"rect9594-6\"\n             style=\"opacity:1;fill:url(#linearGradient15949);fill-opacity:1;stroke:none;stroke-width:5.46447;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n          <rect\n             style=\"opacity:1;fill:url(#linearGradient15951);fill-opacity:1;stroke:none;stroke-width:5.46447;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n             id=\"rect9596-2\"\n             width=\"12.047719\"\n             height=\"17.810518\"\n             x=\"-289.63242\"\n             y=\"-664.08069\"\n             rx=\"0\"\n             ry=\"0\"\n             transform=\"scale(-1)\" />\n          <rect\n             ry=\"0\"\n             rx=\"0\"\n             y=\"643.39716\"\n             x=\"244.77632\"\n             height=\"23.668133\"\n             width=\"35.714989\"\n             id=\"rect9598-1\"\n             style=\"opacity:0.5;fill:#cccccc;fill-opacity:1;stroke:none;stroke-width:0.910744;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n          <rect\n             transform=\"scale(-1)\"\n             ry=\"0\"\n             rx=\"0\"\n             y=\"-661.56409\"\n             x=\"-288.38864\"\n             height=\"12.920165\"\n             width=\"7.9501214\"\n             id=\"rect9600-7\"\n             style=\"opacity:1;fill:url(#radialGradient9626-8);fill-opacity:1;stroke:none;stroke-width:5.46447;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n          <rect\n             style=\"opacity:0.7;fill:url(#radialGradient9628-1);fill-opacity:1;stroke:none;stroke-width:5.46447;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n             id=\"rect9602-8\"\n             width=\"8.1235332\"\n             height=\"15.916349\"\n             x=\"236.86981\"\n             y=\"-663.12421\"\n             rx=\"0\"\n             ry=\"0\"\n             transform=\"scale(1,-1)\" />\n          <rect\n             style=\"opacity:0.5;fill:#cccccc;fill-opacity:1;stroke:url(#linearGradient15953);stroke-width:0.910744;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n             id=\"rect9604-5\"\n             width=\"35.187237\"\n             height=\"23.276518\"\n             x=\"-280.29782\"\n             y=\"643.46826\"\n             rx=\"0\"\n             ry=\"0\"\n             transform=\"scale(-1,1)\" />\n          <rect\n             ry=\"0\"\n             rx=\"0\"\n             y=\"646.21448\"\n             x=\"240.59035\"\n             height=\"17.86623\"\n             width=\"4.4552469\"\n             id=\"rect9606-7\"\n             style=\"opacity:1;fill:url(#linearGradient15955);fill-opacity:1;stroke:none;stroke-width:5.46447;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n          <rect\n             style=\"opacity:1;fill:url(#linearGradient15957);fill-opacity:1;stroke:none;stroke-width:5.46447;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n             id=\"rect9608-4\"\n             width=\"4.4552469\"\n             height=\"17.86623\"\n             x=\"-284.83307\"\n             y=\"-664.08075\"\n             rx=\"0\"\n             ry=\"0\"\n             transform=\"scale(-1)\" />\n          <rect\n             transform=\"scale(-1,1)\"\n             ry=\"0\"\n             rx=\"0\"\n             y=\"643.46826\"\n             x=\"-280.29782\"\n             height=\"23.276518\"\n             width=\"35.187237\"\n             id=\"rect9610-1\"\n             style=\"opacity:0.5;fill:url(#radialGradient9636-4);fill-opacity:1;stroke:url(#linearGradient14901);stroke-width:0.910744;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n        </g>\n      </g>\n      <g\n         transform=\"matrix(0.03877107,0.12248114,0.11386785,-0.03604455,-0.03289796,-4.1543426)\"\n         id=\"use8788-3\"\n         style=\"display:inline;stroke-width:2.42865;enable-background:new\"\n         inkscape:tile-x0=\"202.09758\"\n         inkscape:tile-y0=\"377.30997\">\n        <rect\n           ry=\"3.6799715\"\n           transform=\"rotate(-90)\"\n           y=\"215.41093\"\n           x=\"-702.90289\"\n           height=\"94.58654\"\n           width=\"95.592773\"\n           id=\"rect9586-0\"\n           style=\"opacity:1;fill:none;fill-opacity:1\" />\n        <g\n           id=\"g9612-3\">\n          <rect\n             ry=\"0\"\n             rx=\"0\"\n             y=\"646.2702\"\n             x=\"236.86981\"\n             height=\"17.810518\"\n             width=\"50.852936\"\n             id=\"rect9588-0\"\n             style=\"opacity:1;fill:url(#linearGradient16121);fill-opacity:1;stroke:none;stroke-width:5.46447;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n          <rect\n             style=\"opacity:0.5;fill:#e6e6e6;fill-opacity:1;stroke:url(#linearGradient16123);stroke-width:0.910744;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n             id=\"rect9590-9\"\n             width=\"30.673195\"\n             height=\"20.48464\"\n             x=\"246.82515\"\n             y=\"644.93317\"\n             rx=\"0\"\n             ry=\"0\" />\n          <rect\n             style=\"opacity:1;fill:url(#linearGradient16125);fill-opacity:1;stroke:none;stroke-width:5.46447;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n             id=\"rect9592-2\"\n             width=\"10.803967\"\n             height=\"17.810518\"\n             x=\"236.86981\"\n             y=\"646.2702\"\n             rx=\"0\"\n             ry=\"0\" />\n          <rect\n             ry=\"0\"\n             rx=\"0\"\n             y=\"646.2702\"\n             x=\"235.72174\"\n             height=\"17.810518\"\n             width=\"11.952045\"\n             id=\"rect9594-5\"\n             style=\"opacity:1;fill:url(#linearGradient16127);fill-opacity:1;stroke:none;stroke-width:5.46447;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n          <rect\n             style=\"opacity:1;fill:url(#linearGradient16129);fill-opacity:1;stroke:none;stroke-width:5.46447;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n             id=\"rect9596-40\"\n             width=\"12.047719\"\n             height=\"17.810518\"\n             x=\"-289.63242\"\n             y=\"-664.08069\"\n             rx=\"0\"\n             ry=\"0\"\n             transform=\"scale(-1)\" />\n          <rect\n             ry=\"0\"\n             rx=\"0\"\n             y=\"643.39716\"\n             x=\"244.77632\"\n             height=\"23.668133\"\n             width=\"35.714989\"\n             id=\"rect9598-5\"\n             style=\"opacity:0.5;fill:#cccccc;fill-opacity:1;stroke:none;stroke-width:0.910744;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n          <rect\n             transform=\"scale(-1)\"\n             ry=\"0\"\n             rx=\"0\"\n             y=\"-661.56409\"\n             x=\"-288.38864\"\n             height=\"12.920165\"\n             width=\"7.9501214\"\n             id=\"rect9600-94\"\n             style=\"opacity:1;fill:url(#radialGradient9626-18);fill-opacity:1;stroke:none;stroke-width:5.46447;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n          <rect\n             style=\"opacity:0.7;fill:url(#radialGradient9628-4);fill-opacity:1;stroke:none;stroke-width:5.46447;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n             id=\"rect9602-6\"\n             width=\"8.1235332\"\n             height=\"15.916349\"\n             x=\"236.86981\"\n             y=\"-663.12421\"\n             rx=\"0\"\n             ry=\"0\"\n             transform=\"scale(1,-1)\" />\n          <rect\n             style=\"opacity:0.5;fill:#cccccc;fill-opacity:1;stroke:url(#linearGradient16131);stroke-width:0.910744;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n             id=\"rect9604-9\"\n             width=\"35.187237\"\n             height=\"23.276518\"\n             x=\"-280.29782\"\n             y=\"643.46826\"\n             rx=\"0\"\n             ry=\"0\"\n             transform=\"scale(-1,1)\" />\n          <rect\n             ry=\"0\"\n             rx=\"0\"\n             y=\"646.21448\"\n             x=\"240.59035\"\n             height=\"17.86623\"\n             width=\"4.4552469\"\n             id=\"rect9606-2\"\n             style=\"opacity:1;fill:url(#linearGradient16133);fill-opacity:1;stroke:none;stroke-width:5.46447;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n          <rect\n             style=\"opacity:1;fill:url(#linearGradient16135);fill-opacity:1;stroke:none;stroke-width:5.46447;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n             id=\"rect9608-2\"\n             width=\"4.4552469\"\n             height=\"17.86623\"\n             x=\"-284.83307\"\n             y=\"-664.08075\"\n             rx=\"0\"\n             ry=\"0\"\n             transform=\"scale(-1)\" />\n          <rect\n             transform=\"scale(-1,1)\"\n             ry=\"0\"\n             rx=\"0\"\n             y=\"643.46826\"\n             x=\"-280.29782\"\n             height=\"23.276518\"\n             width=\"35.187237\"\n             id=\"rect9610-4\"\n             style=\"opacity:0.5;fill:url(#radialGradient9636-77);fill-opacity:1;stroke:url(#linearGradient14901);stroke-width:0.910744;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n        </g>\n      </g>\n    </g>\n    <g\n       id=\"g10750\"\n       transform=\"translate(-6.879167,5.8208336)\">\n      <g\n         transform=\"matrix(0,0.12847111,0.11943658,0,84.679097,147.20546)\"\n         id=\"use8788-7\"\n         style=\"display:inline;stroke-width:2.42865;enable-background:new\"\n         inkscape:tile-x0=\"202.09758\"\n         inkscape:tile-y0=\"377.30997\">\n        <rect\n           ry=\"3.6799715\"\n           transform=\"rotate(-90)\"\n           y=\"215.41093\"\n           x=\"-702.90289\"\n           height=\"94.58654\"\n           width=\"95.592773\"\n           id=\"rect9586-4\"\n           style=\"opacity:1;fill:none;fill-opacity:1\" />\n        <g\n           id=\"g9612-5\">\n          <rect\n             ry=\"0\"\n             rx=\"0\"\n             y=\"646.2702\"\n             x=\"236.86981\"\n             height=\"17.810518\"\n             width=\"50.852936\"\n             id=\"rect9588-2\"\n             style=\"opacity:1;fill:url(#linearGradient9616-9);fill-opacity:1;stroke:none;stroke-width:5.46447;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n          <rect\n             style=\"opacity:0.5;fill:#e6e6e6;fill-opacity:1;stroke:url(#linearGradient9618-8);stroke-width:0.910744;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n             id=\"rect9590-5\"\n             width=\"30.673195\"\n             height=\"20.48464\"\n             x=\"246.82515\"\n             y=\"644.93317\"\n             rx=\"0\"\n             ry=\"0\" />\n          <rect\n             style=\"opacity:1;fill:url(#linearGradient9620-0);fill-opacity:1;stroke:none;stroke-width:5.46447;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n             id=\"rect9592-4\"\n             width=\"10.803967\"\n             height=\"17.810518\"\n             x=\"236.86981\"\n             y=\"646.2702\"\n             rx=\"0\"\n             ry=\"0\" />\n          <rect\n             ry=\"0\"\n             rx=\"0\"\n             y=\"646.2702\"\n             x=\"235.72174\"\n             height=\"17.810518\"\n             width=\"11.952045\"\n             id=\"rect9594-7\"\n             style=\"opacity:1;fill:url(#linearGradient9622-3);fill-opacity:1;stroke:none;stroke-width:5.46447;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n          <rect\n             style=\"opacity:1;fill:url(#linearGradient9624-6);fill-opacity:1;stroke:none;stroke-width:5.46447;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n             id=\"rect9596-4\"\n             width=\"12.047719\"\n             height=\"17.810518\"\n             x=\"-289.63242\"\n             y=\"-664.08069\"\n             rx=\"0\"\n             ry=\"0\"\n             transform=\"scale(-1)\" />\n          <rect\n             ry=\"0\"\n             rx=\"0\"\n             y=\"643.39716\"\n             x=\"244.77632\"\n             height=\"23.668133\"\n             width=\"35.714989\"\n             id=\"rect9598-4\"\n             style=\"opacity:0.5;fill:#cccccc;fill-opacity:1;stroke:none;stroke-width:0.910744;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n          <rect\n             transform=\"scale(-1)\"\n             ry=\"0\"\n             rx=\"0\"\n             y=\"-661.56409\"\n             x=\"-288.38864\"\n             height=\"12.920165\"\n             width=\"7.9501214\"\n             id=\"rect9600-3\"\n             style=\"opacity:1;fill:url(#radialGradient9626-1);fill-opacity:1;stroke:none;stroke-width:5.46447;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n          <rect\n             style=\"opacity:0.7;fill:url(#radialGradient9628-3);fill-opacity:1;stroke:none;stroke-width:5.46447;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n             id=\"rect9602-0\"\n             width=\"8.1235332\"\n             height=\"15.916349\"\n             x=\"236.86981\"\n             y=\"-663.12421\"\n             rx=\"0\"\n             ry=\"0\"\n             transform=\"scale(1,-1)\" />\n          <rect\n             style=\"opacity:0.5;fill:#cccccc;fill-opacity:1;stroke:url(#linearGradient9630-1);stroke-width:0.910744;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n             id=\"rect9604-7\"\n             width=\"35.187237\"\n             height=\"23.276518\"\n             x=\"-280.29782\"\n             y=\"643.46826\"\n             rx=\"0\"\n             ry=\"0\"\n             transform=\"scale(-1,1)\" />\n          <rect\n             ry=\"0\"\n             rx=\"0\"\n             y=\"646.21448\"\n             x=\"240.59035\"\n             height=\"17.86623\"\n             width=\"4.4552469\"\n             id=\"rect9606-8\"\n             style=\"opacity:1;fill:url(#linearGradient9632-4);fill-opacity:1;stroke:none;stroke-width:5.46447;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n          <rect\n             style=\"opacity:1;fill:url(#linearGradient9634-5);fill-opacity:1;stroke:none;stroke-width:5.46447;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n             id=\"rect9608-6\"\n             width=\"4.4552469\"\n             height=\"17.86623\"\n             x=\"-284.83307\"\n             y=\"-664.08075\"\n             rx=\"0\"\n             ry=\"0\"\n             transform=\"scale(-1)\" />\n          <rect\n             transform=\"scale(-1,1)\"\n             ry=\"0\"\n             rx=\"0\"\n             y=\"643.46826\"\n             x=\"-280.29782\"\n             height=\"23.276518\"\n             width=\"35.187237\"\n             id=\"rect9610-8\"\n             style=\"opacity:0.5;fill:url(#radialGradient9636-6);fill-opacity:1;stroke:url(#linearGradient14901);stroke-width:0.910744;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n        </g>\n      </g>\n      <g\n         transform=\"matrix(0,0.12847111,0.11943658,0,88.383259,147.20546)\"\n         id=\"use8788-6\"\n         style=\"display:inline;stroke-width:2.42865;enable-background:new\"\n         inkscape:tile-x0=\"202.09758\"\n         inkscape:tile-y0=\"377.30997\">\n        <rect\n           ry=\"3.6799715\"\n           transform=\"rotate(-90)\"\n           y=\"215.41093\"\n           x=\"-702.90289\"\n           height=\"94.58654\"\n           width=\"95.592773\"\n           id=\"rect9586-1\"\n           style=\"opacity:1;fill:none;fill-opacity:1\" />\n        <g\n           id=\"g9612-0\">\n          <rect\n             ry=\"0\"\n             rx=\"0\"\n             y=\"646.2702\"\n             x=\"236.86981\"\n             height=\"17.810518\"\n             width=\"50.852936\"\n             id=\"rect9588-6\"\n             style=\"opacity:1;fill:url(#linearGradient10689);fill-opacity:1;stroke:none;stroke-width:5.46447;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n          <rect\n             style=\"opacity:0.5;fill:#e6e6e6;fill-opacity:1;stroke:url(#linearGradient10691);stroke-width:0.910744;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n             id=\"rect9590-1\"\n             width=\"30.673195\"\n             height=\"20.48464\"\n             x=\"246.82515\"\n             y=\"644.93317\"\n             rx=\"0\"\n             ry=\"0\" />\n          <rect\n             style=\"opacity:1;fill:url(#linearGradient10693);fill-opacity:1;stroke:none;stroke-width:5.46447;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n             id=\"rect9592-5\"\n             width=\"10.803967\"\n             height=\"17.810518\"\n             x=\"236.86981\"\n             y=\"646.2702\"\n             rx=\"0\"\n             ry=\"0\" />\n          <rect\n             ry=\"0\"\n             rx=\"0\"\n             y=\"646.2702\"\n             x=\"235.72174\"\n             height=\"17.810518\"\n             width=\"11.952045\"\n             id=\"rect9594-9\"\n             style=\"opacity:1;fill:url(#linearGradient10695);fill-opacity:1;stroke:none;stroke-width:5.46447;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n          <rect\n             style=\"opacity:1;fill:url(#linearGradient10697);fill-opacity:1;stroke:none;stroke-width:5.46447;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n             id=\"rect9596-49\"\n             width=\"12.047719\"\n             height=\"17.810518\"\n             x=\"-289.63242\"\n             y=\"-664.08069\"\n             rx=\"0\"\n             ry=\"0\"\n             transform=\"scale(-1)\" />\n          <rect\n             ry=\"0\"\n             rx=\"0\"\n             y=\"643.39716\"\n             x=\"244.77632\"\n             height=\"23.668133\"\n             width=\"35.714989\"\n             id=\"rect9598-0\"\n             style=\"opacity:0.5;fill:#cccccc;fill-opacity:1;stroke:none;stroke-width:0.910744;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n          <rect\n             transform=\"scale(-1)\"\n             ry=\"0\"\n             rx=\"0\"\n             y=\"-661.56409\"\n             x=\"-288.38864\"\n             height=\"12.920165\"\n             width=\"7.9501214\"\n             id=\"rect9600-9\"\n             style=\"opacity:1;fill:url(#radialGradient9626-9);fill-opacity:1;stroke:none;stroke-width:5.46447;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n          <rect\n             style=\"opacity:0.7;fill:url(#radialGradient9628-6);fill-opacity:1;stroke:none;stroke-width:5.46447;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n             id=\"rect9602-1\"\n             width=\"8.1235332\"\n             height=\"15.916349\"\n             x=\"236.86981\"\n             y=\"-663.12421\"\n             rx=\"0\"\n             ry=\"0\"\n             transform=\"scale(1,-1)\" />\n          <rect\n             style=\"opacity:0.5;fill:#cccccc;fill-opacity:1;stroke:url(#linearGradient10699);stroke-width:0.910744;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n             id=\"rect9604-77\"\n             width=\"35.187237\"\n             height=\"23.276518\"\n             x=\"-280.29782\"\n             y=\"643.46826\"\n             rx=\"0\"\n             ry=\"0\"\n             transform=\"scale(-1,1)\" />\n          <rect\n             ry=\"0\"\n             rx=\"0\"\n             y=\"646.21448\"\n             x=\"240.59035\"\n             height=\"17.86623\"\n             width=\"4.4552469\"\n             id=\"rect9606-1\"\n             style=\"opacity:1;fill:url(#linearGradient10701);fill-opacity:1;stroke:none;stroke-width:5.46447;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n          <rect\n             style=\"opacity:1;fill:url(#linearGradient10703);fill-opacity:1;stroke:none;stroke-width:5.46447;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n             id=\"rect9608-1\"\n             width=\"4.4552469\"\n             height=\"17.86623\"\n             x=\"-284.83307\"\n             y=\"-664.08075\"\n             rx=\"0\"\n             ry=\"0\"\n             transform=\"scale(-1)\" />\n          <rect\n             transform=\"scale(-1,1)\"\n             ry=\"0\"\n             rx=\"0\"\n             y=\"643.46826\"\n             x=\"-280.29782\"\n             height=\"23.276518\"\n             width=\"35.187237\"\n             id=\"rect9610-5\"\n             style=\"opacity:0.5;fill:url(#radialGradient9636-7);fill-opacity:1;stroke:url(#linearGradient14901);stroke-width:0.910744;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n        </g>\n      </g>\n    </g>\n    <g\n       transform=\"matrix(0.90529196,0,0,0.90529196,-270.38639,7.8258306)\"\n       id=\"g18626\">\n      <path\n         id=\"path18026\"\n         style=\"fill:#bdbdb9;fill-opacity:1;stroke:#adada3;stroke-width:2.93291;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n         d=\"m 1577.1621,32.410156 a 316.17052,316.38713 0 0 0 -315.8574,316.386724 316.17052,316.38713 0 0 0 144.6797,265.80273 v 112.75586 h 342.9824 V 614.59961 a 316.17052,316.38713 0 0 0 144.6797,-265.80273 316.17052,316.38713 0 0 0 -316.1719,-316.386724 316.17052,316.38713 0 0 0 -0.3125,0 z\"\n         transform=\"scale(0.26458333)\" />\n      <ellipse\n         style=\"fill:#030000;fill-opacity:1;stroke:#939393;stroke-width:0.881;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n         id=\"path18591\"\n         cx=\"417.37372\"\n         cy=\"92.285927\"\n         rx=\"77.698364\"\n         ry=\"76.823769\" />\n    </g>\n    <g\n       transform=\"matrix(0.90529196,0,0,0.90529196,-270.98083,9.4133306)\"\n       id=\"g18630\">\n      <path\n         id=\"path18596\"\n         style=\"fill:#ffff00;fill-opacity:1;stroke:#000000;stroke-width:0.775999;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n         d=\"m 380.47626,65.632179 a 30,30 0 0 0 -29.61836,25.23205 h 10.19524 a 19.999999,19.999999 0 0 1 19.34404,-15.231629 19.999999,19.999999 0 0 1 0.0791,0 19.999999,19.999999 0 0 1 19.42309,15.231629 h 10.19577 a 30,30 0 0 0 -29.61886,-25.23205 z\" />\n      <path\n         d=\"m 455.58397,65.313911 a 30.000001,30.000001 0 0 0 -29.61835,25.23205 h 10.19524 a 20,20 0 0 1 19.34403,-15.23163 20,20 0 0 1 0.0791,0 20,20 0 0 1 19.42309,15.23163 h 10.19577 a 30.000001,30.000001 0 0 0 -29.61886,-25.23205 z\"\n         style=\"fill:#ffff00;fill-opacity:1;stroke:#000000;stroke-width:0.775999;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n         id=\"path18596-9\" />\n    </g>\n    <g\n       transform=\"matrix(1.3065917,0,0,1.3065917,97.398426,190.51406)\"\n       id=\"g6705\">\n      <g\n         id=\"g6703\">\n        <g\n           id=\"ws2812b-narrow\"\n           gorn=\"0.3.16.0.0\">\n          <g\n             id=\"g6700\">\n            <rect\n               fill=\"#dcdcdc\"\n               width=\"15.307\"\n               x=\"0\"\n               y=\"3.402\"\n               height=\"1.984\"\n               id=\"rect6678\" />\n            <rect\n               fill=\"#dcdcdc\"\n               width=\"15.307\"\n               x=\"0\"\n               y=\"12.756\"\n               height=\"1.984\"\n               id=\"rect6680\" />\n            <rect\n               fill=\"#f0f0f0\"\n               width=\"14.173\"\n               x=\"0.56699997\"\n               y=\"1.984\"\n               height=\"14.173\"\n               id=\"rect6682\" />\n            <circle\n               fill=\"#dcdcdc\"\n               r=\"6.0240002\"\n               cx=\"7.6539998\"\n               cy=\"9.0710001\"\n               id=\"circle6684\" />\n            <circle\n               fill=\"#c8c8c8\"\n               r=\"4.961\"\n               cx=\"7.6539998\"\n               cy=\"9.0710001\"\n               id=\"circle6686\" />\n            <polygon\n               fill=\"#e6e6e6\"\n               points=\"3.118,1.984 0.567,1.984 0.567,4.535 \"\n               id=\"polygon6688\" />\n            <path\n               fill=\"#f0f0f0\"\n               d=\"M 10.726,6.236 V 6.36 c 0,0.157 -0.127,0.283 -0.283,0.283 H 8.437 C 8.28,6.643 8.154,6.516 8.154,6.36 V 4.161 c -0.167,-0.017 -0.329,-0.05 -0.5,-0.05 -0.171,0 -0.333,0.033 -0.5,0.05 v 6.905 c 0,0.157 -0.127,0.283 -0.283,0.283 H 4.864 c -0.157,0 -0.283,-0.127 -0.283,-0.283 V 6.236 C 4.581,6.079 4.454,5.953 4.298,5.953 H 3.824 c -0.696,0.854 -1.131,1.93 -1.131,3.118 0,1.263 0.486,2.402 1.263,3.278 H 6.87 c 0.157,0 0.283,0.127 0.283,0.283 v 1.349 c 0.167,0.017 0.329,0.05 0.5,0.05 0.171,0 0.333,-0.033 0.5,-0.05 V 7.927 C 8.153,7.77 8.28,7.644 8.436,7.644 h 2.006 c 0.157,0 0.283,0.127 0.283,0.283 v 3.979 c 0,0.157 0.127,0.283 0.283,0.283 h 0.473 c 0.696,-0.854 1.131,-1.93 1.131,-3.118 0,-1.188 -0.435,-2.264 -1.131,-3.118 H 11.01 c -0.157,0 -0.284,0.127 -0.284,0.283 z\"\n               id=\"path6690\" />\n            <rect\n               fill=\"#645050\"\n               width=\"2.2679999\"\n               x=\"4.7220001\"\n               y=\"8.8439999\"\n               height=\"1.701\"\n               id=\"rect6692\" />\n            <rect\n               fill=\"#ff4000\"\n               width=\"0.85000002\"\n               x=\"8.4949999\"\n               y=\"8.7869997\"\n               height=\"0.56699997\"\n               id=\"rect6694\" />\n            <rect\n               fill=\"#40ff40\"\n               width=\"0.85000002\"\n               x=\"8.4949999\"\n               y=\"11.622\"\n               height=\"0.56699997\"\n               id=\"rect6696\" />\n            <rect\n               fill=\"#4040ff\"\n               width=\"0.85000002\"\n               x=\"8.4949999\"\n               y=\"5.9530001\"\n               height=\"0.56699997\"\n               id=\"rect6698\" />\n          </g>\n        </g>\n      </g>\n    </g>\n    <g\n       id=\"ButtonGroup-20\"\n       style=\"display:inline;enable-background:new\"\n       transform=\"matrix(6.1606194e-4,0.79999976,-0.79999976,6.1606194e-4,283.6596,152.86883)\">\n      <g\n         id=\"g8124-2\">\n        <path\n           transform=\"scale(1,-1)\"\n           style=\"opacity:1;fill:#b3b3b3;fill-opacity:1;stroke:none;stroke-width:0.79375;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n           d=\"M 86.342987,-209.89487 H 107.3555 v 0.77824 H 86.342987 Z\"\n           id=\"rect22675-3\"\n           inkscape:connector-curvature=\"0\" />\n        <path\n           transform=\"matrix(0,1,1,0,0,0)\"\n           style=\"opacity:1;fill:#666666;fill-opacity:1;stroke:none;stroke-width:0.79375;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n           d=\"m 209.89487,107.35549 h 21.01251 v 1.06172 h -21.01251 z\"\n           id=\"rect22681-7\"\n           inkscape:connector-curvature=\"0\" />\n        <rect\n           transform=\"matrix(0,1,1,0,0,0)\"\n           style=\"opacity:1;fill:url(#linearGradient7160-8-6);fill-opacity:1;stroke:none;stroke-width:0.79375;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n           id=\"rect22683-5\"\n           width=\"21.012514\"\n           height=\"0.77824152\"\n           x=\"209.89484\"\n           y=\"85.564751\"\n           rx=\"0\"\n           ry=\"0\" />\n        <g\n           id=\"g22713-9\"\n           transform=\"matrix(-0.35277777,0,0,-0.35277777,174.43829,400.27388)\">\n          <rect\n             transform=\"matrix(0,1,1,0,0,0)\"\n             style=\"opacity:1;fill:url(#linearGradient1691);fill-opacity:1;stroke:none;stroke-width:2.25;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n             id=\"rect22685-2\"\n             width=\"4.412076\"\n             height=\"2.206039\"\n             x=\"486.86975\"\n             y=\"251.84616\"\n             rx=\"0\"\n             ry=\"0\" />\n          <rect\n             ry=\"0\"\n             rx=\"0\"\n             y=\"251.84616\"\n             x=\"528.94208\"\n             height=\"2.206039\"\n             width=\"4.412076\"\n             id=\"rect22687-2\"\n             style=\"opacity:1;fill:url(#linearGradient1693);fill-opacity:1;stroke:none;stroke-width:2.25;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n             transform=\"matrix(0,1,1,0,0,0)\" />\n        </g>\n        <g\n           transform=\"matrix(0.35277777,0,0,0.35277777,19.232455,40.361571)\"\n           id=\"g22717-8\">\n          <rect\n             ry=\"0\"\n             rx=\"0\"\n             y=\"251.84616\"\n             x=\"486.86975\"\n             height=\"2.206039\"\n             width=\"4.412076\"\n             id=\"rect22719-9\"\n             style=\"opacity:1;fill:url(#linearGradient1695);fill-opacity:1;stroke:none;stroke-width:2.25;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n             transform=\"matrix(0,1,1,0,0,0)\" />\n          <rect\n             transform=\"matrix(0,1,1,0,0,0)\"\n             style=\"opacity:1;fill:url(#linearGradient19420-1);fill-opacity:1;stroke:none;stroke-width:2.25;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n             id=\"rect22721-7\"\n             width=\"4.412076\"\n             height=\"2.206039\"\n             x=\"528.94208\"\n             y=\"251.84616\"\n             rx=\"0\"\n             ry=\"0\" />\n        </g>\n        <rect\n           transform=\"scale(1,-1)\"\n           ry=\"0\"\n           rx=\"0\"\n           y=\"-231.68561\"\n           x=\"86.342987\"\n           height=\"0.77824152\"\n           width=\"21.012514\"\n           id=\"rect22677-3\"\n           style=\"opacity:1;fill:url(#linearGradient7152-0-8);fill-opacity:1;stroke:none;stroke-width:0.79375;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n        <rect\n           style=\"opacity:1;fill:url(#linearGradient1697);fill-opacity:1;stroke:none;stroke-width:0.79375;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n           id=\"rect22851-6\"\n           width=\"21.012514\"\n           height=\"21.012514\"\n           x=\"86.342987\"\n           y=\"209.89487\"\n           rx=\"0\"\n           ry=\"0\" />\n        <rect\n           ry=\"0\"\n           rx=\"0\"\n           y=\"209.89487\"\n           x=\"86.342987\"\n           height=\"21.012514\"\n           width=\"21.012514\"\n           id=\"rect23001-1\"\n           style=\"opacity:0.5;fill:url(#linearGradient1699);fill-opacity:1;stroke:url(#linearGradient1701);stroke-width:0.132292;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n        <circle\n           style=\"opacity:1;fill:#333333;fill-opacity:1;stroke:#1a1a1a;stroke-width:0.375;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;filter:url(#filter23159-0)\"\n           id=\"circle23013-2\"\n           cx=\"286.43359\"\n           cy=\"510.03323\"\n           r=\"16.266335\"\n           transform=\"matrix(0.35277777,0,0,0.35277777,-4.0314059,40.36157)\" />\n        <circle\n           r=\"5.7384014\"\n           cy=\"220.40112\"\n           cx=\"96.849243\"\n           id=\"path23011-9\"\n           style=\"opacity:1;fill:#000000;fill-opacity:1;stroke:#000000;stroke-width:0.132292;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n        <path\n           inkscape:connector-curvature=\"0\"\n           id=\"circle23167-3\"\n           d=\"m 282.9269,526.03992 c 7.88098,1.68545 16.40643,-3.56301 18.41357,-11.37529 2.40818,-7.87087 -2.40449,-17.01212 -10.27502,-19.44269 -7.7626,-2.84898 -17.15863,1.55555 -19.98762,9.31618 -3.15747,7.58339 0.70491,17.13835 8.2792,20.34359 1.13436,0.53464 2.34319,0.90453 3.56987,1.15821 z\"\n           style=\"opacity:1;fill:#000000;fill-opacity:1;stroke:url(#linearGradient14882-2);stroke-width:0.15;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;filter:url(#filter23261-6)\"\n           transform=\"matrix(0.35277777,0,0,0.35277777,-4.0314059,40.36157)\" />\n        <circle\n           style=\"opacity:1;fill:none;fill-opacity:1;stroke:url(#linearGradient1703);stroke-width:0.2;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;filter:url(#filter9372-7)\"\n           id=\"circle23163-1\"\n           cx=\"96.849243\"\n           cy=\"220.40112\"\n           r=\"5.7384014\" />\n      </g>\n    </g>\n    <g\n       id=\"g10771\"\n       transform=\"translate(0,11.112501)\">\n      <g\n         id=\"ButtonGroup\"\n         style=\"display:inline;enable-background:new\"\n         transform=\"matrix(0.50859292,0.61752185,-0.61752185,0.50859292,237.19988,47.05577)\">\n        <g\n           id=\"g8124\">\n          <path\n             transform=\"scale(1,-1)\"\n             style=\"opacity:1;fill:#b3b3b3;fill-opacity:1;stroke:none;stroke-width:0.79375;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n             d=\"M 86.342987,-209.89487 H 107.3555 v 0.77824 H 86.342987 Z\"\n             id=\"rect22675\"\n             inkscape:connector-curvature=\"0\" />\n          <path\n             transform=\"matrix(0,1,1,0,0,0)\"\n             style=\"opacity:1;fill:#666666;fill-opacity:1;stroke:none;stroke-width:0.79375;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n             d=\"m 209.89487,107.35549 h 21.01251 v 1.06172 h -21.01251 z\"\n             id=\"rect22681\"\n             inkscape:connector-curvature=\"0\" />\n          <rect\n             transform=\"matrix(0,1,1,0,0,0)\"\n             style=\"opacity:1;fill:url(#linearGradient7160);fill-opacity:1;stroke:none;stroke-width:0.79375;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n             id=\"rect22683\"\n             width=\"21.012514\"\n             height=\"0.77824152\"\n             x=\"209.89484\"\n             y=\"85.564751\"\n             rx=\"0\"\n             ry=\"0\" />\n          <g\n             id=\"g22713\"\n             transform=\"matrix(-0.35277777,0,0,-0.35277777,174.43829,400.27388)\">\n            <rect\n               transform=\"matrix(0,1,1,0,0,0)\"\n               style=\"opacity:1;fill:url(#linearGradient10678);fill-opacity:1;stroke:none;stroke-width:2.25;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n               id=\"rect22685\"\n               width=\"4.412076\"\n               height=\"2.206039\"\n               x=\"486.86975\"\n               y=\"251.84616\"\n               rx=\"0\"\n               ry=\"0\" />\n            <rect\n               ry=\"0\"\n               rx=\"0\"\n               y=\"251.84616\"\n               x=\"528.94208\"\n               height=\"2.206039\"\n               width=\"4.412076\"\n               id=\"rect22687\"\n               style=\"opacity:1;fill:url(#linearGradient10680);fill-opacity:1;stroke:none;stroke-width:2.25;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n               transform=\"matrix(0,1,1,0,0,0)\" />\n          </g>\n          <g\n             transform=\"matrix(0.35277777,0,0,0.35277777,19.232455,40.361571)\"\n             id=\"g22717\">\n            <rect\n               ry=\"0\"\n               rx=\"0\"\n               y=\"251.84616\"\n               x=\"486.86975\"\n               height=\"2.206039\"\n               width=\"4.412076\"\n               id=\"rect22719\"\n               style=\"opacity:1;fill:url(#linearGradient10682);fill-opacity:1;stroke:none;stroke-width:2.25;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n               transform=\"matrix(0,1,1,0,0,0)\" />\n            <rect\n               transform=\"matrix(0,1,1,0,0,0)\"\n               style=\"opacity:1;fill:url(#linearGradient14874);fill-opacity:1;stroke:none;stroke-width:2.25;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n               id=\"rect22721\"\n               width=\"4.412076\"\n               height=\"2.206039\"\n               x=\"528.94208\"\n               y=\"251.84616\"\n               rx=\"0\"\n               ry=\"0\" />\n          </g>\n          <rect\n             transform=\"scale(1,-1)\"\n             ry=\"0\"\n             rx=\"0\"\n             y=\"-231.68561\"\n             x=\"86.342987\"\n             height=\"0.77824152\"\n             width=\"21.012514\"\n             id=\"rect22677\"\n             style=\"opacity:1;fill:url(#linearGradient7152);fill-opacity:1;stroke:none;stroke-width:0.79375;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n          <rect\n             style=\"opacity:1;fill:url(#linearGradient10684);fill-opacity:1;stroke:none;stroke-width:0.79375;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n             id=\"rect22851\"\n             width=\"21.012514\"\n             height=\"21.012514\"\n             x=\"86.342987\"\n             y=\"209.89487\"\n             rx=\"0\"\n             ry=\"0\" />\n          <rect\n             ry=\"0\"\n             rx=\"0\"\n             y=\"209.89487\"\n             x=\"86.342987\"\n             height=\"21.012514\"\n             width=\"21.012514\"\n             id=\"rect23001\"\n             style=\"opacity:0.5;fill:url(#linearGradient14872);fill-opacity:1;stroke:url(#linearGradient13378);stroke-width:0.132292;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n          <circle\n             style=\"opacity:1;fill:#333333;fill-opacity:1;stroke:#1a1a1a;stroke-width:0.375;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;filter:url(#filter23159)\"\n             id=\"circle23013\"\n             cx=\"286.43359\"\n             cy=\"510.03323\"\n             r=\"16.266335\"\n             transform=\"matrix(0.35277777,0,0,0.35277777,-4.0314059,40.36157)\" />\n          <circle\n             r=\"5.7384014\"\n             cy=\"220.40112\"\n             cx=\"96.849243\"\n             id=\"path23011\"\n             style=\"opacity:1;fill:#000000;fill-opacity:1;stroke:#000000;stroke-width:0.132292;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n          <path\n             inkscape:connector-curvature=\"0\"\n             id=\"circle23167\"\n             d=\"m 282.9269,526.03992 c 7.88098,1.68545 16.40643,-3.56301 18.41357,-11.37529 2.40818,-7.87087 -2.40449,-17.01212 -10.27502,-19.44269 -7.7626,-2.84898 -17.15863,1.55555 -19.98762,9.31618 -3.15747,7.58339 0.70491,17.13835 8.2792,20.34359 1.13436,0.53464 2.34319,0.90453 3.56987,1.15821 z\"\n             style=\"opacity:1;fill:#000000;fill-opacity:1;stroke:url(#linearGradient14882);stroke-width:0.15;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;filter:url(#filter23261)\"\n             transform=\"matrix(0.35277777,0,0,0.35277777,-4.0314059,40.36157)\" />\n          <circle\n             style=\"opacity:1;fill:none;fill-opacity:1;stroke:url(#linearGradient23165);stroke-width:0.2;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;filter:url(#filter9372)\"\n             id=\"circle23163\"\n             cx=\"96.849243\"\n             cy=\"220.40112\"\n             r=\"5.7384014\" />\n        </g>\n      </g>\n      <use\n         height=\"100%\"\n         width=\"100%\"\n         transform=\"translate(18.163252,-14.927446)\"\n         id=\"use8162\"\n         xlink:href=\"#ButtonGroup\"\n         y=\"0\"\n         x=\"0\"\n         style=\"display:inline;enable-background:new\" />\n    </g>\n    <g\n       id=\"ButtonGroup-2\"\n       style=\"display:inline;enable-background:new\"\n       transform=\"rotate(135,71.389302,213.6569)\">\n      <g\n         id=\"g8124-1\">\n        <path\n           transform=\"scale(1,-1)\"\n           style=\"opacity:1;fill:#b3b3b3;fill-opacity:1;stroke:none;stroke-width:0.79375;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n           d=\"M 86.342987,-209.89487 H 107.3555 v 0.77824 H 86.342987 Z\"\n           id=\"rect22675-7\"\n           inkscape:connector-curvature=\"0\" />\n        <path\n           transform=\"matrix(0,1,1,0,0,0)\"\n           style=\"opacity:1;fill:#666666;fill-opacity:1;stroke:none;stroke-width:0.79375;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n           d=\"m 209.89487,107.35549 h 21.01251 v 1.06172 h -21.01251 z\"\n           id=\"rect22681-5\"\n           inkscape:connector-curvature=\"0\" />\n        <rect\n           transform=\"matrix(0,1,1,0,0,0)\"\n           style=\"opacity:1;fill:url(#linearGradient7160-8);fill-opacity:1;stroke:none;stroke-width:0.79375;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n           id=\"rect22683-1\"\n           width=\"21.012514\"\n           height=\"0.77824152\"\n           x=\"209.89484\"\n           y=\"85.564751\"\n           rx=\"0\"\n           ry=\"0\" />\n        <g\n           id=\"g22713-7\"\n           transform=\"matrix(-0.35277777,0,0,-0.35277777,174.43829,400.27388)\">\n          <rect\n             transform=\"matrix(0,1,1,0,0,0)\"\n             style=\"opacity:1;fill:url(#linearGradient19420);fill-opacity:1;stroke:none;stroke-width:2.25;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n             id=\"rect22685-4\"\n             width=\"4.412076\"\n             height=\"2.206039\"\n             x=\"486.86975\"\n             y=\"251.84616\"\n             rx=\"0\"\n             ry=\"0\" />\n          <rect\n             ry=\"0\"\n             rx=\"0\"\n             y=\"251.84616\"\n             x=\"528.94208\"\n             height=\"2.206039\"\n             width=\"4.412076\"\n             id=\"rect22687-1\"\n             style=\"opacity:1;fill:url(#linearGradient19422);fill-opacity:1;stroke:none;stroke-width:2.25;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n             transform=\"matrix(0,1,1,0,0,0)\" />\n        </g>\n        <g\n           transform=\"matrix(0.35277777,0,0,0.35277777,19.232455,40.361571)\"\n           id=\"g22717-7\">\n          <rect\n             ry=\"0\"\n             rx=\"0\"\n             y=\"251.84616\"\n             x=\"486.86975\"\n             height=\"2.206039\"\n             width=\"4.412076\"\n             id=\"rect22719-1\"\n             style=\"opacity:1;fill:url(#linearGradient19424);fill-opacity:1;stroke:none;stroke-width:2.25;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n             transform=\"matrix(0,1,1,0,0,0)\" />\n          <rect\n             transform=\"matrix(0,1,1,0,0,0)\"\n             style=\"opacity:1;fill:url(#linearGradient10678-4);fill-opacity:1;stroke:none;stroke-width:2.25;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n             id=\"rect22721-1\"\n             width=\"4.412076\"\n             height=\"2.206039\"\n             x=\"528.94208\"\n             y=\"251.84616\"\n             rx=\"0\"\n             ry=\"0\" />\n        </g>\n        <rect\n           transform=\"scale(1,-1)\"\n           ry=\"0\"\n           rx=\"0\"\n           y=\"-231.68561\"\n           x=\"86.342987\"\n           height=\"0.77824152\"\n           width=\"21.012514\"\n           id=\"rect22677-1\"\n           style=\"opacity:1;fill:url(#linearGradient7152-0);fill-opacity:1;stroke:none;stroke-width:0.79375;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n        <rect\n           style=\"opacity:1;fill:url(#linearGradient19426);fill-opacity:1;stroke:none;stroke-width:0.79375;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n           id=\"rect22851-7\"\n           width=\"21.012514\"\n           height=\"21.012514\"\n           x=\"86.342987\"\n           y=\"209.89487\"\n           rx=\"0\"\n           ry=\"0\" />\n        <rect\n           ry=\"0\"\n           rx=\"0\"\n           y=\"209.89487\"\n           x=\"86.359856\"\n           height=\"21.012514\"\n           width=\"21.012514\"\n           id=\"rect23001-0\"\n           style=\"opacity:0.5;fill:url(#linearGradient19428);fill-opacity:1;stroke:url(#linearGradient19430);stroke-width:0.132292;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n        <circle\n           style=\"opacity:1;fill:#333333;fill-opacity:1;stroke:#1a1a1a;stroke-width:0.375;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;filter:url(#filter23159-4)\"\n           id=\"circle23013-4\"\n           cx=\"286.43359\"\n           cy=\"510.03323\"\n           r=\"16.266335\"\n           transform=\"matrix(0.35277777,0,0,0.35277777,-4.0314059,40.36157)\" />\n        <circle\n           r=\"5.7384014\"\n           cy=\"220.40112\"\n           cx=\"96.849243\"\n           id=\"path23011-0\"\n           style=\"opacity:1;fill:#000000;fill-opacity:1;stroke:#000000;stroke-width:0.132292;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n        <path\n           inkscape:connector-curvature=\"0\"\n           id=\"circle23167-8\"\n           d=\"m 282.9269,526.03992 c 7.88098,1.68545 16.40643,-3.56301 18.41357,-11.37529 2.40818,-7.87087 -2.40449,-17.01212 -10.27502,-19.44269 -7.7626,-2.84898 -17.15863,1.55555 -19.98762,9.31618 -3.15747,7.58339 0.70491,17.13835 8.2792,20.34359 1.13436,0.53464 2.34319,0.90453 3.56987,1.15821 z\"\n           style=\"opacity:1;fill:#000000;fill-opacity:1;stroke:url(#linearGradient19432);stroke-width:0.15;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;filter:url(#filter23261-7)\"\n           transform=\"matrix(0.35277777,0,0,0.35277777,-4.0314059,40.36157)\" />\n        <circle\n           style=\"opacity:1;fill:none;fill-opacity:1;stroke:url(#linearGradient19434);stroke-width:0.2;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;filter:url(#filter9372-2)\"\n           id=\"circle23163-5\"\n           cx=\"96.849243\"\n           cy=\"220.40112\"\n           r=\"5.7384014\" />\n      </g>\n    </g>\n    <path\n       id=\"path2336\"\n       style=\"fill:#d3ae17;fill-opacity:1;stroke:#1c1c1c;stroke-width:0.00367878;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:0.956717\"\n       d=\"m 24.45198,74.771718 a 2.6122586,2.5979137 0 0 0 -1.583586,0.531727 c -0.141633,-0.03474 -0.289726,-0.05361 -0.442377,-0.05361 H 3.6315409 c -1.0190186,0 -1.8394677,0.820447 -1.8394677,1.839467 v 0.486293 c 0,1.01902 0.8204491,1.839468 1.8394677,1.839468 H 22.426017 c 0.126443,0 0.249579,-0.0133 0.368617,-0.03745 a 2.6122586,2.5979137 0 0 0 1.657346,0.5899 2.6122586,2.5979137 0 0 0 2.612251,-2.597993 2.6122586,2.5979137 0 0 0 -2.612251,-2.597802 z m 0.02947,1.21725 a 1.4260258,1.3806339 0 0 1 1.425988,1.380551 1.4260258,1.3806339 0 0 1 -1.425988,1.380742 1.4260258,1.3806339 0 0 1 -1.425987,-1.380742 1.4260258,1.3806339 0 0 1 1.425987,-1.380551 z\" />\n    <path\n       id=\"path2336-3\"\n       style=\"fill:#d3ae17;fill-opacity:1;stroke:#1c1c1c;stroke-width:0.00367878;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:0.956717\"\n       d=\"m 24.49188,80.716113 a 2.6122586,2.5979137 0 0 0 -1.583586,0.531728 c -0.141637,-0.03473 -0.289726,-0.05361 -0.442377,-0.05361 H 3.671441 c -1.0190186,0 -1.8394677,0.820446 -1.8394677,1.839464 v 0.486295 c 0,1.019018 0.8204491,1.839467 1.8394677,1.839467 h 18.794476 c 0.126443,0 0.249576,-0.01328 0.368614,-0.03745 a 2.6122586,2.5979137 0 0 0 1.657349,0.5899 2.6122586,2.5979137 0 0 0 2.612248,-2.597992 2.6122586,2.5979137 0 0 0 -2.612248,-2.597804 z m 0.02947,1.21725 a 1.4260258,1.3806339 0 0 1 1.425988,1.380554 1.4260258,1.3806339 0 0 1 -1.425988,1.380743 1.4260258,1.3806339 0 0 1 -1.425987,-1.380743 1.4260258,1.3806339 0 0 1 1.425987,-1.380554 z\" />\n    <path\n       id=\"path2336-5\"\n       style=\"fill:#d3ae17;fill-opacity:1;stroke:#1c1c1c;stroke-width:0.00367878;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:0.956717\"\n       d=\"m 24.419795,86.713288 a 2.6122586,2.5979137 0 0 0 -1.583587,0.531727 c -0.141636,-0.03473 -0.289729,-0.05361 -0.442377,-0.05361 H 3.5993553 c -1.0190223,0 -1.8394677,0.820445 -1.8394677,1.839468 v 0.48629 c 0,1.019023 0.8204454,1.839472 1.8394677,1.839472 H 22.393831 c 0.126444,0 0.249576,-0.01332 0.368614,-0.03745 a 2.6122586,2.5979137 0 0 0 1.65735,0.589899 2.6122586,2.5979137 0 0 0 2.612247,-2.597991 2.6122586,2.5979137 0 0 0 -2.612247,-2.5978 z m 0.02947,1.217249 a 1.4260258,1.3806339 0 0 1 1.425987,1.380551 1.4260258,1.3806339 0 0 1 -1.425987,1.380742 1.4260258,1.3806339 0 0 1 -1.425988,-1.380742 1.4260258,1.3806339 0 0 1 1.425988,-1.380551 z\" />\n    <path\n       id=\"path2336-9\"\n       style=\"fill:#d3ae17;fill-opacity:1;stroke:#1c1c1c;stroke-width:0.00367878;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:0.956717\"\n       d=\"m 191.26117,74.700117 a 2.6122586,2.5979137 0 0 1 1.58359,0.531727 c 0.14163,-0.03474 0.28973,-0.05361 0.44238,-0.05361 h 18.79447 c 1.01902,0 1.83947,0.820447 1.83947,1.839467 v 0.486293 c 0,1.01902 -0.82045,1.839468 -1.83947,1.839468 h -18.79447 c -0.12645,0 -0.24958,-0.0133 -0.36862,-0.03745 a 2.6122586,2.5979137 0 0 1 -1.65735,0.5899 2.6122586,2.5979137 0 0 1 -2.61225,-2.597993 2.6122586,2.5979137 0 0 1 2.61225,-2.597802 z m -0.0295,1.21725 a 1.4260258,1.3806339 0 0 0 -1.42599,1.380551 1.4260258,1.3806339 0 0 0 1.42599,1.380742 1.4260258,1.3806339 0 0 0 1.42599,-1.380742 1.4260258,1.3806339 0 0 0 -1.42599,-1.380551 z\" />\n    <path\n       id=\"path2336-3-3\"\n       style=\"fill:#d3ae17;fill-opacity:1;stroke:#1c1c1c;stroke-width:0.00367878;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:0.956717\"\n       d=\"m 191.22127,80.644512 a 2.6122586,2.5979137 0 0 1 1.58359,0.531728 c 0.14164,-0.03473 0.28973,-0.05361 0.44238,-0.05361 h 18.79447 c 1.01902,0 1.83947,0.820446 1.83947,1.839464 v 0.486295 c 0,1.019018 -0.82045,1.839467 -1.83947,1.839467 h -18.79447 c -0.12645,0 -0.24958,-0.01328 -0.36862,-0.03745 a 2.6122586,2.5979137 0 0 1 -1.65735,0.5899 2.6122586,2.5979137 0 0 1 -2.61224,-2.597992 2.6122586,2.5979137 0 0 1 2.61224,-2.597804 z m -0.0295,1.21725 a 1.4260258,1.3806339 0 0 0 -1.42599,1.380554 1.4260258,1.3806339 0 0 0 1.42599,1.380743 1.4260258,1.3806339 0 0 0 1.42599,-1.380743 1.4260258,1.3806339 0 0 0 -1.42599,-1.380554 z\" />\n    <path\n       id=\"path2336-5-6\"\n       style=\"fill:#d3ae17;fill-opacity:1;stroke:#1c1c1c;stroke-width:0.00367878;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:0.956717\"\n       d=\"m 191.29336,86.641687 a 2.6122586,2.5979137 0 0 1 1.58359,0.531727 c 0.14163,-0.03473 0.28973,-0.05361 0.44237,-0.05361 h 18.79448 c 1.01902,0 1.83947,0.820445 1.83947,1.839468 v 0.48629 c 0,1.019023 -0.82045,1.839472 -1.83947,1.839472 h -18.79448 c -0.12644,0 -0.24957,-0.01332 -0.36861,-0.03745 a 2.6122586,2.5979137 0 0 1 -1.65735,0.589899 2.6122586,2.5979137 0 0 1 -2.61225,-2.597991 2.6122586,2.5979137 0 0 1 2.61225,-2.5978 z m -0.0295,1.217249 a 1.4260258,1.3806339 0 0 0 -1.42598,1.380551 1.4260258,1.3806339 0 0 0 1.42598,1.380742 1.4260258,1.3806339 0 0 0 1.42599,-1.380742 1.4260258,1.3806339 0 0 0 -1.42599,-1.380551 z\" />\n    <path\n       id=\"path15641\"\n       style=\"fill:#c8ab37;stroke-width:0.264583\"\n       d=\"m 57.51346,-8.1118879 4.84668,7.0323661 C 65.02452,2.786682 63.95499,8.1935787 59.91465,10.97795 55.87433,13.762321 50.77784,12.649796 47.77684,8.9706766 L 42.3886,1.1522656 A 104.49223,110.69444 89.287717 0 1 57.51346,-8.1118879 Z M 54.82063,1.6762704 A 2,2 0 0 0 53.44445,2.3466203 2,2 0 0 0 53.61598,5.1698566 2,2 0 0 0 56.43923,4.9988375 2,2 0 0 0 56.26769,2.1756012 2,2 0 0 0 54.82063,1.6762704 Z\" />\n    <g\n       id=\"g17638\"\n       transform=\"rotate(64.10689,155.01536,13.242261)\"\n       inkscape:transform-center-x=\"-0.024862216\"\n       inkscape:transform-center-y=\"0.16922223\">\n      <g\n         id=\"ToF\"\n         style=\"isolation:isolate\"\n         transform=\"matrix(0.61382666,0,0,0.517368,178.64245,-139.16453)\">\n        <path\n           fill=\"#303030\"\n           id=\"path1221\"\n           d=\"M 33.83864,274.79446 H 49.9888 v 9.02393 H 33.83902 Z\" />\n        <path\n           fill=\"#1f1f1f\"\n           id=\"path1223\"\n           d=\"m 49.9888,274.79446 -0.27338,0.15281 H 34.17154 l -0.3329,-0.15281 z m -0.27338,8.87112 H 34.11201 l -0.27299,0.15281 H 49.9888 Z\" />\n        <path\n           fill=\"#000000\"\n           id=\"path1225\"\n           d=\"m 34.11201,283.66596 0.05953,-8.71869 -0.3329,-0.15281 v 9.02393 z\" />\n        <path\n           fill=\"#3d3d3d\"\n           id=\"path1227\"\n           d=\"m 49.71542,283.66558 v -8.71831 l 0.273,-0.15281 v 9.02393 z\" />\n      </g>\n      <rect\n         style=\"fill:#c8ab37;fill-opacity:1;stroke:none;stroke-width:0.275062\"\n         id=\"rect17548-7\"\n         width=\"3.7852798\"\n         height=\"4.2245455\"\n         x=\"205.19006\"\n         y=\"3.2492681\" />\n      <rect\n         style=\"fill:#c8ab37;fill-opacity:1;stroke:none;stroke-width:0.275062\"\n         id=\"rect17629\"\n         width=\"3.7852798\"\n         height=\"4.2245455\"\n         x=\"199.78381\"\n         y=\"3.2492681\" />\n    </g>\n    <g\n       id=\"g28879\"\n       transform=\"matrix(1.7958015,2.0790475,-2.0790475,1.7958015,-160.17893,-450.52677)\">\n      <g\n         id=\"BAROMETER\"\n         style=\"isolation:isolate\"\n         transform=\"matrix(0.26458333,0,0,0.26458333,162.38774,-41.719966)\">\n        <path\n           fill=\"#303030\"\n           id=\"path1197\"\n           d=\"m 187.31158,244.39714 h 7.42122 v 7.42122 h -7.42122 z\" />\n        <path\n           fill=\"#1f1f1f\"\n           id=\"path1199\"\n           d=\"m 194.7328,244.39676 -0.1255,0.12588 h -7.1433 l -0.15242,-0.12588 z m -0.1255,7.2961 h -7.17023 l -0.12549,0.12513 h 7.42122 z\" />\n        <path\n           fill=\"#000000\"\n           id=\"path1201\"\n           d=\"m 187.43707,251.69286 0.0273,-7.17022 -0.1528,-0.12588 v 7.4216 z\" />\n        <path\n           fill=\"#3d3d3d\"\n           id=\"path1203\"\n           d=\"m 194.6073,251.69286 v -7.17022 l 0.1255,-0.12588 v 7.4216 z\" />\n      </g>\n      <rect\n         style=\"fill:#afe8b3;fill-opacity:1;stroke:none;stroke-width:0.264583\"\n         id=\"rect17691\"\n         width=\"0.60097873\"\n         height=\"0.59436274\"\n         x=\"212.20319\"\n         y=\"24.131435\" />\n    </g>\n    <g\n       id=\"g29724\"\n       transform=\"matrix(0.82109754,0.54857764,-0.54857764,0.82109754,-10.917499,-96.121248)\">\n      <g\n         id=\"ToF-7\"\n         style=\"isolation:isolate\"\n         transform=\"matrix(0.88706859,0,0,0.67121229,163.68408,-183.54579)\">\n        <path\n           fill=\"#303030\"\n           id=\"path1221-5\"\n           d=\"M 33.83864,274.79446 H 49.9888 v 9.02393 H 33.83902 Z\" />\n        <path\n           fill=\"#1f1f1f\"\n           id=\"path1223-4\"\n           d=\"m 49.9888,274.79446 -0.27338,0.15281 H 34.17154 l -0.3329,-0.15281 z m -0.27338,8.87112 H 34.11201 l -0.27299,0.15281 H 49.9888 Z\" />\n        <path\n           fill=\"#000000\"\n           id=\"path1225-8\"\n           d=\"m 34.11201,283.66596 0.05953,-8.71869 -0.3329,-0.15281 v 9.02393 z\" />\n        <path\n           fill=\"#3d3d3d\"\n           id=\"path1227-1\"\n           d=\"m 49.71542,283.66558 v -8.71831 l 0.273,-0.15281 v 9.02393 z\" />\n      </g>\n      <rect\n         style=\"fill:#000000;fill-opacity:1;stroke:none;stroke-width:0.264583\"\n         id=\"rect29710\"\n         width=\"0.67564428\"\n         height=\"5.3110137\"\n         x=\"197.7305\"\n         y=\"1.2396344\" />\n      <circle\n         style=\"fill:#76778c;fill-opacity:1;stroke:none;stroke-width:0.264583\"\n         id=\"path29712\"\n         cx=\"195.86078\"\n         cy=\"4.0412903\"\n         r=\"1.1643426\" />\n      <circle\n         style=\"fill:#76778c;fill-opacity:1;stroke:none;stroke-width:0.264583\"\n         id=\"circle29714\"\n         cx=\"205.91484\"\n         cy=\"4.0412903\"\n         r=\"1.1643426\" />\n    </g>\n    <path\n       style=\"fill:none;fill-opacity:1;stroke:#0b0b0b;stroke-width:1.565;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"m 138.42053,-11.317012 -34.86577,-0.08353 -0.008,3.2925278 36.45387,0.08733 -0.009,3.6296234 -36.53391,-0.087525 -0.009,3.66219397 37.1069,0.088897 -0.0127,5.32017613 c 0,0 -0.0754,-1.8e-4 -35.80832,-0.085786 v 4.0184008\"\n       id=\"path30612\" />\n    <circle\n       style=\"fill:none;fill-opacity:1;stroke:#000000;stroke-width:0.3;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n       id=\"circle9997\"\n       cx=\"27.644232\"\n       cy=\"267.88681\"\n       r=\"7.1815476\" />\n    <circle\n       r=\"7.1815476\"\n       cy=\"268.13248\"\n       cx=\"65.630852\"\n       id=\"circle9999\"\n       style=\"fill:none;fill-opacity:1;stroke:#000000;stroke-width:0.3;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n    <circle\n       style=\"fill:none;fill-opacity:1;stroke:#000000;stroke-width:0.3;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n       id=\"circle10001\"\n       cx=\"107.7752\"\n       cy=\"268.13248\"\n       r=\"7.1815476\" />\n    <circle\n       r=\"7.1815476\"\n       cy=\"268.13248\"\n       cx=\"150.20302\"\n       id=\"circle10003\"\n       style=\"fill:none;fill-opacity:1;stroke:#000000;stroke-width:0.3;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n    <path\n       style=\"fill:#c8ab37;stroke-width:0.264583\"\n       inkscape:connector-curvature=\"0\"\n       d=\"m 12.051377,274.0745 v 7.09851 c 0,3.99292 2.37675,7.46823 5.5202,9.3168 V 274.0745 Z\"\n       id=\"path21922\" />\n    <path\n       style=\"fill:#c8ab37;stroke-width:0.264583\"\n       inkscape:connector-curvature=\"0\"\n       d=\"m 197.43794,290.45284 c 3.14345,-1.84857 5.5202,-5.32388 5.5202,-9.27983 v -7.09851 h -5.5202 z\"\n       id=\"path21924\" />\n    <rect\n       id=\"rect21926\"\n       height=\"18.226908\"\n       width=\"3.5267916\"\n       y=\"273.7048\"\n       x=\"37.620613\"\n       style=\"fill:#c8ab37;stroke-width:0.264583\" />\n    <path\n       id=\"path21962\"\n       d=\"m 65.374937,259.13805 c -4.90685,0 -8.47197,3.80806 -8.85532,8.5404 v 24.25325 h 17.71063 v -24.25325 c 0,-4.69537 -3.94847,-8.5404 -8.85531,-8.5404 z m 0.0767,15.82377 c -4.10181,0 -7.39859,-3.17955 -7.39859,-7.13549 0,-3.95594 3.29678,-7.13548 7.39859,-7.13548 4.10182,0 7.3986,3.21651 7.3986,7.13548 0,3.95594 -3.29678,7.13549 -7.3986,7.13549 z\"\n       inkscape:connector-curvature=\"0\"\n       style=\"fill:#c8ab37;stroke-width:0.264583\" />\n    <path\n       id=\"path21964\"\n       d=\"m 107.50476,259.13805 c -4.90684,0 -8.471973,3.80806 -8.855313,8.5404 v 24.25325 h 17.710623 v -24.25325 c 0,-4.69537 -3.94847,-8.5404 -8.85531,-8.5404 z m 0.15334,15.82377 c -4.10181,0 -7.3986,-3.17955 -7.3986,-7.13549 0,-3.95594 3.29679,-7.13548 7.3986,-7.13548 4.10181,0 7.39859,3.21651 7.39859,7.13548 0,3.95594 -3.29678,7.13549 -7.39859,7.13549 z\"\n       inkscape:connector-curvature=\"0\"\n       style=\"fill:#c8ab37;stroke-width:0.264583\" />\n    <path\n       id=\"path21966\"\n       d=\"m 150.01793,259.13805 c -4.90684,0 -8.47196,3.80806 -8.85531,8.5404 v 24.25325 h 17.71062 v -24.25325 c 0,-4.69537 -3.94847,-8.5404 -8.85531,-8.5404 z m 0.0383,15.82377 c -4.10181,0 -7.3986,-3.17955 -7.3986,-7.13549 0,-3.95594 3.29679,-7.13548 7.3986,-7.13548 4.10181,0 7.39859,3.21651 7.39859,7.13548 0,3.95594 -3.29678,7.13549 -7.39859,7.13549 z\"\n       inkscape:connector-curvature=\"0\"\n       style=\"fill:#c8ab37;stroke-width:0.264583\" />\n    <path\n       id=\"path21968\"\n       d=\"m 187.62426,259.24896 c -4.98351,0 -9.04699,3.91897 -9.04699,8.72526 0,0 0,0.037 0,0.037 v 0 23.92051 h 13.26381 c 1.64839,0 3.22011,-0.36972 4.83017,-0.99823 v -22.44165 c 0,-0.14789 0,-0.33274 0,-0.48063 0,-4.88023 -4.06348,-8.76223 -9.04699,-8.76223 z m -0.0767,16.00863 c -4.10181,0 -7.39859,-3.17954 -7.39859,-7.13549 0,-3.95594 3.29678,-7.13548 7.39859,-7.13548 4.10181,0 7.3986,3.21651 7.3986,7.13548 0,3.91897 -3.33512,7.13549 -7.3986,7.13549 z\"\n       inkscape:connector-curvature=\"0\"\n       style=\"fill:#c8ab37;stroke-width:0.264583\" />\n    <g\n       transform=\"matrix(0.38334691,0,0,0.36971417,12.051377,141.82775)\"\n       id=\"g23709\"\n       style=\"fill:url(#radialGradient12357);fill-opacity:1;stroke:#d4aa00;stroke-width:0.702803\">\n      <path\n         style=\"fill:url(#radialGradient12353);fill-opacity:1;stroke:#d4aa00;stroke-width:0.702803\"\n         inkscape:connector-curvature=\"0\"\n         d=\"m 0,357.7 v 19.2 c 0,10.8 6.2,20.2 14.4,25.2 v -44.4 z\"\n         id=\"path23711\" />\n      <path\n         style=\"fill:url(#radialGradient12355);fill-opacity:1;stroke:#d4aa00;stroke-width:0.702803\"\n         inkscape:connector-curvature=\"0\"\n         d=\"m 483.6,402 c 8.2,-5 14.4,-14.4 14.4,-25.1 v -19.2 h -14.4 z\"\n         id=\"path23713\" />\n    </g>\n    <rect\n       style=\"fill:url(#radialGradient12359);fill-opacity:1;stroke:#d4aa00;stroke-width:0.264583\"\n       x=\"37.620613\"\n       y=\"273.7048\"\n       width=\"3.5267916\"\n       height=\"18.226908\"\n       id=\"rect23715\" />\n    <path\n       style=\"fill:#d3b12c;fill-opacity:1;stroke:url(#linearGradient10688);stroke-width:0.3;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n       inkscape:connector-curvature=\"0\"\n       d=\"m 65.374937,259.13805 c -4.90685,0 -8.47197,3.80806 -8.85532,8.5404 v 24.25325 h 17.71063 v -24.25325 c 0,-4.69537 -3.94847,-8.5404 -8.85531,-8.5404 z\"\n       id=\"path23751\"\n       sodipodi:nodetypes=\"scccss\" />\n    <path\n       style=\"fill:url(#linearGradient10690);fill-opacity:1;stroke:url(#linearGradient10692);stroke-width:0.3;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n       inkscape:connector-curvature=\"0\"\n       d=\"m 107.50476,259.13805 c -4.90684,0 -8.471973,3.80806 -8.855313,8.5404 v 24.25325 h 17.710623 v -24.25325 c 0,-4.69537 -3.94847,-8.5404 -8.85531,-8.5404 z\"\n       id=\"path23753\"\n       sodipodi:nodetypes=\"scccss\" />\n    <path\n       style=\"fill:url(#linearGradient10694);fill-opacity:1;stroke:url(#linearGradient10696);stroke-width:0.3;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n       inkscape:connector-curvature=\"0\"\n       d=\"m 150.01793,259.13805 c -4.90684,0 -8.47196,3.80806 -8.85531,8.5404 v 24.25325 h 17.71062 v -24.25325 c 0,-4.69537 -3.94847,-8.5404 -8.85531,-8.5404 z\"\n       id=\"path23755\"\n       sodipodi:nodetypes=\"scccss\" />\n    <path\n       style=\"fill:url(#linearGradient10716);fill-opacity:1;stroke:url(#linearGradient10698);stroke-width:0.3;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n       inkscape:connector-curvature=\"0\"\n       d=\"m 187.62426,259.24896 c -4.98351,0 -9.04699,3.91897 -9.04699,8.72526 v 0.037 0 23.92051 h 13.26381 c 1.64839,0 3.22011,-0.36972 4.83017,-0.99823 v -22.44165 -0.48063 c 0,-4.88023 -4.06348,-8.76223 -9.04699,-8.76223 z\"\n       id=\"path23757\"\n       sodipodi:nodetypes=\"sscccsccsss\" />\n    <path\n       inkscape:connector-curvature=\"0\"\n       id=\"path10804\"\n       d=\"m 27.489254,259.1379 c -4.90685,0 -8.471924,3.80822 -8.855274,8.54056 v 22.87974 c 1.708302,0.87557 3.655595,1.37357 5.722648,1.37357 h 11.987899 v -24.25331 c 0,-4.69537 -3.948433,-8.54056 -8.855273,-8.54056 z\"\n       style=\"fill:url(#linearGradient10806);fill-opacity:1;stroke:url(#linearGradient10808);stroke-width:0.3;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n       sodipodi:nodetypes=\"sccscss\" />\n    <g\n       transform=\"matrix(0.38334691,0,0,0.36971417,12.051377,141.82775)\"\n       id=\"g21980\"\n       style=\"stroke-width:0.702803\">\n      <g\n         id=\"g21982\"\n         style=\"stroke-width:0.702803\">\n        <path\n           inkscape:connector-curvature=\"0\"\n           d=\"m 35.9,376.4 c 0,-2.8 2.1,-5.1 5.5,-5.1 3.3,0 5.5,2.4 5.5,5.1 v 4.7 c 0,2.8 -2.2,5.1 -5.5,5.1 -3.3,0 -5.5,-2.4 -5.5,-5.1 z m 7.6,0 c 0,-1.3 -0.8,-2.3 -2.2,-2.3 -1.3,0 -2.1,1.1 -2.1,2.3 v 4.7 c 0,1.2 0.8,2.3 2.1,2.3 1.3,0 2.2,-1.1 2.2,-2.3 z\"\n           id=\"path21984\"\n           style=\"stroke-width:0.702803\" />\n      </g>\n    </g>\n    <g\n       transform=\"matrix(0.38334691,0,0,0.36971417,12.051377,141.82775)\"\n       id=\"g21986\"\n       style=\"stroke-width:0.702803\">\n      <g\n         id=\"g21988\"\n         style=\"stroke-width:0.702803\">\n        <path\n           inkscape:connector-curvature=\"0\"\n           d=\"m 136.5,374.1 c 2.8,0 3.4,-0.8 3.4,-2.5 h 2.9 v 14.3 h -3.4 v -9.5 h -3 v -2.3 z\"\n           id=\"path21990\"\n           style=\"stroke-width:0.702803\" />\n      </g>\n    </g>\n    <g\n       transform=\"matrix(0.38334691,0,0,0.36971417,12.051377,141.82775)\"\n       id=\"g21992\"\n       style=\"stroke-width:0.702803\">\n      <g\n         id=\"g21994\"\n         style=\"stroke-width:0.702803\">\n        <path\n           inkscape:connector-curvature=\"0\"\n           d=\"m 248.9,378.5 c 1.7,-1 3,-1.7 3,-3.1 0,-1.1 -0.7,-1.6 -1.6,-1.6 -1,0 -1.8,0.6 -1.8,2.1 h -3.3 c 0,-2.6 1.8,-4.6 5.1,-4.6 2.6,0 4.9,1.3 4.9,4.3 0,2.4 -2.3,3.9 -3.8,4.7 -2,1.3 -2.5,1.8 -2.5,2.9 h 6.1 v 2.7 h -10 c 0.1,-4.7 1.7,-6 3.9,-7.4 z\"\n           id=\"path21996\"\n           style=\"stroke-width:0.702803\" />\n      </g>\n    </g>\n    <g\n       transform=\"matrix(0.38334691,0,0,0.36971417,12.051377,141.82775)\"\n       id=\"g22134\"\n       style=\"stroke-width:0.702803\">\n      <path\n         inkscape:connector-curvature=\"0\"\n         d=\"m 352.1,381.1 c 0,1.6 0.9,2.5 2.2,2.5 1.2,0 1.9,-0.9 1.9,-1.9 0,-1.2 -0.6,-2 -2.1,-2 h -1.3 v -2.6 h 1.3 c 1.5,0 1.9,-0.7 1.9,-1.8 0,-1.1 -0.7,-1.6 -1.6,-1.6 -1.4,0 -1.8,0.8 -1.8,2.1 h -3.3 c 0,-2.4 1.5,-4.6 5.1,-4.6 2.6,0 5,1.3 5,4 0,1.6 -1,2.8 -2.1,3.2 1.3,0.5 2.3,1.6 2.3,3.5 0,2.7 -2.4,4.3 -5.2,4.3 -3.5,0 -5.5,-2.1 -5.5,-5.1 z\"\n         id=\"path22136\"\n         style=\"stroke-width:0.702803\" />\n      <path\n         inkscape:connector-curvature=\"0\"\n         d=\"m 368.5,385.9 h -3.1 l -5.1,-14.3 h 3.5 l 3.1,10.1 3.1,-10.1 h 3.6 z\"\n         id=\"path22138\"\n         style=\"stroke-width:0.702803\" />\n    </g>\n    <g\n       transform=\"matrix(0.38334691,0,0,0.36971417,12.051377,141.82775)\"\n       id=\"g22140\"\n       style=\"stroke-width:0.702803\">\n      <g\n         id=\"g22142\"\n         style=\"stroke-width:0.702803\">\n        <path\n           inkscape:connector-curvature=\"0\"\n           d=\"m 444.4,378.3 h 7.4 v 2.5 h -1.5 c -0.6,3.3 -3,5.5 -7.1,5.5 -4.8,0 -7.5,-3.5 -7.5,-7.5 0,-3.9 2.8,-7.5 7.5,-7.5 3.8,0 6.4,2.3 6.6,5 h -3.5 c -0.2,-1.1 -1.4,-2.2 -3.1,-2.2 -2.7,0 -4.1,2.3 -4.1,4.7 0,2.5 1.4,4.7 4.4,4.7 2,0 3.2,-1.2 3.4,-2.7 h -2.5 z\"\n           id=\"path22144\"\n           style=\"stroke-width:0.702803\" />\n      </g>\n    </g>\n    <g\n       transform=\"matrix(0.38334691,0,0,0.36971417,12.051377,141.82775)\"\n       id=\"g22146\"\n       style=\"stroke-width:0.702803\">\n      <g\n         id=\"g22148\"\n         style=\"stroke-width:0.702803\">\n        <path\n           inkscape:connector-curvature=\"0\"\n           d=\"m 461.4,380.9 v -9.3 h 3.3 v 14.3 h -3.5 l -5.2,-9.2 v 9.2 h -3.3 v -14.3 h 3.5 z\"\n           id=\"path22150\"\n           style=\"stroke-width:0.702803\" />\n        <path\n           inkscape:connector-curvature=\"0\"\n           d=\"m 472.7,371.6 c 4.8,0 7.5,3.5 7.5,7.2 0,3.7 -2.7,7.2 -7.5,7.2 h -5.3 v -14.3 h 5.3 z m -1.9,2.8 v 8.6 h 1.8 c 2.7,0 4.2,-2.1 4.2,-4.3 0,-2.2 -1.6,-4.3 -4.2,-4.3 z\"\n           id=\"path22152\"\n           style=\"stroke-width:0.702803\" />\n      </g>\n    </g>\n    <g\n       style=\"fill:none;stroke:none;stroke-width:0.702803\"\n       id=\"g23793\"\n       transform=\"matrix(0.38334691,0,0,0.36971417,12.051377,141.82775)\">\n      <g\n         style=\"fill:none;stroke:none;stroke-width:0.702803\"\n         id=\"g23795\">\n        <path\n           style=\"fill:none;stroke:none;stroke-width:0.702803\"\n           id=\"path23797\"\n           d=\"m 35.9,376.4 c 0,-2.8 2.1,-5.1 5.5,-5.1 3.3,0 5.5,2.4 5.5,5.1 v 4.7 c 0,2.8 -2.2,5.1 -5.5,5.1 -3.3,0 -5.5,-2.4 -5.5,-5.1 z m 7.6,0 c 0,-1.3 -0.8,-2.3 -2.2,-2.3 -1.3,0 -2.1,1.1 -2.1,2.3 v 4.7 c 0,1.2 0.8,2.3 2.1,2.3 1.3,0 2.2,-1.1 2.2,-2.3 z\"\n           inkscape:connector-curvature=\"0\" />\n      </g>\n    </g>\n    <g\n       style=\"fill:none;stroke:none;stroke-width:0.702803\"\n       id=\"g23799\"\n       transform=\"matrix(0.38334691,0,0,0.36971417,12.051377,141.82775)\">\n      <g\n         style=\"fill:none;stroke:none;stroke-width:0.702803\"\n         id=\"g23801\">\n        <path\n           style=\"fill:none;stroke:none;stroke-width:0.702803\"\n           id=\"path23803\"\n           d=\"m 136.5,374.1 c 2.8,0 3.4,-0.8 3.4,-2.5 h 2.9 v 14.3 h -3.4 v -9.5 h -3 v -2.3 z\"\n           inkscape:connector-curvature=\"0\" />\n      </g>\n    </g>\n    <g\n       style=\"fill:none;stroke:none;stroke-width:0.702803\"\n       id=\"g23805\"\n       transform=\"matrix(0.38334691,0,0,0.36971417,12.051377,141.82775)\">\n      <g\n         style=\"fill:none;stroke:none;stroke-width:0.702803\"\n         id=\"g23807\">\n        <path\n           style=\"fill:none;stroke:none;stroke-width:0.702803\"\n           id=\"path23809\"\n           d=\"m 248.9,378.5 c 1.7,-1 3,-1.7 3,-3.1 0,-1.1 -0.7,-1.6 -1.6,-1.6 -1,0 -1.8,0.6 -1.8,2.1 h -3.3 c 0,-2.6 1.8,-4.6 5.1,-4.6 2.6,0 4.9,1.3 4.9,4.3 0,2.4 -2.3,3.9 -3.8,4.7 -2,1.3 -2.5,1.8 -2.5,2.9 h 6.1 v 2.7 h -10 c 0.1,-4.7 1.7,-6 3.9,-7.4 z\"\n           inkscape:connector-curvature=\"0\" />\n      </g>\n    </g>\n    <g\n       style=\"fill:none;stroke:none;stroke-width:0.702803\"\n       id=\"g23811\"\n       transform=\"matrix(0.38334691,0,0,0.36971417,12.051377,141.82775)\">\n      <path\n         style=\"fill:none;stroke:none;stroke-width:0.702803\"\n         id=\"path23813\"\n         d=\"m 352.1,381.1 c 0,1.6 0.9,2.5 2.2,2.5 1.2,0 1.9,-0.9 1.9,-1.9 0,-1.2 -0.6,-2 -2.1,-2 h -1.3 v -2.6 h 1.3 c 1.5,0 1.9,-0.7 1.9,-1.8 0,-1.1 -0.7,-1.6 -1.6,-1.6 -1.4,0 -1.8,0.8 -1.8,2.1 h -3.3 c 0,-2.4 1.5,-4.6 5.1,-4.6 2.6,0 5,1.3 5,4 0,1.6 -1,2.8 -2.1,3.2 1.3,0.5 2.3,1.6 2.3,3.5 0,2.7 -2.4,4.3 -5.2,4.3 -3.5,0 -5.5,-2.1 -5.5,-5.1 z\"\n         inkscape:connector-curvature=\"0\" />\n      <path\n         style=\"fill:none;stroke:none;stroke-width:0.702803\"\n         id=\"path23815\"\n         d=\"m 368.5,385.9 h -3.1 l -5.1,-14.3 h 3.5 l 3.1,10.1 3.1,-10.1 h 3.6 z\"\n         inkscape:connector-curvature=\"0\" />\n    </g>\n    <g\n       style=\"fill:none;stroke:none;stroke-width:0.702803\"\n       id=\"g23817\"\n       transform=\"matrix(0.38334691,0,0,0.36971417,12.051377,141.82775)\">\n      <g\n         style=\"fill:none;stroke:none;stroke-width:0.702803\"\n         id=\"g23819\">\n        <path\n           style=\"fill:none;stroke:none;stroke-width:0.702803\"\n           id=\"path23821\"\n           d=\"m 444.4,378.3 h 7.4 v 2.5 h -1.5 c -0.6,3.3 -3,5.5 -7.1,5.5 -4.8,0 -7.5,-3.5 -7.5,-7.5 0,-3.9 2.8,-7.5 7.5,-7.5 3.8,0 6.4,2.3 6.6,5 h -3.5 c -0.2,-1.1 -1.4,-2.2 -3.1,-2.2 -2.7,0 -4.1,2.3 -4.1,4.7 0,2.5 1.4,4.7 4.4,4.7 2,0 3.2,-1.2 3.4,-2.7 h -2.5 z\"\n           inkscape:connector-curvature=\"0\" />\n      </g>\n    </g>\n    <g\n       style=\"fill:none;stroke:none;stroke-width:0.702803\"\n       id=\"g23823\"\n       transform=\"matrix(0.38334691,0,0,0.36971417,12.051377,141.82775)\">\n      <g\n         style=\"fill:none;stroke:none;stroke-width:0.702803\"\n         id=\"g23825\">\n        <path\n           style=\"fill:none;stroke:none;stroke-width:0.702803\"\n           id=\"path23827\"\n           d=\"m 461.4,380.9 v -9.3 h 3.3 v 14.3 h -3.5 l -5.2,-9.2 v 9.2 h -3.3 v -14.3 h 3.5 z\"\n           inkscape:connector-curvature=\"0\" />\n        <path\n           style=\"fill:none;stroke:none;stroke-width:0.702803\"\n           id=\"path23829\"\n           d=\"m 472.7,371.6 c 4.8,0 7.5,3.5 7.5,7.2 0,3.7 -2.7,7.2 -7.5,7.2 h -5.3 v -14.3 h 5.3 z m -1.9,2.8 v 8.6 h 1.8 c 2.7,0 4.2,-2.1 4.2,-4.3 0,-2.2 -1.6,-4.3 -4.2,-4.3 z\"\n           inkscape:connector-curvature=\"0\" />\n      </g>\n    </g>\n    <g\n       transform=\"matrix(0.38334691,0,0,0.36971417,12.067657,141.84403)\"\n       id=\"g23945\"\n       style=\"fill:none;stroke:url(#linearGradient24435);stroke-width:0.351401;stroke-miterlimit:4;stroke-dasharray:none\">\n      <g\n         id=\"g23947\"\n         style=\"fill:none;stroke:url(#linearGradient10702);stroke-width:0.351401;stroke-miterlimit:4;stroke-dasharray:none\">\n        <path\n           inkscape:connector-curvature=\"0\"\n           d=\"m 35.9,376.4 c 0,-2.8 2.1,-5.1 5.5,-5.1 3.3,0 5.5,2.4 5.5,5.1 v 4.7 c 0,2.8 -2.2,5.1 -5.5,5.1 -3.3,0 -5.5,-2.4 -5.5,-5.1 z m 7.6,0 c 0,-1.3 -0.8,-2.3 -2.2,-2.3 -1.3,0 -2.1,1.1 -2.1,2.3 v 4.7 c 0,1.2 0.8,2.3 2.1,2.3 1.3,0 2.2,-1.1 2.2,-2.3 z\"\n           id=\"path23949\"\n           style=\"fill:none;stroke:url(#linearGradient10700);stroke-width:0.351401;stroke-miterlimit:4;stroke-dasharray:none\" />\n      </g>\n    </g>\n    <g\n       transform=\"matrix(0.38334691,0,0,0.36971417,12.106977,141.85385)\"\n       id=\"g23951\"\n       style=\"fill:none;stroke:url(#linearGradient24423);stroke-width:0.351401;stroke-miterlimit:4;stroke-dasharray:none\">\n      <g\n         id=\"g23953\"\n         style=\"fill:none;stroke:url(#linearGradient10707);stroke-width:0.351401;stroke-miterlimit:4;stroke-dasharray:none\">\n        <path\n           inkscape:connector-curvature=\"0\"\n           d=\"m 136.5,374.1 c 2.8,0 3.4,-0.8 3.4,-2.5 h 2.9 v 14.3 h -3.4 v -9.5 h -3 v -2.3 z\"\n           id=\"path23955\"\n           style=\"fill:none;stroke:url(#linearGradient10705);stroke-width:0.351401;stroke-miterlimit:4;stroke-dasharray:none\" />\n      </g>\n    </g>\n    <g\n       transform=\"matrix(0.38334691,0,0,0.36971417,12.106977,141.88333)\"\n       id=\"g23957\"\n       style=\"fill:none;stroke:url(#linearGradient24425);stroke-width:0.351401;stroke-miterlimit:4;stroke-dasharray:none\">\n      <g\n         id=\"g23959\"\n         style=\"fill:none;stroke:url(#linearGradient10711);stroke-width:0.351401;stroke-miterlimit:4;stroke-dasharray:none\">\n        <path\n           inkscape:connector-curvature=\"0\"\n           d=\"m 248.9,378.5 c 1.7,-1 3,-1.7 3,-3.1 0,-1.1 -0.7,-1.6 -1.6,-1.6 -1,0 -1.8,0.6 -1.8,2.1 h -3.3 c 0,-2.6 1.8,-4.6 5.1,-4.6 2.6,0 4.9,1.3 4.9,4.3 0,2.4 -2.3,3.9 -3.8,4.7 -2,1.3 -2.5,1.8 -2.5,2.9 h 6.1 v 2.7 h -10 c 0.1,-4.7 1.7,-6 3.9,-7.4 z\"\n           id=\"path23961\"\n           style=\"fill:none;stroke:url(#linearGradient10709);stroke-width:0.351401;stroke-miterlimit:4;stroke-dasharray:none\" />\n      </g>\n    </g>\n    <g\n       transform=\"matrix(0.38334691,0,0,0.36971417,12.067657,141.87182)\"\n       id=\"g23963\"\n       style=\"fill:none;stroke:url(#linearGradient24445);stroke-width:0.351401;stroke-miterlimit:4;stroke-dasharray:none\">\n      <path\n         inkscape:connector-curvature=\"0\"\n         d=\"m 352.1,381.1 c 0,1.6 0.9,2.5 2.2,2.5 1.2,0 1.9,-0.9 1.9,-1.9 0,-1.2 -0.6,-2 -2.1,-2 h -1.3 v -2.6 h 1.3 c 1.5,0 1.9,-0.7 1.9,-1.8 0,-1.1 -0.7,-1.6 -1.6,-1.6 -1.4,0 -1.8,0.8 -1.8,2.1 h -3.3 c 0,-2.4 1.5,-4.6 5.1,-4.6 2.6,0 5,1.3 5,4 0,1.6 -1,2.8 -2.1,3.2 1.3,0.5 2.3,1.6 2.3,3.5 0,2.7 -2.4,4.3 -5.2,4.3 -3.5,0 -5.5,-2.1 -5.5,-5.1 z\"\n         id=\"path23965\"\n         style=\"fill:none;stroke:url(#linearGradient10713);stroke-width:0.351401;stroke-miterlimit:4;stroke-dasharray:none\" />\n      <path\n         inkscape:connector-curvature=\"0\"\n         d=\"m 368.5,385.9 h -3.1 l -5.1,-14.3 h 3.5 l 3.1,10.1 3.1,-10.1 h 3.6 z\"\n         id=\"path23967\"\n         style=\"fill:none;stroke:url(#linearGradient10715);stroke-width:0.351401;stroke-miterlimit:4;stroke-dasharray:none\" />\n    </g>\n    <g\n       transform=\"matrix(0.38334691,0,0,0.36971417,12.067657,141.84403)\"\n       id=\"g23969\"\n       style=\"fill:none;stroke:url(#linearGradient24453);stroke-width:0.351401;stroke-miterlimit:4;stroke-dasharray:none\">\n      <g\n         id=\"g23971\"\n         style=\"fill:none;stroke:url(#linearGradient10719);stroke-width:0.351401;stroke-miterlimit:4;stroke-dasharray:none\">\n        <path\n           inkscape:connector-curvature=\"0\"\n           d=\"m 444.4,378.3 h 7.4 v 2.5 h -1.5 c -0.6,3.3 -3,5.5 -7.1,5.5 -4.8,0 -7.5,-3.5 -7.5,-7.5 0,-3.9 2.8,-7.5 7.5,-7.5 3.8,0 6.4,2.3 6.6,5 h -3.5 c -0.2,-1.1 -1.4,-2.2 -3.1,-2.2 -2.7,0 -4.1,2.3 -4.1,4.7 0,2.5 1.4,4.7 4.4,4.7 2,0 3.2,-1.2 3.4,-2.7 h -2.5 z\"\n           id=\"path23973\"\n           style=\"fill:none;stroke:url(#linearGradient10717);stroke-width:0.351401;stroke-miterlimit:4;stroke-dasharray:none\" />\n      </g>\n    </g>\n    <g\n       transform=\"matrix(0.38334691,0,0,0.36971417,12.067657,141.84403)\"\n       id=\"g23975\"\n       style=\"fill:none;stroke:url(#linearGradient24451);stroke-width:0.351401;stroke-miterlimit:4;stroke-dasharray:none\">\n      <g\n         id=\"g23977\"\n         style=\"fill:none;stroke:url(#linearGradient10725);stroke-width:0.351401;stroke-miterlimit:4;stroke-dasharray:none\">\n        <path\n           inkscape:connector-curvature=\"0\"\n           d=\"m 461.4,380.9 v -9.3 h 3.3 v 14.3 h -3.5 l -5.2,-9.2 v 9.2 h -3.3 v -14.3 h 3.5 z\"\n           id=\"path23979\"\n           style=\"fill:none;stroke:url(#linearGradient10721);stroke-width:0.351401;stroke-miterlimit:4;stroke-dasharray:none\" />\n        <path\n           inkscape:connector-curvature=\"0\"\n           d=\"m 472.7,371.6 c 4.8,0 7.5,3.5 7.5,7.2 0,3.7 -2.7,7.2 -7.5,7.2 h -5.3 v -14.3 h 5.3 z m -1.9,2.8 v 8.6 h 1.8 c 2.7,0 4.2,-2.1 4.2,-4.3 0,-2.2 -1.6,-4.3 -4.2,-4.3 z\"\n           id=\"path23981\"\n           style=\"fill:none;stroke:url(#linearGradient10723);stroke-width:0.351401;stroke-miterlimit:4;stroke-dasharray:none\" />\n      </g>\n    </g>\n    <path\n       id=\"path24345\"\n       d=\"m 107.41267,259.20318 c -4.90684,0 -8.471973,3.80805 -8.855313,8.54039 v 24.25325 h 17.710623 v -24.25325 c 0,-4.69537 -3.94847,-8.54039 -8.85531,-8.54039 z\"\n       inkscape:connector-curvature=\"0\"\n       style=\"fill:none;fill-opacity:1;stroke:#ffdd55;stroke-width:0.264583;stroke-opacity:0\"\n       sodipodi:nodetypes=\"scccss\" />\n    <rect\n       inkscape:tile-y0=\"131.79218\"\n       inkscape:tile-x0=\"25.553943\"\n       id=\"use8524\"\n       height=\"18.226908\"\n       width=\"3.5267913\"\n       y=\"273.76993\"\n       x=\"42.235485\"\n       style=\"fill:#d3b12c;fill-opacity:1;stroke:#d4aa00;stroke-width:0.3;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n    <rect\n       inkscape:tile-y0=\"131.79218\"\n       inkscape:tile-x0=\"25.553943\"\n       id=\"use8526\"\n       height=\"18.226908\"\n       width=\"3.5267913\"\n       y=\"273.76993\"\n       x=\"46.942429\"\n       style=\"fill:#d3b12c;fill-opacity:1;stroke:#d4aa00;stroke-width:0.3;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n    <rect\n       inkscape:tile-y0=\"131.79218\"\n       inkscape:tile-x0=\"25.553943\"\n       id=\"use8528\"\n       height=\"18.226908\"\n       width=\"3.5267913\"\n       y=\"273.76993\"\n       x=\"51.649387\"\n       style=\"fill:#d3b12c;fill-opacity:1;stroke:#d4aa00;stroke-width:0.3;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n    <rect\n       inkscape:tile-y0=\"131.79218\"\n       inkscape:tile-x0=\"25.553943\"\n       id=\"use8538\"\n       height=\"18.226908\"\n       width=\"3.5267913\"\n       y=\"273.76993\"\n       x=\"75.184151\"\n       style=\"fill:#d3b12c;fill-opacity:1;stroke:#d4aa00;stroke-width:0.3;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n    <rect\n       inkscape:tile-y0=\"131.79218\"\n       inkscape:tile-x0=\"25.553943\"\n       id=\"use8540\"\n       height=\"18.226908\"\n       width=\"3.5267913\"\n       y=\"273.76993\"\n       x=\"79.891106\"\n       style=\"fill:#d3b12c;fill-opacity:1;stroke:#d4aa00;stroke-width:0.3;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n    <rect\n       inkscape:tile-y0=\"131.79218\"\n       inkscape:tile-x0=\"25.553943\"\n       id=\"use8542\"\n       height=\"18.226908\"\n       width=\"3.5267913\"\n       y=\"273.76993\"\n       x=\"84.598061\"\n       style=\"fill:#d3b12c;fill-opacity:1;stroke:#d4aa00;stroke-width:0.3;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n    <rect\n       inkscape:tile-y0=\"131.79218\"\n       inkscape:tile-x0=\"25.553943\"\n       id=\"use8544\"\n       height=\"18.226908\"\n       width=\"3.5267913\"\n       y=\"273.76993\"\n       x=\"89.305008\"\n       style=\"fill:#d3b12c;fill-opacity:1;stroke:#d4aa00;stroke-width:0.3;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n    <rect\n       inkscape:tile-y0=\"131.79218\"\n       inkscape:tile-x0=\"25.553943\"\n       id=\"use8546\"\n       height=\"18.226908\"\n       width=\"3.5267913\"\n       y=\"273.76993\"\n       x=\"94.011963\"\n       style=\"fill:#d3b12c;fill-opacity:1;stroke:#d4aa00;stroke-width:0.3;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n    <rect\n       inkscape:tile-y0=\"131.79218\"\n       inkscape:tile-x0=\"25.553943\"\n       id=\"use8556\"\n       height=\"18.226908\"\n       width=\"3.5267913\"\n       y=\"273.76993\"\n       x=\"117.54673\"\n       style=\"fill:#d3b12c;fill-opacity:1;stroke:#d4aa00;stroke-width:0.3;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n    <rect\n       inkscape:tile-y0=\"131.79218\"\n       inkscape:tile-x0=\"25.553943\"\n       id=\"use8558\"\n       height=\"18.226908\"\n       width=\"3.5267913\"\n       y=\"273.76993\"\n       x=\"122.25368\"\n       style=\"fill:#d3b12c;fill-opacity:1;stroke:#d4aa00;stroke-width:0.3;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n    <rect\n       inkscape:tile-y0=\"131.79218\"\n       inkscape:tile-x0=\"25.553943\"\n       id=\"use8560\"\n       height=\"18.226908\"\n       width=\"3.5267913\"\n       y=\"273.76993\"\n       x=\"126.96064\"\n       style=\"fill:#d3b12c;fill-opacity:1;stroke:#d4aa00;stroke-width:0.3;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n    <rect\n       inkscape:tile-y0=\"131.79218\"\n       inkscape:tile-x0=\"25.553943\"\n       id=\"use8562\"\n       height=\"18.226908\"\n       width=\"3.5267913\"\n       y=\"273.76993\"\n       x=\"131.66759\"\n       style=\"fill:#d3b12c;fill-opacity:1;stroke:#d4aa00;stroke-width:0.3;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n    <rect\n       inkscape:tile-y0=\"131.79218\"\n       inkscape:tile-x0=\"25.553943\"\n       id=\"use8564\"\n       height=\"18.226908\"\n       width=\"3.5267913\"\n       y=\"273.76993\"\n       x=\"136.37454\"\n       style=\"fill:#d3b12c;fill-opacity:1;stroke:#d4aa00;stroke-width:0.3;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n    <rect\n       inkscape:tile-y0=\"131.79218\"\n       inkscape:tile-x0=\"25.553943\"\n       id=\"use8574\"\n       height=\"18.226908\"\n       width=\"3.5267913\"\n       y=\"273.76993\"\n       x=\"159.90933\"\n       style=\"fill:#d3b12c;fill-opacity:1;stroke:#d4aa00;stroke-width:0.3;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n    <rect\n       inkscape:tile-y0=\"131.79218\"\n       inkscape:tile-x0=\"25.553943\"\n       id=\"use8576\"\n       height=\"18.226908\"\n       width=\"3.5267913\"\n       y=\"273.76993\"\n       x=\"164.61627\"\n       style=\"fill:#d3b12c;fill-opacity:1;stroke:#d4aa00;stroke-width:0.3;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n    <rect\n       inkscape:tile-y0=\"131.79218\"\n       inkscape:tile-x0=\"25.553943\"\n       id=\"use8578\"\n       height=\"18.226908\"\n       width=\"3.5267913\"\n       y=\"273.76993\"\n       x=\"169.32321\"\n       style=\"fill:#d3b12c;fill-opacity:1;stroke:#d4aa00;stroke-width:0.3;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n    <rect\n       inkscape:tile-y0=\"131.79218\"\n       inkscape:tile-x0=\"25.553943\"\n       id=\"use8580\"\n       height=\"18.226908\"\n       width=\"3.5267913\"\n       y=\"273.76993\"\n       x=\"174.03018\"\n       style=\"fill:#d3b12c;fill-opacity:1;stroke:#d4aa00;stroke-width:0.3;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n    <circle\n       style=\"fill:#ffffff;fill-opacity:1;stroke:none;stroke-width:1.565;stroke-dasharray:none;stroke-opacity:1\"\n       id=\"path32605\"\n       cx=\"187.62427\"\n       cy=\"268.34573\"\n       r=\"7.2059999\" />\n    <circle\n       style=\"fill:#ffffff;fill-opacity:1;stroke:none;stroke-width:1.565;stroke-dasharray:none;stroke-opacity:1\"\n       id=\"path32605-2\"\n       cx=\"149.92584\"\n       cy=\"268.34573\"\n       r=\"7.2059999\" />\n    <circle\n       style=\"fill:#ffffff;fill-opacity:1;stroke:none;stroke-width:1.565;stroke-dasharray:none;stroke-opacity:1\"\n       id=\"circle32792\"\n       cx=\"107.50476\"\n       cy=\"268.34573\"\n       r=\"7.2059999\" />\n    <circle\n       style=\"fill:#ffffff;fill-opacity:1;stroke:none;stroke-width:1.565;stroke-dasharray:none;stroke-opacity:1\"\n       id=\"circle32794\"\n       cx=\"65.374931\"\n       cy=\"268.34573\"\n       r=\"7.2059999\" />\n    <circle\n       style=\"fill:#ffffff;fill-opacity:1;stroke:none;stroke-width:1.565;stroke-dasharray:none;stroke-opacity:1\"\n       id=\"circle32796\"\n       cx=\"27.464203\"\n       cy=\"268.34573\"\n       r=\"7.2059999\" />\n    <g\n       id=\"g442\"\n       transform=\"matrix(0.32144298,0,0,0.3264495,138.91049,9.1327722)\"\n       style=\"isolation:isolate\" />\n    <g\n       id=\"g820\">\n      <text\n         style=\"font-style:normal;font-weight:400;font-size:2.75197px;font-family:'Open Sans';isolation:isolate;fill:#ffffff;fill-opacity:1;stroke:#ffffff;stroke-width:0.0263466\"\n         id=\"tspan729\"\n         transform=\"scale(0.99556842,1.0044513)\"\n         x=\"140.26192\"\n         y=\"10.449902\">X</text>\n      <g\n         id=\"g445\"\n         transform=\"matrix(0.35050324,0,0,0.34542694,133.25736,14.111258)\"\n         style=\"isolation:isolate\">\n        <text\n           style=\"font-style:normal;font-weight:400;font-size:8px;font-family:'Open Sans';fill:#ffffff;fill-opacity:1;stroke:#ffffff;stroke-width:0.07737\"\n           id=\"tspan733\"\n           transform=\"translate(0.15473,8.70551)\">Y</text>\n      </g>\n      <g\n         id=\"g448\"\n         transform=\"matrix(0.35812772,0,0,0.3067708,139.45378,14.113361)\"\n         style=\"isolation:isolate\">\n        <text\n           style=\"font-style:normal;font-weight:400;font-size:9px;font-family:'Open Sans';fill:#ffffff;fill-opacity:1;stroke:#ffffff;stroke-width:0.08656\"\n           id=\"tspan737\"\n           transform=\"translate(0.17312,9.79275)\">Z</text>\n      </g>\n      <path\n         stroke-miterlimit=\"4\"\n         stroke-linecap=\"butt\"\n         stroke-linejoin=\"miter\"\n         stroke=\"#f9f9f9\"\n         stroke-width=\"0.323938\"\n         vector-effect=\"non-scaling-stroke\"\n         fill=\"none\"\n         id=\"path741\"\n         d=\"M 138.69239,9.9400725 V 14.04927 h -4.55404\"\n         style=\"isolation:isolate;stroke-width:0.345177;stroke-miterlimit:3;stroke-dasharray:none;marker-start:url(#marker33752);marker-end:url(#TriangleStart)\" />\n      <circle\n         stroke-miterlimit=\"4\"\n         stroke-linecap=\"round\"\n         stroke-linejoin=\"round\"\n         stroke=\"#f9f9f9\"\n         stroke-width=\"0.352032\"\n         fill=\"none\"\n         id=\"ellipse743\"\n         cy=\"-138.66948\"\n         cx=\"14.043882\"\n         vector-effect=\"non-scaling-stroke\"\n         transform=\"rotate(90)\"\n         style=\"isolation:isolate\"\n         r=\"0.84673113\" />\n    </g>\n    <g\n       id=\"g2209\">\n      <path\n         id=\"path21964-25\"\n         style=\"fill:#c8ab37;stroke-width:0.264583\"\n         d=\"m 204.67439,36.012535 -8.89356,4.139106 c -4.2569,1.981201 -6.07664,7.183036 -4.00621,11.631666 2.07043,4.448629 7.02706,6.074241 11.47922,4.424982 l 9.19697,-4.280619 A 104.49223,110.69444 88.07818 0 0 204.67439,36.012535 Z M 199.678,46.01044 a 2,2 0 0 1 2.04949,1.614762 2,2 0 0 1 -1.57896,2.346121 2,2 0 0 1 -2.34663,-1.578939 2,2 0 0 1 1.57893,-2.346637 2,2 0 0 1 0.29717,-0.03531 z\" />\n      <path\n         id=\"path21964-25-5\"\n         style=\"fill:#c8ab37;stroke-width:0.264583\"\n         d=\"m 192.06834,18.534134 -7.92032,5.531298 c -3.8496,2.688324 -4.7414,8.126843 -1.932,12.149807 2.80941,4.022967 7.97272,4.765714 12.07211,2.370512 l 8.37855,-5.85121 A 104.49223,110.69444 89.416217 0 0 192.06834,18.534134 Z m -2.62241,10.580112 a 2,2 0 0 1 1.85284,1.281884 2,2 0 0 1 -1.14885,2.58481 2,2 0 0 1 -2.58481,-1.149363 2,2 0 0 1 1.14937,-2.584297 2,2 0 0 1 0.73145,-0.133034 z\" />\n      <path\n         id=\"path21964-25-9\"\n         style=\"fill:#c8ab37;stroke-width:0.264583\"\n         d=\"m 176.56206,3.7777803 -6.55901,6.3590827 c -3.37111,3.268345 -3.38359,8.779621 0.0323,12.302552 3.41553,3.522933 8.63158,3.431817 12.29607,0.412963 l 7.28444,-7.062397 A 110.69444,104.49223 0.36870351 0 0 176.56206,3.7777803 Z m -0.22501,10.4735817 a 2,2 0 0 1 1.73564,0.993559 2,2 0 0 1 -0.72195,2.734779 2,2 0 0 1 -2.73479,-0.721448 2,2 0 0 1 0.72196,-2.734778 2,2 0 0 1 0.99914,-0.272112 z\" />\n      <path\n         id=\"path21964-25-1\"\n         style=\"fill:#c8ab37;stroke-width:0.264583\"\n         d=\"m 158.19497,-7.9377666 -4.84668,7.03236611 C 150.68391,2.9608033 151.75344,8.3677 155.79378,11.152071 c 4.04032,2.784371 9.13681,1.671846 12.13781,-2.0072731 l 5.38824,-7.818411 a 110.69444,104.49223 0.71228283 0 0 -15.12486,-9.2641535 z m 2.69283,9.7881583 a 2,2 0 0 1 1.37618,0.6703499 2,2 0 0 1 -0.17153,2.8232363 2,2 0 0 1 -2.82325,-0.1710191 2,2 0 0 1 0.17154,-2.8232363 2,2 0 0 1 1.44706,-0.4993308 z\" />\n      <path\n         id=\"path15626\"\n         style=\"fill:#c8ab37;stroke-width:0.264583\"\n         d=\"m 158.19497,-7.9377666 -4.84668,7.03236611 C 150.68391,2.9608033 151.75344,8.3677 155.79378,11.152071 c 4.04032,2.784371 9.13681,1.671846 12.13781,-2.0072731 l 5.38824,-7.818411 a 110.69444,104.49223 0.71228283 0 0 -15.12486,-9.2641535 z m 2.69283,9.7881583 a 2,2 0 0 1 1.37618,0.6703499 2,2 0 0 1 -0.17153,2.8232363 2,2 0 0 1 -2.82325,-0.1710191 2,2 0 0 1 0.17154,-2.8232363 2,2 0 0 1 1.44706,-0.4993308 z\" />\n      <circle\n         style=\"fill:#ffffff;stroke-width:0.264583\"\n         id=\"path2067\"\n         cx=\"160.7636\"\n         cy=\"3.8460469\"\n         r=\"2\" />\n      <circle\n         style=\"fill:#ffffff;stroke-width:0.264583\"\n         id=\"circle2121\"\n         cx=\"176.33943\"\n         cy=\"16.250622\"\n         r=\"2\" />\n      <circle\n         style=\"fill:#ffffff;stroke-width:0.264583\"\n         id=\"circle2123\"\n         cx=\"189.4335\"\n         cy=\"31.111546\"\n         r=\"2\" />\n      <circle\n         style=\"fill:#ffffff;stroke-width:0.264583\"\n         id=\"circle2125\"\n         cx=\"199.76332\"\n         cy=\"48.008427\"\n         r=\"2\" />\n    </g>\n    <g\n       id=\"g2178\">\n      <path\n         id=\"path15635\"\n         style=\"fill:#c8ab37;stroke-width:0.264583\"\n         d=\"m 10.788973,35.749107 8.950774,4.013881 c 4.284286,1.921262 6.176853,7.097046 4.169061,11.574295 -2.007791,4.477248 -6.941118,6.172265 -11.415986,4.585652 L 3.236681,51.771813 a 110.69444,104.49223 1.1176716 0 1 7.552292,-16.022706 z m 5.136214,9.926798 a 2,2 0 0 0 -2.026626,1.643367 2,2 0 0 0 1.611732,2.32373 2,2 0 0 0 2.324239,-1.611718 2,2 0 0 0 -1.611709,-2.324246 2,2 0 0 0 -0.297636,-0.03114 z\" />\n      <path\n         id=\"path15637\"\n         style=\"fill:#c8ab37;stroke-width:0.264583\"\n         d=\"m 23.309335,18.001498 7.978137,5.447574 c 3.8777,2.647631 4.826729,8.076456 2.059854,12.128785 -2.766884,4.052333 -7.922085,4.849419 -12.046474,2.497525 l -8.43971,-5.762643 A 104.49223,110.69444 89.980332 0 1 23.309335,18.001498 Z m 2.733695,10.551906 a 2,2 0 0 0 -1.839237,1.301327 2,2 0 0 0 1.17601,2.572567 2,2 0 0 0 2.572561,-1.176523 2,2 0 0 0 -1.176524,-2.572048 2,2 0 0 0 -0.73281,-0.125323 z\" />\n      <path\n         id=\"path15639\"\n         style=\"fill:#c8ab37;stroke-width:0.264583\"\n         d=\"m 38.938423,3.277829 6.523995,6.3950001 c 3.353114,3.2868049 3.335333,8.7980669 -0.09985,12.3021889 -3.434821,3.504127 -8.650292,3.384373 -12.298152,0.345444 L 25.818865,15.218175 A 104.49223,110.69444 89.945889 0 1 38.938423,3.277829 Z m 0.1675,10.47466 a 2,2 0 0 0 -1.74107,0.984013 2,2 0 0 0 0.706923,2.738702 2,2 0 0 0 2.738711,-0.706421 2,2 0 0 0 -0.706934,-2.738701 2,2 0 0 0 -0.99763,-0.277593 z\" />\n      <path\n         id=\"path15643\"\n         style=\"fill:#c8ab37;stroke-width:0.264583\"\n         d=\"m 57.317468,-8.2681244 4.813263,7.0552803 c 2.646009,3.8788005 1.55084,9.2805624 -2.502665,12.0457351 -4.053484,2.765172 -9.144639,1.62848 -12.12815,-2.0648351 L 42.148828,0.92417025 a 104.49223,110.69444 89.559538 0 1 15.16864,-9.19229465 z m -2.739236,9.7752729 a 2,2 0 0 0 -1.379344,0.6638136 2,2 0 0 0 0.158134,2.8240183 2,2 0 0 0 2.82403,-0.1576233 2,2 0 0 0 -0.158145,-2.8240183 2,2 0 0 0 -1.444675,-0.5061903 z\" />\n      <circle\n         style=\"fill:#ffffff;stroke-width:0.264583\"\n         id=\"circle2133\"\n         cx=\"-54.758724\"\n         cy=\"3.5572765\"\n         r=\"2\"\n         transform=\"scale(-1,1)\" />\n      <circle\n         style=\"fill:#ffffff;stroke-width:0.264583\"\n         id=\"circle2135\"\n         cx=\"-39.065685\"\n         cy=\"15.752805\"\n         r=\"2\"\n         transform=\"scale(-1,1)\" />\n      <circle\n         style=\"fill:#ffffff;stroke-width:0.264583\"\n         id=\"circle2137\"\n         cx=\"-26.073811\"\n         cy=\"30.550949\"\n         r=\"2\"\n         transform=\"scale(-1,1)\" />\n      <circle\n         style=\"fill:#ffffff;stroke-width:0.264583\"\n         id=\"circle2139\"\n         cx=\"-15.868192\"\n         cy=\"47.673\"\n         r=\"2\"\n         transform=\"scale(-1,1)\" />\n    </g>\n    <rect\n       style=\"fill:none;stroke:#ffffff;stroke-width:0.264583;stroke-opacity:1\"\n       id=\"rect2887\"\n       width=\"27.019096\"\n       height=\"27\"\n       x=\"181.30435\"\n       y=\"112.70005\"\n       transform=\"rotate(45)\" />\n    <text\n       xml:space=\"preserve\"\n       style=\"font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:3.175px;font-family:Ubuntu;-inkscape-font-specification:Ubuntu;fill:none;stroke:#ffffff;stroke-width:0.264583;stroke-opacity:1\"\n       x=\"46.453568\"\n       y=\"206.35785\"\n       id=\"text4112\"><tspan\n         sodipodi:role=\"line\"\n         id=\"tspan4110\"\n         style=\"stroke-width:0.264583\"\n         x=\"46.453568\"\n         y=\"206.35785\">Up</tspan></text>\n    <text\n       xml:space=\"preserve\"\n       style=\"font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:3.175px;font-family:Ubuntu;-inkscape-font-specification:Ubuntu;fill:none;stroke:#ffffff;stroke-width:0.264583;stroke-opacity:1\"\n       x=\"22.353609\"\n       y=\"228.20558\"\n       id=\"text4116\"><tspan\n         sodipodi:role=\"line\"\n         id=\"tspan4114\"\n         style=\"stroke-width:0.264583\"\n         x=\"22.353609\"\n         y=\"228.20558\">Left</tspan></text>\n    <text\n       xml:space=\"preserve\"\n       style=\"font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:3.175px;font-family:Ubuntu;-inkscape-font-specification:Ubuntu;fill:none;stroke:#ffffff;stroke-width:0.264583;stroke-opacity:1\"\n       x=\"68.556328\"\n       y=\"227.92459\"\n       id=\"text4120\"><tspan\n         sodipodi:role=\"line\"\n         id=\"tspan4118\"\n         style=\"stroke-width:0.264583\"\n         x=\"68.556328\"\n         y=\"227.92459\">Right</tspan></text>\n    <text\n       xml:space=\"preserve\"\n       style=\"font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:3.175px;font-family:Ubuntu;-inkscape-font-specification:Ubuntu;fill:none;stroke:#ffffff;stroke-width:0.264583;stroke-opacity:1\"\n       x=\"44.313618\"\n       y=\"248.744\"\n       id=\"text4124\"><tspan\n         sodipodi:role=\"line\"\n         id=\"tspan4122\"\n         style=\"stroke-width:0.264583\"\n         x=\"44.313618\"\n         y=\"248.744\">Down</tspan></text>\n    <text\n       xml:space=\"preserve\"\n       style=\"font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:3.175px;font-family:Ubuntu;-inkscape-font-specification:Ubuntu;fill:none;stroke:#ffffff;stroke-width:0.264583;stroke-opacity:1\"\n       x=\"103.34871\"\n       y=\"243.72841\"\n       id=\"text4811\"><tspan\n         sodipodi:role=\"line\"\n         id=\"tspan4809\"\n         style=\"stroke-width:0.264583\"\n         x=\"103.34871\"\n         y=\"243.72841\">Menu</tspan></text>\n    <text\n       xml:space=\"preserve\"\n       style=\"font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:3.175px;font-family:Ubuntu;-inkscape-font-specification:Ubuntu;fill:none;stroke:#ffffff;stroke-width:0.264583;stroke-opacity:1\"\n       x=\"-23.61199\"\n       y=\"287.42441\"\n       id=\"text4815\"\n       transform=\"rotate(-37.9536)\"><tspan\n         sodipodi:role=\"line\"\n         id=\"tspan4813\"\n         style=\"stroke-width:0.264583\"\n         x=\"-23.61199\"\n         y=\"287.42441\">B</tspan></text>\n    <text\n       xml:space=\"preserve\"\n       style=\"font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:3.175px;font-family:Ubuntu;-inkscape-font-specification:Ubuntu;fill:none;stroke:#ffffff;stroke-width:0.264583;stroke-opacity:1\"\n       x=\"-30.677876\"\n       y=\"285.52975\"\n       id=\"text4819\"\n       transform=\"rotate(-44.114767)\"><tspan\n         sodipodi:role=\"line\"\n         id=\"tspan4817\"\n         style=\"stroke-width:0.264583\"\n         x=\"-30.677876\"\n         y=\"285.52975\">A</tspan></text>\n    <text\n       xml:space=\"preserve\"\n       style=\"font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:3.175px;font-family:Ubuntu;-inkscape-font-specification:Ubuntu;fill:none;stroke:#ffffff;stroke-width:0.264583;stroke-opacity:1\"\n       x=\"101.32783\"\n       y=\"215.95039\"\n       id=\"text4823\"><tspan\n         sodipodi:role=\"line\"\n         id=\"tspan4821\"\n         style=\"stroke-width:0.264583\"\n         x=\"101.32783\"\n         y=\"215.95039\">Led RGB</tspan></text>\n  </g>\n</svg>\n",
            "buffer.cpp": "#include \"pxtbase.h\"\n#include <limits.h>\n\nusing namespace std;\n\n//% indexerGet=BufferMethods::getByte indexerSet=BufferMethods::setByte\nnamespace BufferMethods {\n//%\nuint8_t *getBytes(Buffer buf) {\n    return buf->data;\n}\n\n//%\nint getByte(Buffer buf, int off) {\n    if (buf && 0 <= off && off < buf->length)\n        return buf->data[off];\n    return 0;\n}\n\n//%\nvoid setByte(Buffer buf, int off, int v) {\n    if (buf && 0 <= off && off < buf->length)\n        buf->data[off] = v;\n}\n\n/**\n * Reads an unsigned byte at a particular location\n */\n//%\nint getUint8(Buffer buf, int off) {\n    return getByte(buf, off);\n}\n\n/**\n * Returns false when the buffer can be written to.\n */\n//%\nbool isReadOnly(Buffer buf) {\n    return buf->isReadOnly();\n}\n\n/**\n * Writes an unsigned byte at a particular location\n */\n//%\nvoid setUint8(Buffer buf, int off, int v) {\n    setByte(buf, off, v);\n}\n\nint writeBuffer(Buffer buf, int dstOffset, Buffer src, int srcOffset = 0, int length = -1) {\n    if (length < 0)\n        length = src->length;\n\n    if (srcOffset < 0 || dstOffset < 0 || dstOffset > buf->length)\n        return -1;\n\n    length = pxt::min(src->length - srcOffset, buf->length - dstOffset);\n\n    if (length < 0)\n        return -1;\n\n    if (buf == src) {\n        memmove(buf->data + dstOffset, src->data + srcOffset, length);\n    } else {\n        memcpy(buf->data + dstOffset, src->data + srcOffset, length);\n    }\n\n    return 0;\n}\n\n/**\n * Write a number in specified format in the buffer.\n */\n//%\nvoid setNumber(Buffer buf, NumberFormat format, int offset, TNumber value) {\n    if (offset < 0)\n        return;\n    setNumberCore(buf->data + offset, buf->length - offset, format, value);\n}\n\n/**\n * Read a number in specified format from the buffer.\n */\n//%\nTNumber getNumber(Buffer buf, NumberFormat format, int offset) {\n    if (offset < 0)\n        return fromInt(0);\n    return getNumberCore(buf->data + offset, buf->length - offset, format);\n}\n\n/** Returns the length of a Buffer object. */\n//% property\nint length(Buffer s) {\n    return s->length;\n}\n\n/**\n * Fill (a fragment) of the buffer with given value.\n */\n//%\nvoid fill(Buffer buf, int value, int offset = 0, int length = -1) {\n    if (offset < 0 || offset > buf->length)\n        return; // DEVICE_INVALID_PARAMETER;\n    if (length < 0)\n        length = buf->length;\n    length = pxt::min(length, buf->length - offset);\n    memset(buf->data + offset, value, length);\n}\n\n/**\n * Return a copy of a fragment of a buffer.\n */\n//%\nBuffer slice(Buffer buf, int offset = 0, int length = -1) {\n    offset = pxt::min((int)buf->length, offset);\n    if (length < 0)\n        length = buf->length;\n    length = pxt::min(length, buf->length - offset);\n    return mkBuffer(buf->data + offset, length);\n}\n\n/**\n * Shift buffer left in place, with zero padding.\n * @param offset number of bytes to shift; use negative value to shift right\n * @param start start offset in buffer. Default is 0.\n * @param length number of elements in buffer. If negative, length is set as the buffer length minus\n * start. eg: -1\n */\n//%\nvoid shift(Buffer buf, int offset, int start = 0, int length = -1) {\n    if (length < 0)\n        length = buf->length - start;\n    if (start < 0 || start + length > buf->length || start + length < start || length == 0 ||\n        offset == 0 || offset == INT_MIN)\n        return;\n    if (offset <= -length || offset >= length) {\n        fill(buf, 0);\n        return;\n    }\n\n    uint8_t *data = buf->data + start;\n    if (offset < 0) {\n        offset = -offset;\n        memmove(data + offset, data, length - offset);\n        memset(data, 0, offset);\n    } else {\n        length = length - offset;\n        memmove(data, data + offset, length);\n        memset(data + length, 0, offset);\n    }\n}\n\n/**\n * Convert a buffer to string assuming UTF8 encoding\n */\n//%\nString toString(Buffer buf) {\n    return mkString((char *)buf->data, buf->length);\n}\n\n/**\n * Convert a buffer to its hexadecimal representation.\n */\n//%\nString toHex(Buffer buf) {\n    const char *hex = \"0123456789abcdef\";\n    auto res = mkStringCore(NULL, buf->length * 2);\n    for (int i = 0; i < buf->length; ++i) {\n        res->ascii.data[i << 1] = hex[buf->data[i] >> 4];\n        res->ascii.data[(i << 1) + 1] = hex[buf->data[i] & 0xf];\n    }\n    return res;\n}\n\n/**\n * Rotate buffer left in place.\n * @param offset number of bytes to shift; use negative value to shift right\n * @param start start offset in buffer. Default is 0.\n * @param length number of elements in buffer. If negative, length is set as the buffer length minus\n * start. eg: -1\n */\n//%\nvoid rotate(Buffer buf, int offset, int start = 0, int length = -1) {\n    if (length < 0)\n        length = buf->length - start;\n    if (start < 0 || start + length > buf->length || start + length < start || length == 0 ||\n        offset == 0 || offset == INT_MIN)\n        return;\n\n    if (offset < 0)\n        offset += length << 8; // try to make it positive\n    offset %= length;\n    if (offset < 0)\n        offset += length;\n\n    uint8_t *data = buf->data + start;\n\n    uint8_t *n_first = data + offset;\n    uint8_t *first = data;\n    uint8_t *next = n_first;\n    uint8_t *last = data + length;\n\n    while (first != next) {\n        uint8_t tmp = *first;\n        *first++ = *next;\n        *next++ = tmp;\n        if (next == last) {\n            next = n_first;\n        } else if (first == n_first) {\n            n_first = next;\n        }\n    }\n}\n\n/**\n * Write contents of `src` at `dstOffset` in current buffer.\n */\n//%\nvoid write(Buffer buf, int dstOffset, Buffer src) {\n    // srcOff and length not supported, we only do up to 4 args :/\n    writeBuffer(buf, dstOffset, src, 0, -1);\n}\n\n/**\n * Compute k-bit FNV-1 non-cryptographic hash of the buffer.\n */\n//%\nuint32_t hash(Buffer buf, int bits) {\n    if (bits < 1)\n        return 0;\n    uint32_t h = hash_fnv1(buf->data, buf->length);\n    if (bits >= 32)\n        return h;\n    else\n        return ((h ^ (h >> bits)) & ((1 << bits) - 1));\n}\n\n} // namespace BufferMethods\n\nbool BoxedBuffer::isInstance(TValue v) {\n    return getAnyVTable(v) == &buffer_vt;\n}\n\n// The functions below are deprecated in control namespace, but they are referenced\n// in Buffer namespaces via explicit shim=...\nnamespace control {\n/**\n * Create a new zero-initialized buffer.\n * @param size number of bytes in the buffer\n */\n//% deprecated=1\nBuffer createBuffer(int size) {\n    return mkBuffer(NULL, size);\n}\n\n/**\n * Create a new buffer with UTF8-encoded string\n * @param str the string to put in the buffer\n */\n//% deprecated=1\nBuffer createBufferFromUTF8(String str) {\n#if PXT_UTF8\n    auto sz = toRealUTF8(str, NULL);\n    auto r = mkBuffer(NULL, sz);\n    toRealUTF8(str, r->data);\n    return r;\n#else\n    return mkBuffer((const uint8_t *)str->getUTF8Data(), str->getUTF8Size());\n#endif\n}\n} // namespace control\n\nnamespace pxt {\nstatic int writeBytes(uint8_t *dst, uint8_t *src, int length, bool swapBytes, int szLeft) {\n    if (szLeft < length) {\n        return -1;\n    }\n\n    if (swapBytes) {\n        uint8_t *p = dst + length;\n        for (int i = 0; i < length; ++i)\n            *--p = src[i];\n    } else {\n        if (length == 4 && ((uintptr_t)dst & 3) == 0)\n            *(uint32_t *)dst = *(uint32_t *)src;\n        else if (length == 2 && ((uintptr_t)dst & 1) == 0)\n            *(uint16_t *)dst = *(uint16_t *)src;\n        else\n            memcpy(dst, src, length);\n    }\n\n    return 0;\n}\n\nstatic int readBytes(uint8_t *src, uint8_t *dst, int length, bool swapBytes, int szLeft) {\n    if (szLeft < length) {\n        memset(dst, 0, length);\n        return -1;\n    }\n\n    if (swapBytes) {\n        uint8_t *p = src + length;\n        for (int i = 0; i < length; ++i)\n            dst[i] = *--p;\n    } else {\n        if (length == 4 && ((uintptr_t)src & 3) == 0)\n            *(uint32_t *)dst = *(uint32_t *)src;\n        else if (length == 2 && ((uintptr_t)src & 1) == 0)\n            *(uint16_t *)dst = *(uint16_t *)src;\n        else\n            memcpy(dst, src, length);\n    }\n\n    return 0;\n}\n\nvoid setNumberCore(uint8_t *buf, int szLeft, NumberFormat format, TNumber value) {\n    int8_t i8;\n    uint8_t u8;\n    int16_t i16;\n    uint16_t u16;\n    int32_t i32;\n    uint32_t u32;\n    float f32;\n    double f64;\n\n// Assume little endian\n#define WRITEBYTES(isz, swap, toInt)                                                               \\\n    isz = toInt(value);                                                                            \\\n    writeBytes(buf, (uint8_t *)&isz, sizeof(isz), swap, szLeft);                                   \\\n    break\n\n    switch (format) {\n    case NumberFormat::Int8LE:\n        WRITEBYTES(i8, false, toInt);\n    case NumberFormat::UInt8LE:\n        WRITEBYTES(u8, false, toInt);\n    case NumberFormat::Int16LE:\n        WRITEBYTES(i16, false, toInt);\n    case NumberFormat::UInt16LE:\n        WRITEBYTES(u16, false, toInt);\n    case NumberFormat::Int32LE:\n        WRITEBYTES(i32, false, toInt);\n    case NumberFormat::UInt32LE:\n        WRITEBYTES(u32, false, toUInt);\n\n    case NumberFormat::Int8BE:\n        WRITEBYTES(i8, true, toInt);\n    case NumberFormat::UInt8BE:\n        WRITEBYTES(u8, true, toInt);\n    case NumberFormat::Int16BE:\n        WRITEBYTES(i16, true, toInt);\n    case NumberFormat::UInt16BE:\n        WRITEBYTES(u16, true, toInt);\n    case NumberFormat::Int32BE:\n        WRITEBYTES(i32, true, toInt);\n    case NumberFormat::UInt32BE:\n        WRITEBYTES(u32, true, toUInt);\n\n    case NumberFormat::Float32LE:\n        WRITEBYTES(f32, false, toFloat);\n    case NumberFormat::Float32BE:\n        WRITEBYTES(f32, true, toFloat);\n    case NumberFormat::Float64LE:\n        WRITEBYTES(f64, false, toDouble);\n    case NumberFormat::Float64BE:\n        WRITEBYTES(f64, true, toDouble);\n    }\n}\n\nTNumber getNumberCore(uint8_t *buf, int szLeft, NumberFormat format) {\n    int8_t i8;\n    uint8_t u8;\n    int16_t i16;\n    uint16_t u16;\n    int32_t i32;\n    uint32_t u32;\n    float f32;\n    double f64;\n\n// Assume little endian\n#define READBYTES(isz, swap, conv)                                                                 \\\n    readBytes(buf, (uint8_t *)&isz, sizeof(isz), swap, szLeft);                                    \\\n    return conv(isz)\n\n    switch (format) {\n    case NumberFormat::Int8LE:\n        READBYTES(i8, false, fromInt);\n    case NumberFormat::UInt8LE:\n        READBYTES(u8, false, fromInt);\n    case NumberFormat::Int16LE:\n        READBYTES(i16, false, fromInt);\n    case NumberFormat::UInt16LE:\n        READBYTES(u16, false, fromInt);\n    case NumberFormat::Int32LE:\n        READBYTES(i32, false, fromInt);\n    case NumberFormat::UInt32LE:\n        READBYTES(u32, false, fromUInt);\n\n    case NumberFormat::Int8BE:\n        READBYTES(i8, true, fromInt);\n    case NumberFormat::UInt8BE:\n        READBYTES(u8, true, fromInt);\n    case NumberFormat::Int16BE:\n        READBYTES(i16, true, fromInt);\n    case NumberFormat::UInt16BE:\n        READBYTES(u16, true, fromInt);\n    case NumberFormat::Int32BE:\n        READBYTES(i32, true, fromInt);\n    case NumberFormat::UInt32BE:\n        READBYTES(u32, true, fromUInt);\n\n    case NumberFormat::Float32LE:\n        READBYTES(f32, false, fromFloat);\n    case NumberFormat::Float32BE:\n        READBYTES(f32, true, fromFloat);\n    case NumberFormat::Float64LE:\n        READBYTES(f64, false, fromDouble);\n    case NumberFormat::Float64BE:\n        READBYTES(f64, true, fromDouble);\n    }\n\n    return 0;\n}\n} // namespace pxt\n",
            "buffer.ts": "namespace pins {\n    //% deprecated=1\n    export function sizeOf(format: NumberFormat) {\n        return Buffer.sizeOfNumberFormat(format)\n    }\n\n    //% deprecated=1\n    export function createBufferFromArray(bytes: number[]) {\n        return Buffer.fromArray(bytes)\n    }\n\n    //% deprecated=1\n    export function packedSize(format: string) {\n        return Buffer.packedSize(format)\n    }\n\n    //% deprecated=1\n    export function packBuffer(format: string, nums: number[]) {\n        return Buffer.pack(format, nums)\n    }\n\n    //% deprecated=1\n    export function packIntoBuffer(format: string, buf: Buffer, offset: number, nums: number[]) {\n        buf.packAt(offset, format, nums)\n    }\n\n    //% deprecated=1\n    export function unpackBuffer(format: string, buf: Buffer, offset = 0) {\n        return buf.unpack(format, offset)\n    }\n\n    //% deprecated=1\n    export function concatBuffers(bufs: Buffer[]) {\n        return Buffer.concat(bufs)\n    }\n}\n\n// see http://msgpack.org/ for the spec\n// it currently only implements numbers and their sequances\n// once we handle any type and typeof expressions we can do more\n\nnamespace msgpack {\n    function tagFormat(tag: number) {\n        switch (tag) {\n            case 0xCB: return NumberFormat.Float64BE\n            case 0xCC: return NumberFormat.UInt8BE\n            case 0xCD: return NumberFormat.UInt16BE\n            case 0xCE: return NumberFormat.UInt32BE\n            case 0xD0: return NumberFormat.Int8BE\n            case 0xD1: return NumberFormat.Int16BE\n            case 0xD2: return NumberFormat.Int32BE\n            default:\n                return null\n        }\n    }\n\n    function packNumberCore(buf: Buffer, offset: number, num: number) {\n        let tag = 0xCB\n        if (num == (num << 0) || num == (num >>> 0)) {\n            if (-31 <= num && num <= 127) {\n                if (buf) buf[offset] = num\n                return 1\n            } else if (0 <= num) {\n                if (num <= 0xff) {\n                    tag = 0xCC\n                } else if (num <= 0xffff) {\n                    tag = 0xCD\n                } else {\n                    tag = 0xCE\n                }\n            } else {\n                if (-0x7f <= num) {\n                    tag = 0xD0\n                } else if (-0x7fff <= num) {\n                    tag = 0xD1\n                } else {\n                    tag = 0xD2\n                }\n            }\n        }\n        let fmt = tagFormat(tag)\n        if (buf) {\n            buf[offset] = tag\n            buf.setNumber(fmt, offset + 1, num)\n        }\n        return pins.sizeOf(fmt) + 1\n    }\n\n    /**\n     * Unpacks a buffer into a number array.\n     */\n    export function unpackNumberArray(buf: Buffer, offset = 0): number[] {\n        let res: number[] = []\n\n        while (offset < buf.length) {\n            let fmt = tagFormat(buf[offset++])\n            if (fmt === null) {\n                let v = buf.getNumber(NumberFormat.Int8BE, offset - 1)\n                if (-31 <= v && v <= 127)\n                    res.push(v)\n                else\n                    return null\n            } else {\n                res.push(buf.getNumber(fmt, offset))\n                offset += pins.sizeOf(fmt)\n            }\n            // padding at the end\n            while (buf[offset] === 0xc1) offset++;\n        }\n\n        return res\n    }\n\n    /**\n     * Pack a number array into a buffer.\n     * @param nums the numbers to be packed\n     */\n    export function packNumberArray(nums: number[]): Buffer {\n        let off = 0\n        for (let n of nums) {\n            off += packNumberCore(null, off, n)\n        }\n        let buf = Buffer.create(off)\n        off = 0\n        for (let n of nums) {\n            off += packNumberCore(buf, off, n)\n        }\n        return buf\n    }\n}\n\nnamespace helpers {\n    export function bufferConcat(a: Buffer, b: Buffer) {\n        const r = Buffer.create(a.length + b.length)\n        r.write(0, a)\n        r.write(a.length, b)\n        return r\n    }\n\n    export function bufferEquals(l: Buffer, r: Buffer) {\n        if (!l || !r) return !!l == !!r;\n        if (l.length != r.length) return false;\n        for (let i = 0; i < l.length; ++i) {\n            if (l[i] != r[i])\n                return false;\n        }\n        return true;\n    }\n\n    export function bufferIndexOf(a: Buffer, b: Buffer) {\n        for (let i = 0; i <= a.length - b.length; ++i) {\n            if (a[i] == b[0]) {\n                let j = 0\n                while (j < b.length) {\n                    if (a[i + j] != b[j])\n                        break\n                    j++\n                }\n                if (j >= b.length)\n                    return i\n            }\n        }\n        return -1\n    }\n\n    export function bufferUnpack(buf: Buffer, format: string, offset?: number) {\n        if (!offset) offset = 0\n        let res: number[] = []\n        Buffer.__packUnpackCore(format, res, buf, false, offset)\n        return res\n    }\n\n    export function bufferPackAt(buf: Buffer, offset: number, format: string, nums: number[]) {\n        Buffer.__packUnpackCore(format, nums, buf, true, offset)\n    }\n\n    export function bufferChunked(buf: Buffer, maxBytes: number) {\n        if (buf.length <= maxBytes) return [buf]\n        else {\n            const r: Buffer[] = []\n            for (let i = 0; i < buf.length; i += maxBytes)\n                r.push(buf.slice(i, maxBytes))\n            return r\n        }\n    }\n\n    export function bufferToArray(buf: Buffer, format: NumberFormat) {\n        const sz = Buffer.sizeOfNumberFormat(format)\n        const len = buf.length - sz\n        const r: number[] = []\n        for (let i = 0; i <= len; i += sz)\n            r.push(buf.getNumber(format, i))\n        return r\n    }\n\n    export const _b64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n    export function bufferToBase64(buf: Buffer) {\n        const len = buf.length\n        let r = \"\"\n        for (let i = 0; i < len; i += 3) {\n            const x0 = buf[i]\n            r += _b64[x0 >> 2]\n            if (i + 1 >= len) {\n                r += _b64[(x0 & 3) << 4] + \"==\"\n            } else {\n                const x1 = buf[i + 1]\n                r += _b64[(x0 & 3) << 4 | (x1 >> 4)]\n                if (i + 2 >= len) {\n                    r += _b64[(x1 & 15) << 2] + \"=\"\n                } else {\n                    const x2 = buf[i + 2]\n                    r += _b64[(x1 & 15) << 2 | (x2 >> 6)]\n                    r += _b64[x2 & 63]\n                }\n            }\n        }\n        return r\n    }\n}\n\ninterface Buffer {\n    [index: number]: number;\n\n    /**\n     * Return concatenation of current buffer and the given buffer\n     */\n    //% helper=bufferConcat\n    concat(other: Buffer): Buffer;\n\n    /**\n     * Return position of other buffer in current buffer\n     */\n    //% helper=bufferIndexOf\n    indexOf(other: Buffer): number;\n\n    /**\n     * Reads numbers from the buffer according to the format\n     */\n    //% helper=bufferUnpack\n    unpack(format: string, offset?: number): number[];\n\n    /**\n     * Writes numbers to the buffer according to the format\n     */\n    //% helper=bufferPackAt\n    packAt(offset: number, format: string, nums: number[]): void;\n\n    /**\n     * Returns true if this and the other buffer hold the same data\n     */\n    //% helper=bufferEquals\n    equals(other: Buffer): boolean;\n\n    /**\n     * Splits buffer into parts no larger than specified\n     */\n    //% helper=bufferChunked\n    chunked(maxSize: number): Buffer[];\n\n    /**\n     * Read contents of buffer as an array in specified format\n     */\n    //% helper=bufferToArray\n    toArray(format: NumberFormat): number[];\n\n    /**\n     * Convert buffer to ASCII base64 encoding.\n     */\n    //% helper=bufferToBase64\n    toBase64(): string;\n\n    // rest defined in buffer.cpp\n}\n\nnamespace Buffer {\n    /**\n     * Allocate a new buffer.\n     * @param size number of bytes in the buffer\n     */\n    //% shim=control::createBuffer\n    export declare function create(size: number): Buffer;\n\n    /**\n     * Create a new buffer, decoding a hex string\n     */\n    export function fromHex(hex: string) {\n        const hexStr = \"0123456789abcdef\"\n        const res = Buffer.create(hex.length >> 1)\n        hex = hex.toLowerCase()\n        for (let i = 0; i < hex.length; i += 2) {\n            const p0 = hexStr.indexOf(hex.charAt(i))\n            const p1 = hexStr.indexOf(hex.charAt(i + 1))\n            if (p0 < 0 || p1 < 0)\n                throw \"Invalid hex\"\n            res[i >> 1] = (p0 << 4) | p1\n        }\n        return res\n    }\n\n    function b64Idx(c: string) {\n        if (c === undefined || c == \"=\") return -1\n\n        // handle base64url\n        if (c == \"-\") return 62\n        if (c == \"_\") return 63\n\n        const r = helpers._b64.indexOf(c)\n        if (r < 0)\n            throw \"Invalid Base64\"\n        return r\n    }\n\n    function fromBase64Core(trg: Buffer, b64: string) {\n        const len = b64.length\n        let dp = 0\n        for (let i = 0; i < len; i += 4) {\n            const x0 = b64Idx(b64[i])\n            const x1 = b64Idx(b64[i + 1])\n            const x2 = b64Idx(b64[i + 2])\n            const x3 = b64Idx(b64[i + 3])\n            if (x0 < 0 || x1 < 0) throw \"Invalid Base64\"\n            if (trg)\n                trg[dp] = (x0 << 2) | (x1 >> 4)\n            dp++\n            if (x2 >= 0) {\n                if (trg)\n                    trg[dp] = (x1 << 4) | (x2 >> 2)\n                dp++\n                if (x3 >= 0) {\n                    if (trg)\n                        trg[dp] = (x2 << 6) | x3\n                    dp++\n                }\n            } else {\n                if (x3 >= 0 || i + 4 < len)\n                    throw \"Invalid Base64\"\n            }\n        }\n        return dp\n    }\n\n    /**\n     * Create a new buffer, decoding a Base64 string\n     */\n    export function fromBase64(b64: string) {\n        const sz = fromBase64Core(null, b64)\n        const res = create(sz)\n        fromBase64Core(res, b64)\n        return res\n    }\n\n    /**\n     * Create a new buffer from an UTF8-encoded string\n     * @param str the string to put in the buffer\n     */\n    //% shim=control::createBufferFromUTF8\n    export declare function fromUTF8(str: string): Buffer;\n\n    function chunkLen(s: string, off: number, maxlen: number) {\n        let L = Math.idiv(maxlen, 3)\n        let R = maxlen\n\n        if (fromUTF8(s.slice(off, off + R)).length <= maxlen)\n            return R\n\n        while (L < R) {\n            const m = (L + R) >> 1\n            if (m == L)\n                break\n            const ll = fromUTF8(s.slice(off, off + m)).length\n            if (ll <= maxlen)\n                L = m\n            else\n                R = m\n        }\n\n        return L\n    }\n\n    export function chunkedFromUTF8(str: string, maxBytes: number) {\n        if (maxBytes < 3)\n            throw \"Oops\"\n        const chunks: Buffer[] = []\n        let pos = 0\n        while (pos < str.length) {\n            const len = chunkLen(str, pos, maxBytes)\n            chunks.push(fromUTF8(str.slice(pos, pos + len)))\n            pos += len\n        }\n        return chunks\n    }\n\n    /**\n     * Create a new buffer initialized to bytes from given array.\n     * @param bytes data to initialize with\n     */\n    export function fromArray(bytes: number[]) {\n        let buf = Buffer.create(bytes.length)\n        for (let i = 0; i < bytes.length; ++i)\n            buf[i] = bytes[i]\n        return buf\n    }\n\n    /**\n     * Concatenates all buffers in the list\n     */\n    export function concat(buffers: Buffer[]) {\n        let len = 0\n        for (let b of buffers)\n            len += b.length\n        const r = Buffer.create(len)\n        len = 0\n        for (let b of buffers) {\n            r.write(len, b)\n            len += b.length\n        }\n        return r\n    }\n\n    // Python-like packing, see https://docs.python.org/3/library/struct.html\n\n    export function packedSize(format: string) {\n        return __packUnpackCore(format, null, null, true)\n    }\n\n    export function pack(format: string, nums: number[]) {\n        let buf = Buffer.create(packedSize(format))\n        __packUnpackCore(format, nums, buf, true)\n        return buf\n    }\n\n    function getFormat(pychar: string, isBig: boolean) {\n        switch (pychar) {\n            case 'B':\n                return NumberFormat.UInt8LE\n            case 'b':\n                return NumberFormat.Int8LE\n            case 'H':\n                return isBig ? NumberFormat.UInt16BE : NumberFormat.UInt16LE\n            case 'h':\n                return isBig ? NumberFormat.Int16BE : NumberFormat.Int16LE\n            case 'I':\n            case 'L':\n                return isBig ? NumberFormat.UInt32BE : NumberFormat.UInt32LE\n            case 'i':\n            case 'l':\n                return isBig ? NumberFormat.Int32BE : NumberFormat.Int32LE\n            case 'f':\n                return isBig ? NumberFormat.Float32BE : NumberFormat.Float32LE\n            case 'd':\n                return isBig ? NumberFormat.Float64BE : NumberFormat.Float64LE\n            default:\n                return null as NumberFormat\n        }\n    }\n\n    function isDigit(ch: string) {\n        const code = ch.charCodeAt(0)\n        return 0x30 <= code && code <= 0x39\n    }\n\n    export function __packUnpackCore(format: string, nums: number[], buf: Buffer, isPack: boolean, off = 0) {\n        let isBig = false\n        let idx = 0\n        for (let i = 0; i < format.length; ++i) {\n            switch (format[i]) {\n                case ' ':\n                case '<':\n                case '=':\n                    isBig = false\n                    break\n                case '>':\n                case '!':\n                    isBig = true\n                    break\n                default:\n                    const i0 = i\n                    while (isDigit(format[i])) i++\n                    let reps = 1\n                    if (i0 != i)\n                        reps = parseInt(format.slice(i0, i))\n                    if (format[i] == 'x')\n                        off += reps\n                    else\n                        while (reps--) {\n                            let fmt = getFormat(format[i], isBig)\n                            if (fmt === null) {\n                                control.fail(\"Unsupported format character: \" + format[i])\n                            } else {\n                                if (buf) {\n                                    if (isPack)\n                                        buf.setNumber(fmt, off, nums[idx++])\n                                    else\n                                        nums.push(buf.getNumber(fmt, off))\n                                }\n\n                                off += sizeOfNumberFormat(fmt)\n                            }\n                        }\n                    break\n            }\n        }\n        return off\n    }\n\n    /**\n     * Get the size in bytes of specified number format.\n     */\n    export function sizeOfNumberFormat(format: NumberFormat) {\n        switch (format) {\n            case NumberFormat.Int8LE:\n            case NumberFormat.UInt8LE:\n            case NumberFormat.Int8BE:\n            case NumberFormat.UInt8BE:\n                return 1;\n            case NumberFormat.Int16LE:\n            case NumberFormat.UInt16LE:\n            case NumberFormat.Int16BE:\n            case NumberFormat.UInt16BE:\n                return 2;\n            case NumberFormat.Int32LE:\n            case NumberFormat.Int32BE:\n            case NumberFormat.UInt32BE:\n            case NumberFormat.UInt32LE:\n            case NumberFormat.Float32BE:\n            case NumberFormat.Float32LE:\n                return 4;\n            case NumberFormat.Float64BE:\n            case NumberFormat.Float64LE:\n                return 8;\n        }\n        return 0;\n    }\n}\n",
            "codal.cpp": "#include \"pxt.h\"\n#include \"LowLevelTimer.h\"\nusing namespace codal;\n\nvoid cpu_clock_init(void);\n\nPXT_ABI(__aeabi_dadd)\nPXT_ABI(__aeabi_dcmplt)\nPXT_ABI(__aeabi_dcmpgt)\nPXT_ABI(__aeabi_dsub)\nPXT_ABI(__aeabi_ddiv)\nPXT_ABI(__aeabi_dmul)\n\n#ifdef DEVICE_GET_FIBER_LIST_AVAILABLE\n// newer codal-core has get_fiber_list() but not list_fibers()\nnamespace codal {\n/*\n * Return all current fibers.\n *\n * @param dest If non-null, it points to an array of pointers to fibers to store results in.\n *\n * @return the number of fibers (potentially) stored\n */\nint list_fibers(Fiber **dest) {\n    int i = 0;\n    for (Fiber *fib = codal::get_fiber_list(); fib; fib = fib->next) {\n        if (dest)\n            dest[i] = fib;\n        i++;\n    }\n    return i;\n}\n\n} // namespace codal\n#endif\n\nnamespace pxt {\n\nvoid platform_init();\nvoid usb_init();\n\n// The first two word are used to tell the bootloader that a single reset should start the\n// bootloader and the MSD device, not us.\n// The rest is reserved for partial flashing checksums.\n__attribute__((section(\".binmeta\"))) __attribute__((used)) const uint32_t pxt_binmeta[] = {\n    0x87eeb07c, 0x87eeb07c, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff,\n    0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff, 0x00ff00ff,\n};\n\nEvent lastEvent;\nMessageBus devMessageBus;\ncodal::CodalDevice device;\n\nstruct FreeList {\n    FreeList *next;\n};\n\nstatic void commInit() {\n    int commSize = bytecode[20];\n    if (!commSize)\n        return;\n\n    void *r = app_alloc_at((void *)PXT_COMM_BASE, commSize);\n    DMESG(\"comm %d -> %p\", commSize, r);\n    if (!r)\n        target_panic(20);\n}\n\nstatic void initCodal() {\n    cpu_clock_init();\n\n    commInit();\n\n    // Bring up fiber scheduler.\n    scheduler_init(devMessageBus);\n\n    // We probably don't need that - components are initialized when one obtains\n    // the reference to it.\n    // devMessageBus.listen(DEVICE_ID_MESSAGE_BUS_LISTENER, DEVICE_EVT_ANY, this,\n    // &CircuitPlayground::onListenerRegisteredEvent);\n\n    for (int i = 0; i < DEVICE_COMPONENT_COUNT; i++) {\n        if (CodalComponent::components[i])\n            CodalComponent::components[i]->init();\n    }\n\n    usb_init();\n\n    auto led = LOOKUP_PIN(LED);\n    if (led) {\n        led->setDigitalValue(0);\n    }\n}\n\n// ---------------------------------------------------------------------------\n// An adapter for the API expected by the run-time.\n// ---------------------------------------------------------------------------\n\n// We have the invariant that if [dispatchEvent] is registered against the DAL\n// for a given event, then [handlersMap] contains a valid entry for that\n// event.\nvoid dispatchEvent(Event e) {\n    lastEvent = e;\n\n    auto curr = findBinding(e.source, e.value);\n    auto value = fromInt(e.value);\n    while (curr) {\n        runAction1(curr->action, value);\n        curr = nextBinding(curr->next, e.source, e.value);\n    }\n}\n\nvoid registerWithDal(int id, int event, Action a, int flags) {\n    // first time?\n    if (!findBinding(id, event)) {\n        devMessageBus.listen(id, event, dispatchEvent, flags);\n        if (event == 0) {\n            // we're registering for all events on given ID\n            // need to remove old listeners for specific events\n            auto curr = findBinding(id, -1);\n            while (curr) {\n                devMessageBus.ignore(id, curr->value, dispatchEvent);\n                curr = nextBinding(curr->next, id, -1);\n            }\n        }\n    }\n    setBinding(id, event, a);\n}\n\nvoid fiberDone(void *a) {\n    unregisterGCPtr((Action)a);\n    release_fiber();\n}\n\nvoid releaseFiber() {\n    release_fiber();\n}\n\nvoid sleep_ms(unsigned ms) {\n    fiber_sleep(ms);\n}\n\nvoid sleep_us(uint64_t us) {\n    target_wait_us(us);\n}\n\nvoid forever_stub(void *a) {\n    while (true) {\n        runAction0((Action)a);\n        fiber_sleep(20);\n    }\n}\n\nvoid runForever(Action a) {\n    if (a != 0) {\n        registerGCPtr(a);\n        create_fiber(forever_stub, (void *)a);\n    }\n}\n\nvoid runInParallel(Action a) {\n    if (a != 0) {\n        registerGCPtr(a);\n        create_fiber((void (*)(void *))(void*)runAction0, (void *)a, fiberDone);\n    }\n}\n\nvoid waitForEvent(int id, int event) {\n    fiber_wait_for_event(id, event);\n}\n\nvoid initRuntime() {\n    initSystemTimer();\n    initCodal();\n    platform_init();\n}\n\n//%\nunsigned afterProgramPage() {\n    unsigned ptr = (unsigned)&bytecode[0];\n    ptr += programSize();\n    ptr = (ptr + (PAGE_SIZE - 1)) & ~(PAGE_SIZE - 1);\n    return ptr;\n}\n\nuint64_t getLongSerialNumber() {\n    return device.getSerialNumber();\n}\n\nint current_time_ms() {\n    return system_timer_current_time();\n}\n\nuint64_t current_time_us() {\n    return system_timer_current_time_us();\n}\n\nThreadContext *getThreadContext() {\n    if (!currentFiber)\n        return NULL;\n    return (ThreadContext *)currentFiber->user_data;\n}\n\nvoid setThreadContext(ThreadContext *ctx) {\n    currentFiber->user_data = ctx;\n}\n\nstatic void *threadAddressFor(codal::Fiber *fib, void *sp) {\n    if (fib == currentFiber)\n        return sp;\n    return (uint8_t *)sp + ((uint8_t *)fib->stack_top - (uint8_t *)tcb_get_stack_base(fib->tcb));\n}\n\nvoid gcProcessStacks(int flags) {\n    // check scheduler is initialized\n    if (!currentFiber) {\n        // make sure we allocate something to at least initalize the memory allocator\n        void *volatile p = xmalloc(1);\n        xfree(p);\n        return;\n    }\n\n    int numFibers = codal::list_fibers(NULL);\n    codal::Fiber **fibers = (codal::Fiber **)xmalloc(sizeof(codal::Fiber *) * numFibers);\n    int num2 = codal::list_fibers(fibers);\n    if (numFibers != num2)\n        oops(12);\n    int cnt = 0;\n\n    for (int i = 0; i < numFibers; ++i) {\n        auto fib = fibers[i];\n        auto ctx = (ThreadContext *)fib->user_data;\n        if (!ctx)\n            continue;\n        gcProcess(ctx->thrownValue);\n        for (auto seg = &ctx->stack; seg; seg = seg->next) {\n            auto ptr = (TValue *)threadAddressFor(fib, seg->top);\n            auto end = (TValue *)threadAddressFor(fib, seg->bottom);\n            if (flags & 2)\n                DMESG(\"RS%d:%p/%d\", cnt++, ptr, end - ptr);\n            // VLOG(\"mark: %p - %p\", ptr, end);\n            while (ptr < end) {\n                gcProcess(*ptr++);\n            }\n        }\n    }\n    xfree(fibers);\n}\n\nLowLevelTimer *getJACDACTimer() {\n    static LowLevelTimer *jacdacTimer;\n    if (!jacdacTimer) {\n        jacdacTimer = allocateTimer();\n        jacdacTimer->setIRQPriority(1);\n    }\n    return jacdacTimer;\n}\nvoid initSystemTimer() {\n    new CODAL_TIMER(*allocateTimer());\n}\n\n} // namespace pxt",
            "config.ts": "namespace config {\n       \n    // ====================================================\n    // ===  UART  =======================================\n    // ================================================\n    export const PIN_UART1_TX = DAL.PB_6;\n    export const PIN_UART1_RX = DAL.PB_7;\n    \n    export const PIN_UART2_TX = DAL.PD_5;\n    export const PIN_UART2_RX = DAL.PD_6;\n    \n    export const PIN_UART3_TX = DAL.PD_8;\n    export const PIN_UART3_RX = DAL.PD_9;\n    \n    export const PIN_UART4_TX = DAL.PA_0;\n    export const PIN_UART4_RX = DAL.PA_1;\n    \n\n    // ====================================================\n    // ===  SPI  ========================================\n    // ================================================\n    export const PIN_SPI1_MISO = DAL.PA_6;\n    export const PIN_SPI1_MOSI = DAL.PA_7_ALT1;\n    export const PIN_SPI1_SCK = DAL.PA_5;\n    \n    export const PIN_SPI2_MISO = DAL.PD_3;\n    export const PIN_SPI2_MOSI = DAL.PD_4;\n    export const PIN_SPI2_SCK = DAL.PD_1;\n    \n    export const PIN_SPI3_MISO = DAL.PC_11;\n    export const PIN_SPI3_MOSI = DAL.PC_12;\n    export const PIN_SPI3_SCK = DAL.PC_10;\n\n\n    // ====================================================\n    // ===  I2C  ========================================\n    // ================================================\n    export const PIN_I2C1_SCL = DAL.PB_8;\n    export const PIN_I2C1_SDA = DAL.PB_9;\n    \n    export const PIN_I2C2_SCL = DAL.PB_10;\n    export const PIN_I2C2_SDA = DAL.PB_11;\n\n    \n    // ====================================================\n    // ===  PERIPHERALS  ================================\n    // ================================================\n    export const PIN_ACCELEROMETER_SDA = PIN_I2C2_SDA;\n    export const PIN_ACCELEROMETER_SCL = PIN_I2C2_SCL;\n    export const PIN_ACCELEROMETER_INT = DAL.PD_11; \n\n    export const PIN_HTS221_SDA = PIN_I2C2_SDA;\n    export const PIN_HTS221_SCL = PIN_I2C2_SCL;\n\n    export const PIN_LPS22HB_SDA = PIN_I2C2_SDA;\n    export const PIN_LPS22HB_SCL = PIN_I2C2_SCL;\n\n    export const PIN_VL53L0X_SDA = PIN_I2C2_SDA;\n    export const PIN_VL53L0X_SCL = PIN_I2C2_SCL;\n    export const PIN_VL53L0X_SHUT = DAL.PC_6;\n\n    export const PIN_LSM6DSL_SDA = PIN_I2C2_SDA;\n    export const PIN_LSM6DSL_SCL = PIN_I2C2_SCL;\n\n    export const PIN_BLE_SPI_MOSI = PIN_SPI3_MOSI;\n    export const PIN_BLE_SPI_MISO = PIN_SPI3_MISO;\n    export const PIN_BLE_SPI_SCLK = PIN_SPI3_SCK;\n\n    export const PIN_BLE_SPI_CS = DAL.PD_13;\n    export const PIN_BLE_SPI_IRQ = DAL.PE_6;\n    export const PIN_BLE_RST = DAL.PA_8;\n\n    export const PIN_WIFI_ISM43362_MOSI = PIN_SPI3_MOSI;\n    export const PIN_WIFI_ISM43362_MISO = PIN_SPI3_MISO;\n    export const PIN_WIFI_ISM43362_SCK = PIN_SPI3_SCK;\n    \n    export const PIN_WIFI_ISM43362_CS = DAL.PE_0;\n    export const PIN_WIFI_ISM43362_COMMAND_DATA_READY = DAL.PE_1;\n    export const PIN_WIFI_ISM43362_RESET = DAL.PE_8;\n    export const PIN_WIFI_ISM43362_WAKE_UP = DAL.PB_13;\n    \n\n    // ====================================================\n    // ===  ARDUINO  ====================================\n    // ================================================\n    export const PIN_A0 = DAL.PC_5;\n    export const PIN_A1 = DAL.PC_4;\n    export const PIN_A2 = DAL.PC_3;\n    export const PIN_A3 = DAL.PC_2;\n    export const PIN_A4 = DAL.PC_1;\n    export const PIN_A5 = DAL.PC_0;\n\n    export const PIN_D0 = DAL.PA_1;\n    export const PIN_D1 = DAL.PA_0;\n    export const PIN_D2 = DAL.PD_14;\n    export const PIN_D3 = DAL.PB_0_ALT1;\n    export const PIN_D4 = DAL.PA_3;\n    export const PIN_D5 = DAL.PB_4;\n    export const PIN_D6 = DAL.PB_1_ALT1;\n    export const PIN_D7 = DAL.PA_4;\n    export const PIN_D8 = DAL.PB_2;\n    export const PIN_D9 = DAL.PA_15;\n    export const PIN_D10 = DAL.PA_2;\n    export const PIN_D11 = DAL.PA_7_ALT1;\n    export const PIN_D12 = DAL.PA_6;\n    export const PIN_D13 = DAL.PA_5;\n    export const PIN_D14 = DAL.PB_9;\n    export const PIN_D15 = DAL.PB_8;\n\n    export const PIN_RX = PIN_UART1_RX;\n    export const PIN_TX = PIN_UART1_TX;\n\n    export const PIN_MISO = PIN_SPI1_MISO;\n    export const PIN_MOSI = PIN_SPI1_MOSI;\n    export const PIN_SCK = PIN_SPI1_SCK;\n\n    export const PIN_SCL = PIN_I2C1_SCL;\n    export const PIN_SDA = PIN_I2C1_SDA;\n\n\n    // ====================================================\n    // ===  ON-BOARD COMPONENTS  ========================\n    // ================================================\n    export const PIN_LED = DAL.PA_5;\n    export const PIN_LED2 = DAL.PB_14;\n    export const PIN_LED3 = DAL.PC_9;\n\n    export const PIN_BTN_USER = DAL.PC_13;\n    export const PIN_RESET = DAL.NO_CONN;\n    export const PIN_TEMPERATURE = DAL.NO_CONN;\n\n\n    // ====================================================\n    // ===  EXTERNAL DEFINITION  ========================\n    // ================================================\n    export const PIN_SPEAKER_AMP = PIN_D3;\n}",
            "configkeys.h": "#ifndef __PXT_CONFIGKEYS_H\n#define __PXT_CONFIGKEYS_H\n\n// used by pins.cpp to mask off the pin name from any config\n// lower 16 pins of value are the pin name\n#define CFG_PIN_NAME_MSK 0x0000ffff\n// upper 16 bits of value is any configuration of the pin.\n#define CFG_PIN_CONFIG_MSK 0xffff0000\n\n// begin optional pin configurations\n#define CFG_PIN_CONFIG_ACTIVE_LO 0x10000\n\n\n#define CFG_MAGIC0 0x1e9e10f1\n#define CFG_MAGIC1 0x20227a79\n\n// these define keys for getConfig() function\n#define CFG_PIN_ACCELEROMETER_INT 1\n#define CFG_PIN_ACCELEROMETER_SCL 2\n#define CFG_PIN_ACCELEROMETER_SDA 3\n#define CFG_PIN_BTN_A 4\n#define CFG_PIN_BTN_B 5\n#define CFG_PIN_BTN_SLIDE 6\n#define CFG_PIN_DOTSTAR_CLOCK 7\n#define CFG_PIN_DOTSTAR_DATA 8\n#define CFG_PIN_FLASH_CS 9\n#define CFG_PIN_FLASH_MISO 10\n#define CFG_PIN_FLASH_MOSI 11\n#define CFG_PIN_FLASH_SCK 12\n#define CFG_PIN_LED 13\n#define CFG_PIN_LIGHT 14\n#define CFG_PIN_MICROPHONE 15\n#define CFG_PIN_MIC_CLOCK 16\n#define CFG_PIN_MIC_DATA 17\n#define CFG_PIN_MISO 18\n#define CFG_PIN_MOSI 19\n// the preferred pin to drive an external neopixel strip\n#define CFG_PIN_NEOPIXEL 20\n#define CFG_PIN_RX 21\n#define CFG_PIN_RXLED 22\n#define CFG_PIN_SCK 23\n#define CFG_PIN_SCL 24\n#define CFG_PIN_SDA 25\n#define CFG_PIN_SPEAKER_AMP 26\n#define CFG_PIN_TEMPERATURE 27\n#define CFG_PIN_TX 28\n#define CFG_PIN_TXLED 29\n#define CFG_PIN_IR_OUT 30\n#define CFG_PIN_IR_IN 31\n#define CFG_PIN_DISPLAY_SCK 32\n#define CFG_PIN_DISPLAY_MISO 33\n#define CFG_PIN_DISPLAY_MOSI 34\n#define CFG_PIN_DISPLAY_CS 35\n#define CFG_PIN_DISPLAY_DC 36\n#define CFG_DISPLAY_WIDTH 37\n#define CFG_DISPLAY_HEIGHT 38\n#define CFG_DISPLAY_CFG0 39\n#define CFG_DISPLAY_CFG1 40\n#define CFG_DISPLAY_CFG2 41\n#define CFG_DISPLAY_CFG3 42\n#define CFG_PIN_DISPLAY_RST 43\n#define CFG_PIN_DISPLAY_BL 44\n#define CFG_PIN_SERVO_1 45\n#define CFG_PIN_SERVO_2 46\n#define CFG_PIN_BTN_LEFT 47\n#define CFG_PIN_BTN_RIGHT 48\n#define CFG_PIN_BTN_UP 49\n#define CFG_PIN_BTN_DOWN 50\n#define CFG_PIN_BTN_MENU 51\n#define CFG_PIN_LED_R 52\n#define CFG_PIN_LED_G 53\n#define CFG_PIN_LED_B 54\n#define CFG_PIN_LED1 55\n#define CFG_PIN_LED2 56\n#define CFG_PIN_LED3 57\n#define CFG_PIN_LED4 58\n#define CFG_SPEAKER_VOLUME 59\n\n#define CFG_PIN_JACK_TX 60\n#define CFG_PIN_JACK_SENSE 61\n#define CFG_PIN_JACK_HPEN 62\n#define CFG_PIN_JACK_BZEN 63\n#define CFG_PIN_JACK_PWREN 64\n#define CFG_PIN_JACK_SND 65\n#define CFG_PIN_JACK_BUSLED 66\n#define CFG_PIN_JACK_COMMLED 67\n\n#define CFG_PIN_BTN_SOFT_RESET 69\n#define CFG_ACCELEROMETER_TYPE 70\n#define CFG_PIN_BTNMX_LATCH 71\n#define CFG_PIN_BTNMX_CLOCK 72\n#define CFG_PIN_BTNMX_DATA 73\n#define CFG_PIN_BTN_MENU2 74\n#define CFG_PIN_BATTSENSE 75\n#define CFG_PIN_VIBRATION 76\n#define CFG_PIN_PWREN 77\n#define CFG_DISPLAY_TYPE 78\n\n#define CFG_PIN_ROTARY_ENCODER_A 79\n#define CFG_PIN_ROTARY_ENCODER_B 80\n\n#define CFG_ACCELEROMETER_SPACE 81\n\n#define CFG_PIN_WIFI_MOSI 82\n#define CFG_PIN_WIFI_MISO 83\n#define CFG_PIN_WIFI_SCK 84\n#define CFG_PIN_WIFI_TX 85\n#define CFG_PIN_WIFI_RX 86\n#define CFG_PIN_WIFI_CS 87\n#define CFG_PIN_WIFI_BUSY 88\n#define CFG_PIN_WIFI_RESET 89\n#define CFG_PIN_WIFI_GPIO0 90\n#define CFG_PIN_WIFI_AT_TX 91\n#define CFG_PIN_WIFI_AT_RX 92\n\n#define CFG_PIN_USB_POWER 93\n#define CFG_DISPLAY_DELAY 94\n\n// default I2C address\n#define ACCELEROMETER_TYPE_LIS3DH 0x32\n#define ACCELEROMETER_TYPE_LIS3DH_ALT 0x30\n#define ACCELEROMETER_TYPE_MMA8453 0x38\n#define ACCELEROMETER_TYPE_FXOS8700 0x3C\n#define ACCELEROMETER_TYPE_MMA8653 0x3A\n#define ACCELEROMETER_TYPE_MSA300 0x4C\n#define ACCELEROMETER_TYPE_MPU6050 0x68\n\n#define DISPLAY_TYPE_ST7735 7735\n#define DISPLAY_TYPE_ILI9341 9341\n#define DISPLAY_TYPE_SMART 4242\n\n#define CFG_PIN_A0 100\n#define CFG_PIN_A1 101\n#define CFG_PIN_A2 102\n#define CFG_PIN_A3 103\n#define CFG_PIN_A4 104\n#define CFG_PIN_A5 105\n#define CFG_PIN_A6 106\n#define CFG_PIN_A7 107\n#define CFG_PIN_A8 108\n#define CFG_PIN_A9 109\n#define CFG_PIN_A10 110\n#define CFG_PIN_A11 111\n#define CFG_PIN_A12 112\n#define CFG_PIN_A13 113\n#define CFG_PIN_A14 114\n#define CFG_PIN_A15 115\n#define CFG_PIN_A16 116\n#define CFG_PIN_A17 117\n#define CFG_PIN_A18 118\n#define CFG_PIN_A19 119\n#define CFG_PIN_A20 120\n#define CFG_PIN_A21 121\n#define CFG_PIN_A22 122\n#define CFG_PIN_A23 123\n#define CFG_PIN_A24 124\n#define CFG_PIN_A25 125\n#define CFG_PIN_A26 126\n#define CFG_PIN_A27 127\n#define CFG_PIN_A28 128\n#define CFG_PIN_A29 129\n#define CFG_PIN_A30 130\n#define CFG_PIN_A31 131\n\n#define CFG_PIN_D0 150\n#define CFG_PIN_D1 151\n#define CFG_PIN_D2 152\n#define CFG_PIN_D3 153\n#define CFG_PIN_D4 154\n#define CFG_PIN_D5 155\n#define CFG_PIN_D6 156\n#define CFG_PIN_D7 157\n#define CFG_PIN_D8 158\n#define CFG_PIN_D9 159\n#define CFG_PIN_D10 160\n#define CFG_PIN_D11 161\n#define CFG_PIN_D12 162\n#define CFG_PIN_D13 163\n#define CFG_PIN_D14 164\n#define CFG_PIN_D15 165\n#define CFG_PIN_D16 166\n#define CFG_PIN_D17 167\n#define CFG_PIN_D18 168\n#define CFG_PIN_D19 169\n#define CFG_PIN_D20 170\n#define CFG_PIN_D21 171\n#define CFG_PIN_D22 172\n#define CFG_PIN_D23 173\n#define CFG_PIN_D24 174\n#define CFG_PIN_D25 175\n#define CFG_PIN_D26 176\n#define CFG_PIN_D27 177\n#define CFG_PIN_D28 178\n#define CFG_PIN_D29 179\n#define CFG_PIN_D30 180\n#define CFG_PIN_D31 181\n\n#define CFG_NUM_NEOPIXELS 200\n#define CFG_NUM_DOTSTARS 201\n#define CFG_DEFAULT_BUTTON_MODE 202\n#define CFG_SWD_ENABLED 203\n#define CFG_FLASH_BYTES 204\n#define CFG_RAM_BYTES 205\n#define CFG_SYSTEM_HEAP_BYTES 206\n#define CFG_LOW_MEM_SIMULATION_KB 207\n#define CFG_BOOTLOADER_BOARD_ID 208\n#define CFG_UF2_FAMILY 209\n#define CFG_PINS_PORT_SIZE 210\n#define CFG_BOOTLOADER_PROTECTION 211\n#define CFG_POWER_DEEPSLEEP_TIMEOUT 212\n#define CFG_ANALOG_BUTTON_THRESHOLD 213\n#define CFG_CPU_MHZ 214\n#define CFG_CONTROLLER_LIGHT_MAX_BRIGHTNESS 215\n#define CFG_ANALOG_JOYSTICK_MIN 216\n#define CFG_ANALOG_JOYSTICK_MAX 217\n#define CFG_TIMERS_TO_USE 218\n// configs to specify the onboard (built-in) dotstar or neopixel strips\n// some boards have a combination of dotstar, neopixel strips like neotrellis\n#define CFG_PIN_ONBOARD_DOTSTAR_CLOCK 219\n#define CFG_PIN_ONBOARD_DOTSTAR_DATA 220\n#define CFG_NUM_ONBOARD_DOTSTARS 221\n#define CFG_PIN_ONBOARD_NEOPIXEL 222\n#define CFG_NUM_ONBOARD_NEOPIXELS 223\n\n#define CFG_MATRIX_KEYPAD_MESSAGE_ID 239\n#define CFG_NUM_MATRIX_KEYPAD_ROWS 240\n#define CFG_PIN_MATRIX_KEYPAD_ROW0 241\n#define CFG_PIN_MATRIX_KEYPAD_ROW1 242\n#define CFG_PIN_MATRIX_KEYPAD_ROW2 243\n#define CFG_PIN_MATRIX_KEYPAD_ROW3 244\n#define CFG_PIN_MATRIX_KEYPAD_ROW4 245\n#define CFG_PIN_MATRIX_KEYPAD_ROW5 246\n#define CFG_PIN_MATRIX_KEYPAD_ROW6 247\n#define CFG_PIN_MATRIX_KEYPAD_ROW7 248\n#define CFG_NUM_MATRIX_KEYPAD_COLS 250\n#define CFG_PIN_MATRIX_KEYPAD_COL0 251\n#define CFG_PIN_MATRIX_KEYPAD_COL1 252\n#define CFG_PIN_MATRIX_KEYPAD_COL2 253\n#define CFG_PIN_MATRIX_KEYPAD_COL3 254\n#define CFG_PIN_MATRIX_KEYPAD_COL4 255\n#define CFG_PIN_MATRIX_KEYPAD_COL5 256\n#define CFG_PIN_MATRIX_KEYPAD_COL6 257\n#define CFG_PIN_MATRIX_KEYPAD_COL7 258\n\n#define CFG_PIN_B0 300\n#define CFG_PIN_B1 301\n#define CFG_PIN_B2 302\n#define CFG_PIN_B3 303\n#define CFG_PIN_B4 304\n#define CFG_PIN_B5 305\n#define CFG_PIN_B6 306\n#define CFG_PIN_B7 307\n#define CFG_PIN_B8 308\n#define CFG_PIN_B9 309\n#define CFG_PIN_B10 310\n#define CFG_PIN_B11 311\n#define CFG_PIN_B12 312\n#define CFG_PIN_B13 313\n#define CFG_PIN_B14 314\n#define CFG_PIN_B15 315\n#define CFG_PIN_B16 316\n#define CFG_PIN_B17 317\n#define CFG_PIN_B18 318\n#define CFG_PIN_B19 319\n#define CFG_PIN_B20 320\n#define CFG_PIN_B21 321\n#define CFG_PIN_B22 322\n#define CFG_PIN_B23 323\n#define CFG_PIN_B24 324\n#define CFG_PIN_B25 325\n#define CFG_PIN_B26 326\n#define CFG_PIN_B27 327\n#define CFG_PIN_B28 328\n#define CFG_PIN_B29 329\n#define CFG_PIN_B30 330\n#define CFG_PIN_B31 331\n\n#define CFG_PIN_C0 350\n#define CFG_PIN_C1 351\n#define CFG_PIN_C2 352\n#define CFG_PIN_C3 353\n#define CFG_PIN_C4 354\n#define CFG_PIN_C5 355\n#define CFG_PIN_C6 356\n#define CFG_PIN_C7 357\n#define CFG_PIN_C8 358\n#define CFG_PIN_C9 359\n#define CFG_PIN_C10 360\n#define CFG_PIN_C11 361\n#define CFG_PIN_C12 362\n#define CFG_PIN_C13 363\n#define CFG_PIN_C14 364\n#define CFG_PIN_C15 365\n#define CFG_PIN_C16 366\n#define CFG_PIN_C17 367\n#define CFG_PIN_C18 368\n#define CFG_PIN_C19 369\n#define CFG_PIN_C20 370\n#define CFG_PIN_C21 371\n#define CFG_PIN_C22 372\n#define CFG_PIN_C23 373\n#define CFG_PIN_C24 374\n#define CFG_PIN_C25 375\n#define CFG_PIN_C26 376\n#define CFG_PIN_C27 377\n#define CFG_PIN_C28 378\n#define CFG_PIN_C29 379\n#define CFG_PIN_C30 380\n#define CFG_PIN_C31 381\n\n#define CFG_PIN_P0 400\n#define CFG_PIN_P1 401\n#define CFG_PIN_P2 402\n#define CFG_PIN_P3 403\n#define CFG_PIN_P4 404\n#define CFG_PIN_P5 405\n#define CFG_PIN_P6 406\n#define CFG_PIN_P7 407\n#define CFG_PIN_P8 408\n#define CFG_PIN_P9 409\n#define CFG_PIN_P10 410\n#define CFG_PIN_P11 411\n#define CFG_PIN_P12 412\n#define CFG_PIN_P13 413\n#define CFG_PIN_P14 414\n#define CFG_PIN_P15 415\n#define CFG_PIN_P16 416\n#define CFG_PIN_P17 417\n#define CFG_PIN_P18 418\n#define CFG_PIN_P19 419\n#define CFG_PIN_P20 420\n#define CFG_PIN_P21 421\n#define CFG_PIN_P22 422\n#define CFG_PIN_P23 423\n#define CFG_PIN_P24 424\n#define CFG_PIN_P25 425\n#define CFG_PIN_P26 426\n#define CFG_PIN_P27 427\n#define CFG_PIN_P28 428\n#define CFG_PIN_P29 429\n#define CFG_PIN_P30 430\n#define CFG_PIN_P31 431\n#define CFG_PIN_P32 432\n#define CFG_PIN_P33 433\n#define CFG_PIN_P34 434\n#define CFG_PIN_P35 435\n#define CFG_PIN_P36 436\n#define CFG_PIN_P37 437\n#define CFG_PIN_P38 438\n#define CFG_PIN_P39 439\n#define CFG_PIN_P40 440\n#define CFG_PIN_P41 441\n#define CFG_PIN_P42 442\n#define CFG_PIN_P43 443\n#define CFG_PIN_P44 444\n#define CFG_PIN_P45 445\n#define CFG_PIN_P46 446\n#define CFG_PIN_P47 447\n#define CFG_PIN_P48 448\n#define CFG_PIN_P49 449\n#define CFG_PIN_P50 450\n#define CFG_PIN_P51 451\n#define CFG_PIN_P52 452\n#define CFG_PIN_P53 453\n#define CFG_PIN_P54 454\n#define CFG_PIN_P55 455\n#define CFG_PIN_P56 456\n#define CFG_PIN_P57 457\n#define CFG_PIN_P58 458\n#define CFG_PIN_P59 459\n#define CFG_PIN_P60 460\n#define CFG_PIN_P61 461\n#define CFG_PIN_P62 462\n#define CFG_PIN_P63 463\n\n#define CFG_PIN_LORA_MISO 1001\n#define CFG_PIN_LORA_MOSI 1002\n#define CFG_PIN_LORA_SCK 1003\n#define CFG_PIN_LORA_CS 1004\n#define CFG_PIN_LORA_BOOT 1005\n#define CFG_PIN_LORA_RESET 1006\n#define CFG_PIN_IRRXLED 1007\n#define CFG_PIN_IRTXLED 1008\n#define CFG_PIN_LCD_RESET 1009\n#define CFG_PIN_LCD_ENABLE 1010\n#define CFG_PIN_LCD_DATALINE4 1011\n#define CFG_PIN_LCD_DATALINE5 1012\n#define CFG_PIN_LCD_DATALINE6 1013\n#define CFG_PIN_LCD_DATALINE7 1014\n#define CFG_NUM_LCD_COLUMNS 1015\n#define CFG_NUM_LCD_ROWS 1016\n\n//RoboHAT MM1 pinout\n#define CFG_PIN_RCC0 1017\n#define CFG_PIN_RCC1 1018\n#define CFG_PIN_RCC2 1019\n#define CFG_PIN_RCC3 1020\n#define CFG_PIN_RCC4 1021\n#define CFG_PIN_RCC5 1022\n#define CFG_PIN_RCC6 1023\n#define CFG_PIN_RCC7 1024\n#define CFG_PIN_SERVO0 1025\n#define CFG_PIN_SERVO1 1026\n#define CFG_PIN_SERVO2 1027\n#define CFG_PIN_SERVO3 1028\n#define CFG_PIN_SERVO4 1029\n#define CFG_PIN_SERVO5 1030\n#define CFG_PIN_SERVO6 1031\n#define CFG_PIN_SERVO7 1032\n#define CFG_PIN_SERVO8 1033\n#define CFG_PIN_PI_TX 1034\n#define CFG_PIN_PI_RX 1035\n#define CFG_PIN_GPS_SDA 1036\n#define CFG_PIN_GPS_SCL 1037\n#define CFG_PIN_GPS_TX 1038\n#define CFG_PIN_GPS_RX 1039\n#define CFG_PIN_GROVE0 1040\n#define CFG_PIN_GROVE1 1041\n#define CFG_PIN_SS 1042\n\n// Adafruit Grand Central M4\n#define CFG_PIN_D33 183\n#define CFG_PIN_D34 184\n#define CFG_PIN_D35 185\n#define CFG_PIN_D36 186\n#define CFG_PIN_D37 187\n#define CFG_PIN_D38 188\n#define CFG_PIN_D39 189\n#define CFG_PIN_D40 190\n#define CFG_PIN_D41 191\n#define CFG_PIN_D42 192\n#define CFG_PIN_D43 193\n#define CFG_PIN_D44 194\n#define CFG_PIN_D45 195\n#define CFG_PIN_D46 196\n#define CFG_PIN_D47 197\n#define CFG_PIN_D48 198\n#define CFG_PIN_D49 199\n#define CFG_PIN_D50 259\n#define CFG_PIN_D51 260\n#define CFG_PIN_D52 261\n#define CFG_PIN_D53 262\n\n#define CFG_PIN_TX1 263\n#define CFG_PIN_TX2 264\n#define CFG_PIN_TX3 265\n#define CFG_PIN_RX1 266\n#define CFG_PIN_RX2 267\n#define CFG_PIN_RX3 268\n#define CFG_PIN_SCL1 269\n#define CFG_PIN_SDA1 270\n#define CFG_PIN_PCC_D0 271\n#define CFG_PIN_PCC_D1 272\n#define CFG_PIN_PCC_D2 273\n#define CFG_PIN_PCC_D3 274\n#define CFG_PIN_PCC_D4 275\n#define CFG_PIN_PCC_D5 276\n#define CFG_PIN_PCC_D6 277\n#define CFG_PIN_PCC_D7 278\n#define CFG_PIN_PCC_D8 279\n#define CFG_PIN_PCC_D9 280\n#define CFG_PIN_PCC_D10 281\n#define CFG_PIN_PCC_D11 282\n#define CFG_PIN_PCC_D12 283\n#define CFG_PIN_PCC_D13 284\n#define CFG_PIN_CC_DEN1 285\n#define CFG_PIN_CC_DEN2 286\n#define CFG_PIN_CC_CLK 287\n#define CFG_PIN_XCC_CLK 288\n\n\n#define CFG_PIN_JDPWR_PRE_SENSE 1100\n#define CFG_PIN_JDPWR_GND_SENSE 1101\n#define CFG_PIN_JDPWR_PULSE 1102\n#define CFG_PIN_JDPWR_OVERLOAD_LED 1103\n#define CFG_PIN_JDPWR_ENABLE 1104\n#define CFG_PIN_JDPWR_FAULT 1105\n\n#define CFG_USER_CFG_0 2000\n#define CFG_USER_CFG_1 2001\n#define CFG_USER_CFG_2 2002\n#define CFG_USER_CFG_3 2003\n#define CFG_USER_CFG_4 2004\n#define CFG_USER_CFG_5 2005\n#define CFG_USER_CFG_6 2006\n#define CFG_USER_CFG_7 2007\n#define CFG_USER_CFG_8 2008\n#define CFG_USER_CFG_9 2009\n\n#define CFG_ARCADE_CFG_0 2100\n#define CFG_ARCADE_CFG_1 2101\n#define CFG_ARCADE_SCREEN_WIDTH 2102\n#define CFG_ARCADE_SCREEN_HEIGHT 2103\n\n#endif\n",
            "console.ts": "/// <reference no-default-lib=\"true\"/>\n\nenum ConsolePriority {\n    Debug = 0,\n    Log = 1,\n    Warning = 2,\n    Error = 3,\n    Silent = 4\n}\n\n/**\n * Reading and writing data to the console output.\n */\n//% weight=12 color=#002050 icon=\"\\uf120\"\n//% advanced=true\nnamespace console {\n    type Listener = (priority: ConsolePriority, text: string) => void;\n\n    /**\n     * Minimum priority to send messages to listeners\n     */\n    export let minPriority = ConsolePriority.Log;\n\n    //% whenUsed\n    const listeners: Listener[] = [\n        function (priority: ConsolePriority, text: string) { control.__log(priority, text); }\n    ];\n\n    export function add(priority: ConsolePriority, message: any) {\n        if (priority < minPriority) return;\n        let text = inspect(message);\n        // add new line\n        text += \"\\n\";\n        // send to listeners\n        for (let i = 0; i < listeners.length; ++i)\n            listeners[i](priority, text);\n    }\n\n    export function debug(text: any) {\n        add(ConsolePriority.Debug, text);\n    }\n\n    export function warn(text: any) {\n        add(ConsolePriority.Warning, text);\n    }\n\n    export function error(text: any) {\n        add(ConsolePriority.Error, text);\n    }\n\n    /**\n     * Write a line of text to the console output.\n     * @param value to send\n     */\n    //% weight=90\n    //% help=console/log blockGap=8\n    //% blockId=console_log block=\"console log $value\"\n    //% value.shadow=text\n    export function log(value: any): void {\n        add(ConsolePriority.Log, value);\n    }\n\n    /**\n     * Write a name:value pair as a line of text to the console output.\n     * @param name name of the value stream, eg: \"x\"\n     * @param value to write\n     */\n    //% weight=88 blockGap=8\n    //% help=console/log-value\n    //% blockId=console_log_value block=\"console|log value %name|= %value\"\n    //% name.shadow=text\n    //% value.shadow=math_number\n    export function logValue(name: any, value: any): void {\n        log(name ? `${inspect(name)}: ${inspect(value)}` : `${inspect(value)}`)\n    }\n\n    /**\n     * Convert any object or value to a string representation\n     * @param obj value to be converted to a string\n     * @param maxElements [optional] max number values in an object to include in output\n     */\n    export function inspect(obj: any, maxElements = 20): string {\n        if (typeof obj == \"string\") {\n            return obj;\n        } else if (typeof obj == \"number\") {\n            return \"\" + obj;\n        } else if (Array.isArray(obj)) {\n            const asArr = (obj as Array<string>);\n            if (asArr.length <= maxElements) {\n                return asArr.join(\",\");\n            } else {\n                return `${asArr.slice(0, maxElements).join(\",\")}...`;\n            }\n        } else {\n            const asString = obj + \"\";\n            if (asString != \"[object Object]\"\n                && asString != \"[Object]\") { // on arcade at least, default toString is [Object] on hardware instead of standard\n                return asString;\n            }\n\n            let keys = Object.keys(obj);\n            const snipped = keys.length > maxElements;\n            if (snipped) {\n                keys = keys.slice(0, maxElements);\n            }\n\n            return `{${\n                keys.reduce(\n                    (prev, currKey) => prev + `\\n    ${currKey}: ${obj[currKey]}`,\n                    \"\"\n                ) + (snipped ? \"\\n    ...\" : \"\")\n            }\n}`;\n        }\n    }\n\n    /**\n     * Adds a listener for the log messages\n     * @param listener\n     */\n    //%\n    export function addListener(listener: (priority: ConsolePriority, text: string) => void) {\n        if (!listener || listeners.indexOf(listener) > -1) return;\n        listeners.push(listener);\n    }\n\n    /**\n     * Removes a listener\n     * @param listener\n     */\n    //%\n    export function removeListener(listener: (priority: ConsolePriority, text: string) => void) {\n        if (!listener) return;\n        const i = listeners.indexOf(listener);\n        if (i > -1)\n            listeners.splice(i, 1);\n    }\n}",
            "control.cpp": "#include \"pxt.h\"\n\n#if defined(NRF52_SERIES) || defined(PICO_BOARD)\n#define _estack __StackTop\n#endif\nextern uint32_t _estack;\n\nenum EventFlags {\n    //%\n    QueueIfBusy = MESSAGE_BUS_LISTENER_QUEUE_IF_BUSY,\n    //%\n    DropIfBusy = MESSAGE_BUS_LISTENER_DROP_IF_BUSY,\n    //%\n    Reentrant = MESSAGE_BUS_LISTENER_REENTRANT\n};\n\n\nnamespace control {\n\n/**\n * Gets the number of milliseconds elapsed since power on.\n */\n//% help=control/millis weight=50\n//% blockId=control_running_time block=\"millis (ms)\"\nint millis() {\n    return system_timer_current_time();\n}\n\n/**\n * Gets current time in microseconds. Overflows every ~18 minutes.\n */\n//%\nint micros() {\n    return system_timer_current_time_us() & 0x3fffffff;\n}\n\n/**\n * Schedules code that run in the background.\n */\n//% help=control/in-background blockAllowMultiple=1 afterOnStart=true\n//% blockId=\"control_in_background\" block=\"run in background\" blockGap=8\nvoid inBackground(Action a) {\n    runInParallel(a);\n}\n\n/**\n * Registers an event handler.\n */\n//% weight=20 blockGap=8 blockId=\"control_on_event\" block=\"on event|from\n//% src=control_event_source_id|with value %value=control_event_value_id\" % help=control/on-event %\n//% blockExternalInputs=1\nvoid onEvent(int src, int value, Action handler, int flags = 0) {\n    if (!flags)\n        flags = ::EventFlags::QueueIfBusy;\n    registerWithDal(src, value, handler, (int)flags);\n}\n\n/**\n * Blocks the calling thread until the specified event is raised.\n */\n//% help=control/wait-for-event async\n//% blockId=control_wait_for_event block=\"wait for event|from %src|with value %value\"\nvoid waitForEvent(int src, int value) {\n    pxt::waitForEvent(src, value);\n}\n\n/**\n * Announce that an event happened to registered handlers.\n * @param src ID of the MicroBit Component that generated the event\n * @param value Component specific code indicating the cause of the event.\n */\n//% weight=21 blockGap=12 blockId=\"control_raise_event\"\n//% help=control/raise-event\n//% block=\"raise event|from %src|with value %value\" blockExternalInputs=1\nvoid raiseEvent(int src, int value) {\n    Event evt(src, value);\n}\n\n/**\n * Gets the value of the last event executed on the bus\n */\n//% blockId=control_event_value\" block=\"event value\"\n//% help=control/event-value\n//% weight=18\nint eventValue() {\n    return pxt::lastEvent.value;\n}\n\n/**\n * Gets the timestamp of the last event executed on the bus\n */\n//% blockId=control_event_timestamp\" block=\"event timestamp\"\n//% help=control/event-timestamp\n//% weight=19 blockGap=8\nint eventTimestamp() {\n    return pxt::lastEvent.timestamp;\n}\n\n/**\n * Determine the version of system software currently running.\n */\n//% blockId=\"control_device_dal_version\" block=\"device dal version\"\n//% help=control/device-dal-version\nString deviceDalVersion() {\n    return mkString(device.getVersion());\n}\n\n/**\n * Allocates the next user notification event\n */\n//% help=control/allocate-notify-event\nint allocateNotifyEvent() {\n    return ::allocateNotifyEvent();\n}\n\n/**\n *\n */\n//%\nvoid __log(int priority, String text) {\n    if (NULL == text)\n        return;\n    pxt::sendSerial(text->getUTF8Data(), text->getUTF8Size());\n}\n\n/** Write a message to DMESG debugging buffer. */\n//%\nvoid dmesg(String s) {\n    DMESG(\"# %s\", s->getUTF8Data());\n}\n\n/** Write a message and value (pointer) to DMESG debugging buffer. */\n//%\nvoid dmesgPtr(String str, Object_ ptr) {\n    DMESG(\"# %s: %p\", str->getUTF8Data(), ptr);\n}\n\n//%\nuint32_t _ramSize() {\n    return (uint32_t)&_estack & 0x1fffffff;\n}\n\n} // namespace control",
            "control.ts": "/**\n * Program controls and events.\n */\n//% weight=90 color=\"#FF5722\" icon=\"\\uf110\" advanced=true\nnamespace control {\n    /**\n     * Run other code in the parallel.\n     */\n    //% hidden=1\n    export function runInParallel(a: () => void) {\n        control.inBackground(a);\n    }\n\n    /**\n     * Deprecated, use ``control.runInParallel`` instead.\n     */\n    //% deprecated=1 hidden=1 help=control/run-in-background blockAllowMultiple=1 afterOnStart=true\n    //% blockId=\"control_run_in_background\" block=\"run in background\" blockGap=8 weight=0\n    export function runInBackground(a: () => void) {\n        control.inBackground(a);\n    }\n\n    export const enum PXT_PANIC {\n        CODAL_OOM = 20,\n        GC_OOM = 21,\n        GC_TOO_BIG_ALLOCATION = 22,\n        CODAL_HEAP_ERROR = 30,\n        CODAL_NULL_DEREFERENCE = 40,\n        CODAL_USB_ERROR = 50,\n        CODAL_HARDWARE_CONFIGURATION_ERROR = 90,\n\n        INVALID_BINARY_HEADER = 901,\n        OUT_OF_BOUNDS = 902,\n        REF_DELETED = 903,\n        SIZE = 904,\n        INVALID_VTABLE = 905,\n        INTERNAL_ERROR = 906,\n        NO_SUCH_CONFIG = 907,\n        NO_SUCH_PIN = 908,\n        INVALID_ARGUMENT = 909,\n        MEMORY_LIMIT_EXCEEDED = 910,\n        SCREEN_ERROR = 911,\n        MISSING_PROPERTY = 912,\n        INVALID_IMAGE = 913,\n        CALLED_FROM_ISR = 914,\n        HEAP_DUMPED = 915,\n        STACK_OVERFLOW = 916,\n        BLOCKING_TO_STRING = 917,\n        VM_ERROR = 918,\n        SETTINGS_CLEARED = 920,\n        SETTINGS_OVERLOAD = 921,\n        SETTINGS_SECRET_MISSING = 922,\n        DELETE_ON_CLASS = 923,\n\n        CAST_FIRST = 980,\n        CAST_FROM_UNDEFINED = 980,\n        CAST_FROM_BOOLEAN = 981,\n        CAST_FROM_NUMBER = 982,\n        CAST_FROM_STRING = 983,\n        CAST_FROM_OBJECT = 984,\n        CAST_FROM_FUNCTION = 985,\n        CAST_FROM_NULL = 989,\n\n        UNHANDLED_EXCEPTION = 999,\n    }\n    /**\n     * Display an error code and stop the program.\n     * @param code an error number to display. eg: 5\n     */\n    //% help=control/panic weight=29\n    //% blockId=\"control_panic\" block=\"panic %code\"\n    //% shim=pxtrt::panic\n    export function panic(code: number) {}\n\n    /**\n     * Display an error code and stop the program when the assertion is `false`.\n     */\n    //% help=control/assert weight=30\n    //% blockId=\"control_assert\" block=\"assert %cond|with value %code\"\n    export function assert(cond: boolean, code: number) {\n        if (!cond) {\n            fail('Assertion failed, code=' + code);\n        }\n    }\n\n    export function fail(message: string) {\n        console.log('Fatal failure: ');\n        console.log(message);\n        dmesg(message);\n        panic(108);\n    }\n\n    let _evSource = 0x8000;\n    export function allocateEventSource() {\n        return ++_evSource;\n    }\n\n    export class AnimationQueue {\n        running: boolean;\n        eventID: number;\n        public interval: number;\n\n        constructor() {\n            this.running = false;\n            this.eventID = control.allocateNotifyEvent();\n            this.interval = 1;\n        }\n\n        /**\n         * Runs 'render' in a loop until it returns false or the 'stop' function is called\n         */\n        runUntilDone(render: () => boolean) {\n            const evid = this.eventID;\n\n            // if other animation, wait for turn\n            if (this.running) control.waitForEvent(DAL.DEVICE_ID_NOTIFY, evid);\n\n            // check if the animation hasn't been cancelled since we've waiting\n            if (this.isCancelled(evid)) return;\n\n            // run animation\n            this.running = true;\n            while (this.running && !this.isCancelled(evid) && render()) {\n                pause(this.interval);\n            }\n\n            // check if the animation hasn't been cancelled since we've been waiting\n            if (this.isCancelled(evid)) return;\n\n            // we're done\n            this.running = false;\n            // unblock 1 fiber\n            control.raiseEvent(DAL.DEVICE_ID_NOTIFY_ONE, this.eventID);\n        }\n\n        isCancelled(evid: number) {\n            return this.eventID !== evid;\n        }\n\n        /**\n         * Cancels the current running animation and clears the queue\n         */\n        cancel() {\n            if (this.running) {\n                this.running = false;\n                const evid = this.eventID;\n                this.eventID = control.allocateNotifyEvent();\n                // unblock fibers\n                control.raiseEvent(DAL.DEVICE_ID_NOTIFY, evid);\n            }\n        }\n    }\n\n    //% shim=pxt::getConfig\n    export declare function getConfigValue(key: int32, defl: int32): number;\n\n    //% shim=pxt::programHash\n    export declare function programHash(): number;\n\n    //% shim=pxt::programName\n    export declare function programName(): string;\n\n    //% shim=control::_ramSize\n    function _ramSize() {\n        return 32 * 1024 * 1024;\n    }\n\n    /** Returns estimated size of memory in bytes. */\n    export function ramSize() {\n        return getConfigValue(DAL.CFG_RAM_BYTES, 0) || _ramSize();\n    }\n\n    /** Runs the function and returns run time in microseconds. */\n    export function benchmark(f: () => void) {\n        const t0 = micros();\n        f();\n        let t = micros() - t0;\n        if (t < 0) t += 0x3fffffff;\n        return t;\n    }\n}\n\n/**\n * Convert any value to text\n * @param value value to be converted to text\n */\n//% help=text/convert-to-text weight=1\n//% block=\"convert $value=math_number to text\"\n//% blockId=variable_to_text blockNamespace=\"text\"\nfunction convertToText(value: any): string {\n    return '' + value;\n}\n",
            "controlgc.cpp": "#include \"pxtbase.h\"\n\n\nnamespace control {\n    /**\n     * Force GC and dump basic information about heap.\n     */\n    //%\n    void gc() {\n        pxt::gc(1);\n    }\n\n    /**\n     * Force GC and halt waiting for debugger to do a full heap dump.\n     */\n    //%\n    void heapDump() {\n        pxt::gc(2);\n        soft_panic(PANIC_HEAP_DUMPED);\n    }\n\n\n    /**\n     * Set flags used when connecting an external debugger.\n     */\n    //%\n    void setDebugFlags(int flags) {\n        debugFlags = flags;\n    }\n\n    /**\n     * Record a heap snapshot to debug memory leaks.\n     */\n    //%\n    void heapSnapshot() {\n        // only in JS backend for now\n    }\n\n    /**\n     * Return true if profiling is enabled in the current build.\n     */\n    //%\n    bool profilingEnabled() {\n#ifdef PXT_PROFILE\n        return true;\n#else\n        return false;\n#endif\n    }\n}\n",
            "core.cpp": "#include \"pxtbase.h\"\n#include <limits.h>\n#include <stdlib.h>\n\nusing namespace std;\n\n#define p10(v) __builtin_powi(10, v)\n\n// try not to create cons-strings shorter than this\n#define SHORT_CONCAT_STRING 50\n\nnamespace pxt {\n\nPXT_DEF_STRING(emptyString, \"\")\n\nstatic HandlerBinding *handlerBindings;\n\nHandlerBinding *nextBinding(HandlerBinding *curr, int source, int value) {\n    for (auto p = curr; p; p = p->next) {\n        // DEVICE_ID_ANY == DEVICE_EXT_ANY == 0\n        if ((p->source == source || p->source == 0) &&\n            (value == -1 || p->value == value || p->value == 0)) {\n            return p;\n        }\n    }\n    return 0;\n}\n\nHandlerBinding *findBinding(int source, int value) {\n    return nextBinding(handlerBindings, source, value);\n}\n\nvoid setBinding(int source, int value, Action act) {\n    HandlerBinding *curr = NULL;\n    for (auto p = handlerBindings; p; p = p->next) {\n        if ((p->source == source) && (p->value == value)) {\n            curr = p;\n            break;\n        }\n    }\n    if (curr) {\n        curr->action = act;\n        return;\n    }\n    curr = new (app_alloc(sizeof(HandlerBinding))) HandlerBinding();\n    curr->next = handlerBindings;\n    curr->source = source;\n    curr->value = value;\n    curr->action = act;\n    registerGC(&curr->action);\n    handlerBindings = curr;\n}\n\nvoid coreReset() {\n    // these are allocated on GC heap, so they will go away together with the reset\n    handlerBindings = NULL;\n}\n\nstruct EmptyBufferLayout {\n    const void *vtable;\n    // data needs to be word-aligned, so we use 32 bits for length\n    int length;\n    uint8_t data[1];\n};\n\nstatic const EmptyBufferLayout emptyBuffer[1] = {{&pxt::buffer_vt, 0, {0}}};\n\n#if PXT_UTF8\nint utf8Len(const char *data, int size) {\n    int len = 0;\n    for (int i = 0; i < size; ++i) {\n        char c = data[i];\n        len++;\n        if ((c & 0x80) == 0x00) {\n            // skip\n        } else if ((c & 0xe0) == 0xc0) {\n            i++;\n        } else if ((c & 0xf0) == 0xe0) {\n            i += 2;\n        } else {\n            // error; just skip\n        }\n    }\n    return len;\n}\n\nconst char *utf8Skip(const char *data, int size, int skip) {\n    int len = 0;\n    for (int i = 0; i <= size; ++i) {\n        char c = data[i];\n        len++;\n        if (len > skip)\n            return data + i;\n        if ((c & 0x80) == 0x00) {\n            // skip\n        } else if ((c & 0xe0) == 0xc0) {\n            i++;\n        } else if ((c & 0xf0) == 0xe0) {\n            i += 2;\n        } else {\n            // error; just skip over\n        }\n    }\n    return NULL;\n}\n\nstatic char *write3byte(char *dst, uint32_t charCode) {\n    if (dst) {\n        *dst++ = 0xe0 | (charCode >> 12);\n        *dst++ = 0x80 | (0x3f & (charCode >> 6));\n        *dst++ = 0x80 | (0x3f & (charCode >> 0));\n    }\n    return dst;\n}\n\nstatic char *write2byte(char *dst, uint32_t charCode) {\n    if (dst) {\n        *dst++ = 0xc0 | (charCode >> 6);\n        *dst++ = 0x80 | (0x3f & charCode);\n    }\n    return dst;\n}\n\nstatic int utf8canon(char *dst, const char *data, int size) {\n    int outsz = 0;\n    for (int i = 0; i < size;) {\n        uint8_t c = data[i];\n        uint32_t charCode = c;\n        if ((c & 0x80) == 0x00) {\n            charCode = c;\n            i++;\n        } else if ((c & 0xe0) == 0xc0 && i + 1 < size && (data[i + 1] & 0xc0) == 0x80) {\n            charCode = ((c & 0x1f) << 6) | (data[i + 1] & 0x3f);\n            if (charCode < 0x80)\n                goto error;\n            else\n                i += 2;\n        } else if ((c & 0xf0) == 0xe0 && i + 2 < size && (data[i + 1] & 0xc0) == 0x80 &&\n                   (data[i + 2] & 0xc0) == 0x80) {\n            charCode = ((c & 0x0f) << 12) | (data[i + 1] & 0x3f) << 6 | (data[i + 2] & 0x3f);\n            // don't exclude surrogate pairs, since we're generating them\n            if (charCode < 0x800 /*|| (0xd800 <= charCode && charCode <= 0xdfff)*/)\n                goto error;\n            else\n                i += 3;\n        } else if ((c & 0xf8) == 0xf0 && i + 3 < size && (data[i + 1] & 0xc0) == 0x80 &&\n                   (data[i + 2] & 0xc0) == 0x80 && (data[i + 3] & 0xc0) == 0x80) {\n            charCode = ((c & 0x07) << 18) | (data[i + 1] & 0x3f) << 12 | (data[i + 2] & 0x3f) << 6 |\n                       (data[i + 3] & 0x3f);\n            if (charCode < 0x10000 || charCode > 0x10ffff)\n                goto error;\n            else\n                i += 4;\n        } else {\n            goto error;\n        }\n\n        if (charCode < 0x80) {\n            outsz += 1;\n            if (dst)\n                *dst++ = charCode;\n        } else if (charCode < 0x800) {\n            outsz += 2;\n            dst = write2byte(dst, charCode);\n        } else if (charCode < 0x10000) {\n            outsz += 3;\n            dst = write3byte(dst, charCode);\n        } else {\n            outsz += 6; // a surrogate pair\n            charCode -= 0x10000;\n            dst = write3byte(dst, 0xd800 + (charCode >> 10));\n            dst = write3byte(dst, 0xdc00 + (charCode & 0x3ff));\n        }\n\n        continue;\n\n    error:\n        i++;\n        outsz += 2;\n        dst = write2byte(dst, c);\n    }\n    return outsz;\n}\n\nstatic int utf8CharCode(const char *data) {\n    unsigned char c = *data;\n    if ((c & 0x80) == 0) {\n        return c;\n    } else if ((c & 0xe0) == 0xc0) {\n        return ((c & 0x1f) << 6) | (data[1] & 0x3f);\n    } else if ((c & 0xf0) == 0xe0) {\n        return ((c & 0x0f) << 12) | (data[1] & 0x3f) << 6 | (data[2] & 0x3f);\n    } else {\n        return c; // error\n    }\n}\n\nstatic bool isUTF8(const char *data, int len) {\n    for (int i = 0; i < len; ++i) {\n        if (data[i] & 0x80)\n            return true;\n    }\n    return false;\n}\n\nstatic void setupSkipList(String r, const char *data, int packed) {\n    char *dst = (char *)(packed ? PXT_SKIP_DATA_PACK(r) : PXT_SKIP_DATA_IND(r));\n    auto len = r->skip.size;\n    if (data)\n        memcpy(dst, data, len);\n    dst[len] = 0;\n    const char *ptr = dst;\n    auto skipEntries = PXT_NUM_SKIP_ENTRIES(r);\n    auto lst = packed ? r->skip_pack.list : r->skip.list;\n    for (int i = 0; i < skipEntries; ++i) {\n        ptr = utf8Skip(ptr, (int)(len - (ptr - dst)), PXT_STRING_SKIP_INCR);\n        if (!ptr)\n            oops(80);\n        lst[i] = ptr - dst;\n    }\n}\n#endif\n\nString mkStringCore(const char *data, int len) {\n    if (len < 0)\n        len = (int)strlen(data);\n    if (len == 0)\n        return (String)emptyString;\n\n    auto vt = &string_inline_ascii_vt;\n    String r;\n\n#if PXT_UTF8\n    if (data && isUTF8(data, len)) {\n        vt = len >= PXT_STRING_MIN_SKIP ? &string_skiplist16_packed_vt : &string_inline_utf8_vt;\n    }\n    if (vt == &string_skiplist16_packed_vt) {\n        int ulen = utf8Len(data, len);\n        r = new (gcAllocate(sizeof(void *) + 2 + 2 + (ulen / PXT_STRING_SKIP_INCR) * 2 + len + 1))\n            BoxedString(vt);\n        r->skip_pack.size = len;\n        r->skip_pack.length = ulen;\n        setupSkipList(r, data, 1);\n    } else\n#endif\n    {\n        // for ASCII and UTF8 the layout is the same\n        r = new (gcAllocate(sizeof(void *) + 2 + len + 1)) BoxedString(vt);\n        r->ascii.length = len;\n        if (data)\n            memcpy(r->ascii.data, data, len);\n        r->ascii.data[len] = 0;\n    }\n\n    MEMDBG(\"mkString: len=%d => %p\", len, r);\n    return r;\n}\n\nString mkString(const char *data, int len) {\n#if PXT_UTF8\n    if (len < 0)\n        len = (int)strlen(data);\n    if (len == 0)\n        return (String)emptyString;\n\n    int sz = utf8canon(NULL, data, len);\n    if (sz == len)\n        return mkStringCore(data, len);\n    // this could be optimized, but it only kicks in when the string isn't valid utf8\n    // (or we need to introduce surrogate pairs) which is unlikely to be performance critical\n    char *tmp = (char *)app_alloc(sz);\n    utf8canon(tmp, data, len);\n    auto r = mkStringCore(tmp, sz);\n    app_free(tmp);\n    return r;\n#else\n    return mkStringCore(data, len);\n#endif\n}\n\n#if PXT_UTF8\n// This converts surrogate pairs, which are encoded as 2 characters of 3 bytes each\n// into a proper 4 byte utf-8 character.\nuint32_t toRealUTF8(String str, uint8_t *dst) {\n    auto src = str->getUTF8Data();\n    auto len = str->getUTF8Size();\n    auto dlen = 0;\n\n    for (unsigned i = 0; i < len; ++i) {\n        if ((uint8_t)src[i] == 0xED && i + 5 < len) {\n            auto c0 = utf8CharCode(src + i);\n            auto c1 = utf8CharCode(src + i + 3);\n            if (0xd800 <= c0 && c0 < 0xdc00 && 0xdc00 <= c1 && c1 < 0xe000) {\n                i += 5;\n                auto charCode = ((c0 - 0xd800) << 10) + (c1 - 0xdc00) + 0x10000;\n                if (dst) {\n                    dst[dlen] = 0xf0 | (charCode >> 18);\n                    dst[dlen + 1] = 0x80 | (0x3f & (charCode >> 12));\n                    dst[dlen + 2] = 0x80 | (0x3f & (charCode >> 6));\n                    dst[dlen + 3] = 0x80 | (0x3f & (charCode >> 0));\n                }\n                dlen += 4;\n            }\n        } else {\n            if (dst)\n                dst[dlen] = src[i];\n            dlen++;\n        }\n    }\n    return dlen;\n}\n#endif\n\nBuffer mkBuffer(const void *data, int len) {\n    if (len <= 0)\n        return (Buffer)emptyBuffer;\n    Buffer r = new (gcAllocate(sizeof(BoxedBuffer) + len)) BoxedBuffer();\n    r->length = len;\n    if (data)\n        memcpy(r->data, data, len);\n    else\n        memset(r->data, 0, len);\n    MEMDBG(\"mkBuffer: len=%d => %p\", len, r);\n    return r;\n}\n\nstatic unsigned random_value = 0xC0DA1;\n\n//%\nvoid seedRandom(unsigned seed) {\n    random_value = seed;\n}\n\n//% expose\nvoid seedAddRandom(unsigned seed) {\n    random_value ^= 0xCA2557CB * seed;\n}\n\nunsigned getRandom(unsigned max) {\n    unsigned m, result;\n\n    do {\n        m = (unsigned)max;\n        result = 0;\n\n        do {\n            // Cycle the LFSR (Linear Feedback Shift Register).\n            // We use an optimal sequence with a period of 2^32-1, as defined by Bruce Schneier here\n            // (a true legend in the field!),\n            // For those interested, it's documented in his paper:\n            // \"Pseudo-Random Sequence Generator for 32-Bit CPUs: A fast, machine-independent\n            // generator for 32-bit Microprocessors\"\n            // https://www.schneier.com/paper-pseudorandom-sequence.html\n            unsigned r = random_value;\n\n            r = ((((r >> 31) ^ (r >> 6) ^ (r >> 4) ^ (r >> 2) ^ (r >> 1) ^ r) & 1) << 31) |\n                (r >> 1);\n\n            random_value = r;\n\n            result = ((result << 1) | (r & 0x00000001));\n        } while (m >>= 1);\n    } while (result > (unsigned)max);\n\n    return result;\n}\n\nTNumber BoxedString::charCodeAt(int pos) {\n#if PXT_UTF8\n    auto ptr = this->getUTF8DataAt(pos);\n    if (!ptr)\n        return TAG_NAN;\n    auto code = utf8CharCode(ptr);\n    if (!code && ptr == this->getUTF8Data() + this->getUTF8Size())\n        return TAG_NAN;\n    return fromInt(code);\n#else\n    if (0 <= pos && pos < this->ascii.length) {\n        return fromInt(this->ascii.data[pos]);\n    } else {\n        return TAG_NAN;\n    }\n#endif\n}\n\nPXT_DEF_STRING(sTrue, \"true\")\nPXT_DEF_STRING(sFalse, \"false\")\nPXT_DEF_STRING(sUndefined, \"undefined\")\nPXT_DEF_STRING(sNull, \"null\")\nPXT_DEF_STRING(sObject, \"[Object]\")\nPXT_DEF_STRING(sFunction, \"[Function]\")\nPXT_DEF_STRING(sNaN, \"NaN\")\nPXT_DEF_STRING(sInf, \"Infinity\")\nPXT_DEF_STRING(sMInf, \"-Infinity\")\n} // namespace pxt\n\n#ifndef X86_64\n\nnamespace String_ {\n\n//%\nString mkEmpty() {\n    return (String)emptyString;\n}\n\n// TODO support var-args somehow?\n\n//%\nString fromCharCode(int code) {\n#if PXT_UTF8\n    char buf[3];\n    int len;\n    code &= 0xffff; // JS semantics\n    if (code < 0x80) {\n        buf[0] = code;\n        len = 1;\n    } else if (code < 0x800) {\n        buf[0] = 0xc0 | (code >> 6);\n        buf[1] = 0x80 | ((code >> 0) & 0x3f);\n        len = 2;\n    } else {\n        buf[0] = 0xe0 | (code >> 12);\n        buf[1] = 0x80 | ((code >> 6) & 0x3f);\n        buf[2] = 0x80 | ((code >> 0) & 0x3f);\n        len = 3;\n    }\n    return mkStringCore(buf, len);\n#else\n    char buf[] = {(char)code, 0};\n    return mkStringCore(buf, 1);\n#endif\n}\n\n//%\nTNumber charCodeAt(String s, int pos) {\n    if (!s)\n        return TAG_NAN;\n    return s->charCodeAt(pos);\n}\n\n//%\nString charAt(String s, int pos) {\n    auto v = charCodeAt(s, pos);\n    if (v == TAG_NAN)\n        return mkEmpty();\n    if (!isInt(v))\n        oops(81);\n    return fromCharCode(numValue(v));\n}\n\n#define IS_CONS(s) ((s)->vtable == &string_cons_vt)\n#define IS_EMPTY(s) ((s) == (String)emptyString)\n\n//%\nString concat(String s, String other) {\n    if (!s)\n        s = (String)sNull;\n    if (!other)\n        other = (String)sNull;\n    if (IS_EMPTY(s))\n        return other;\n    if (IS_EMPTY(other))\n        return s;\n\n    uint32_t lenA, lenB;\n\n#if PXT_UTF8\n    if (IS_CONS(s)) {\n        // (s->cons.left + s->cons.right) + other = s->cons.left + (s->cons.right + other)\n        if (IS_CONS(other) || IS_CONS(s->cons.right))\n            goto mkCons;\n        auto lenAR = s->cons.right->getUTF8Size();\n        lenB = other->getUTF8Size();\n        if (lenAR + lenB > SHORT_CONCAT_STRING)\n            goto mkCons;\n        // if (s->cons.right + other) is short enough, use associativity\n        // to construct a shallower tree; this should keep the live set reasonable\n        // when someone decides to construct a long string by concatenating\n        // single characters\n\n        // allocate [r] first, and keep it alive\n        String r = new (gcAllocate(3 * sizeof(void *))) BoxedString(&string_cons_vt);\n        registerGCObj(r);\n        r->cons.left = s->cons.left;\n        // this concat() might trigger GC\n        r->cons.right = concat(s->cons.right, other);\n        unregisterGCObj(r);\n        return r;\n    }\n#endif\n\n    lenA = s->getUTF8Size();\n    lenB = other->getUTF8Size();\n#if PXT_UTF8\n    if (lenA + lenB > SHORT_CONCAT_STRING)\n        goto mkCons;\n#endif\n    String r;\n    {\n        auto dataA = s->getUTF8Data();\n        auto dataB = other->getUTF8Data();\n        r = mkStringCore(NULL, lenA + lenB);\n        auto dst = (char *)r->getUTF8Data();\n        memcpy(dst, dataA, lenA);\n        memcpy(dst + lenA, dataB, lenB);\n#if PXT_UTF8\n        if (isUTF8(dst, lenA + lenB))\n            r->vtable = &string_inline_utf8_vt;\n#endif\n        return r;\n    }\n\n#if PXT_UTF8\nmkCons:\n    r = new (gcAllocate(3 * sizeof(void *))) BoxedString(&string_cons_vt);\n    r->cons.left = s;\n    r->cons.right = other;\n    return r;\n#endif\n}\n\nint compare(String a, String b) {\n    if (a == b)\n        return 0;\n\n    auto lenA = a->getUTF8Size();\n    auto lenB = b->getUTF8Size();\n    auto dataA = a->getUTF8Data();\n    auto dataB = b->getUTF8Data();\n    auto len = lenA < lenB ? lenA : lenB;\n\n    // this also works for UTF8, provided canonical encoding\n    // which is guaranteed by the constructor\n    for (unsigned i = 0; i <= len; ++i) {\n        unsigned char cA = dataA[i];\n        unsigned char cB = dataB[i];\n        if (cA == cB)\n            continue;\n        return cA < cB ? -1 : 1;\n    }\n    return 0;\n}\n\n//%\nint length(String s) {\n    return s->getLength();\n}\n\n#define isspace(c) ((c) == ' ')\n#define iswhitespace(c)                                                                            \\\n    ((c) == 0x09 || (c) == 0x0B || (c) == 0x0C || (c) == 0x20 || (uint8_t)(c) == 0xA0 ||           \\\n     (c) == 0x0A || (c) == 0x0D)\n\nNUMBER mystrtod(const char *p, char **endp) {\n    while (iswhitespace(*p))\n        p++;\n    NUMBER m = 1;\n    NUMBER v = 0;\n    int dot = 0;\n    int hasDigit = 0;\n    if (*p == '+')\n        p++;\n    if (*p == '-') {\n        m = -1;\n        p++;\n    }\n\n    while (*p) {\n        int c = *p - '0';\n        if (0 <= c && c <= 9) {\n            v *= 10;\n            v += c;\n            if (dot)\n                m /= 10;\n            hasDigit = 1;\n        } else if (!dot && *p == '.') {\n            dot = 1;\n        } else if (!hasDigit) {\n            return NAN;\n        } else {\n            break;\n        }\n        p++;\n    }\n\n    v *= m;\n\n    if (*p == 'e' || *p == 'E') {\n        p++;\n        int pw = (int)strtol(p, endp, 10);\n        v *= p10(pw);\n    } else {\n        *endp = (char *)p;\n    }\n\n    return v;\n}\n\n//%\nTNumber toNumber(String s) {\n    // JSCHECK\n    char *endptr;\n    auto data = s->getUTF8Data();\n    NUMBER v = mystrtod(data, &endptr);\n    if (v == 0.0 || v == -0.0) {\n        // nothing\n    } else if (!isnormal(v))\n        v = NAN;\n    return fromDouble(v);\n}\n\n//%\nString substr(String s, int start, int length) {\n    if (length <= 0)\n        return mkEmpty();\n    auto slen = (int)s->getLength();\n    if (start < 0)\n        start = pxt::max(slen + start, 0);\n    length = pxt::min(length, slen - start);\n    if (length <= 0)\n        return mkEmpty();\n    auto p = s->getUTF8DataAt(start);\n#if PXT_UTF8\n    auto ep = s->getUTF8DataAt(start + length);\n    if (ep == NULL)\n        oops(82);\n    return mkStringCore(p, (int)(ep - p));\n#else\n    return mkStringCore(p, length);\n#endif\n}\n\n//%\nint indexOf(String s, String searchString, int start) {\n    if (!s || !searchString)\n        return -1;\n\n    if (start < 0)\n        start = 0;\n\n    auto dataA0 = s->getUTF8Data();\n    auto dataA = s->getUTF8DataAt(start);\n    auto offset = dataA - dataA0;\n    auto lenA = s->getUTF8Size() - offset;\n    auto lenB = searchString->getUTF8Size();\n\n    if (dataA == NULL || lenB > lenA)\n        return -1;\n\n    auto dataB = searchString->getUTF8Data();\n    auto firstB = dataB[0];\n    while (lenA >= lenB) {\n        if (*dataA == firstB && !memcmp(dataA, dataB, lenB))\n#if PXT_UTF8\n            return utf8Len(dataA0, (int)(dataA - dataA0));\n#else\n            return dataA - dataA0;\n#endif\n        dataA++;\n        lenA--;\n    }\n    return -1;\n}\n\n//%\nint includes(String s, String searchString, int start) {\n    return -1 != indexOf(s, searchString, start);\n}\n\n} // namespace String_\n\nnamespace Boolean_ {\n//%\nbool bang(bool v) {\n    return v == 0;\n}\n} // namespace Boolean_\n\nnamespace pxt {\n\n// ES5 9.5, 9.6\nunsigned toUInt(TNumber v) {\n    if (isInt(v))\n        return numValue(v);\n    if (isSpecial(v)) {\n        if ((intptr_t)v >> 6)\n            return 1;\n        else\n            return 0;\n    }\n    if (!v)\n        return 0;\n\n    NUMBER num = toDouble(v);\n    if (!isnormal(num))\n        return 0;\n#ifdef PXT_USE_FLOAT\n    float rem = fmodf(truncf(num), 4294967296.0);\n#else\n    double rem = fmod(trunc(num), 4294967296.0);\n#endif\n    if (rem < 0.0)\n        rem += 4294967296.0;\n    return (unsigned)rem;\n}\nint toInt(TNumber v) {\n    return (int)toUInt(v);\n}\n\nNUMBER toDouble(TNumber v) {\n    if (v == TAG_NAN || v == TAG_UNDEFINED)\n        return NAN;\n    if (isTagged(v))\n        return toInt(v);\n\n#ifdef PXT64\n    if (isDouble(v))\n        return doubleVal(v);\n#endif\n\n    ValType t = valType(v);\n\n#ifndef PXT64\n    if (t == ValType::Number) {\n        BoxedNumber *p = (BoxedNumber *)v;\n        return p->num;\n    }\n#endif\n\n    if (t == ValType::String) {\n        // TODO avoid allocation\n        auto tmp = String_::toNumber((String)v);\n        auto r = toDouble(tmp);\n        return r;\n    } else {\n        return NAN;\n    }\n}\n\nfloat toFloat(TNumber v) {\n    if (v == TAG_NAN || v == TAG_UNDEFINED)\n        return NAN;\n    // optimize for the int case - this will avoid software conversion when FPU is present\n    if (isTagged(v))\n        return toInt(v);\n    return (float)toDouble(v);\n}\n\n#if !defined(PXT_HARD_FLOAT) && !defined(PXT_USE_FLOAT)\nunion NumberConv {\n    double v;\n    struct {\n        uint32_t word0;\n        uint32_t word1;\n    };\n};\n\nstatic inline TValue doubleToInt(double x) {\n    NumberConv cnv;\n    cnv.v = x;\n\n    if (cnv.word1 == 0 && cnv.word0 == 0)\n        return TAG_NUMBER(0);\n\n    auto ex = (int)((cnv.word1 << 1) >> 21) - 1023;\n\n    // DMESG(\"v=%d/1000 %p %p %d\", (int)(x * 1000), cnv.word0, cnv.word1, ex);\n\n    if (ex < 0 || ex > 29) {\n        // the 'MININT' case\n        if (ex == 30 && cnv.word0 == 0 && cnv.word1 == 0xC1D00000)\n            return (TValue)(0x80000001);\n        return NULL;\n    }\n\n    int32_t r;\n\n    if (ex <= 20) {\n        if (cnv.word0)\n            return TAG_UNDEFINED;\n        if (cnv.word1 << (ex + 12))\n            return TAG_UNDEFINED;\n        r = ((cnv.word1 << 11) | 0x80000000) >> (20 - ex + 11);\n    } else {\n        if (cnv.word0 << (ex - 20))\n            return TAG_UNDEFINED;\n        r = ((cnv.word1 << 11) | 0x80000000) >> (20 - ex + 11);\n        r |= cnv.word0 >> (32 - (ex - 20));\n    }\n\n    if (cnv.word1 >> 31)\n        return TAG_NUMBER(-r);\n    else\n        return TAG_NUMBER(r);\n}\n#else\nstatic inline TValue doubleToInt(NUMBER r) {\n#ifdef PXT64\n    if ((int)r == r)\n        return TAG_NUMBER((int)r);\n#else\n    int ri = ((int)r) << 1;\n    if ((ri >> 1) == r)\n        return (TNumber)(uintptr_t)(ri | 1);\n#endif\n    return TAG_UNDEFINED;\n}\n#endif\n\nTNumber fromDouble(NUMBER r) {\n#ifndef PXT_BOX_DEBUG\n    auto i = doubleToInt(r);\n    if (i)\n        return i;\n#endif\n    if (isnan(r))\n        return TAG_NAN;\n#ifdef PXT64\n    return tvalueFromDouble(r);\n#else\n    BoxedNumber *p = NEW_GC(BoxedNumber);\n    p->num = r;\n    MEMDBG(\"mkNum: %d/1000 => %p\", (int)(r * 1000), p);\n    return (TNumber)p;\n#endif\n}\n\nTNumber fromFloat(float r) {\n    // TODO optimize\n    return fromDouble(r);\n}\n\nTNumber fromInt(int v) {\n    if (canBeTagged(v))\n        return TAG_NUMBER(v);\n    return fromDouble(v);\n}\n\nTNumber fromUInt(unsigned v) {\n#ifndef PXT_BOX_DEBUG\n    if (v <= 0x3fffffff)\n        return TAG_NUMBER(v);\n#endif\n    return fromDouble(v);\n}\n\nTValue fromBool(bool v) {\n    if (v)\n        return TAG_TRUE;\n    else\n        return TAG_FALSE;\n}\n\nTNumber eqFixup(TNumber v) {\n    if (v == TAG_NULL)\n        return TAG_UNDEFINED;\n    if (v == TAG_TRUE)\n        return TAG_NUMBER(1);\n    if (v == TAG_FALSE)\n        return TAG_NUMBER(0);\n    return v;\n}\n\nstatic inline bool eq_core(TValue a, TValue b, ValType ta) {\n#ifndef PXT_BOX_DEBUG\n    auto aa = (intptr_t)a;\n    auto bb = (intptr_t)b;\n\n    // if at least one of the values is tagged, they are not equal\n    if ((aa | bb) & 3)\n        return false;\n#endif\n\n    if (ta == ValType::String)\n        return String_::compare((String)a, (String)b) == 0;\n    else if (ta == ValType::Number)\n        return toDouble(a) == toDouble(b);\n    else\n        return a == b;\n}\n\nbool eqq_bool(TValue a, TValue b) {\n    if (a == TAG_NAN || b == TAG_NAN)\n        return false;\n\n    if (a == b)\n        return true;\n\n    if (bothNumbers(a, b))\n        return false;\n\n    ValType ta = valType(a);\n    ValType tb = valType(b);\n\n    if (ta != tb)\n        return false;\n\n    return eq_core(a, b, ta);\n}\n\nbool eq_bool(TValue a, TValue b) {\n    if (a == TAG_NAN || b == TAG_NAN)\n        return false;\n\n    if (eqFixup(a) == eqFixup(b))\n        return true;\n\n    if (bothNumbers(a, b))\n        return false;\n\n    ValType ta = valType(a);\n    ValType tb = valType(b);\n\n    if ((ta == ValType::String && tb == ValType::Number) ||\n        (tb == ValType::String && ta == ValType::Number))\n        return toDouble(a) == toDouble(b);\n\n    if (ta == ValType::Boolean) {\n        a = eqFixup(a);\n        ta = ValType::Number;\n    }\n    if (tb == ValType::Boolean) {\n        b = eqFixup(b);\n        tb = ValType::Number;\n    }\n\n    if (ta != tb)\n        return false;\n\n    return eq_core(a, b, ta);\n}\n\n// TODO move to assembly\n//%\nbool switch_eq(TValue a, TValue b) {\n    if (eq_bool(a, b)) {\n        return true;\n    }\n    return false;\n}\n\n} // namespace pxt\n\n#define NUMOP(op) return fromDouble(toDouble(a) op toDouble(b));\n#define BITOP(op) return fromInt(toInt(a) op toInt(b));\nnamespace numops {\n\nint toBool(TValue v) {\n    if (isTagged(v)) {\n        if (v == TAG_FALSE || v == TAG_UNDEFINED || v == TAG_NAN || v == TAG_NULL ||\n            v == TAG_NUMBER(0))\n            return 0;\n        else\n            return 1;\n    }\n\n    ValType t = valType(v);\n    if (t == ValType::String) {\n        String s = (String)v;\n        if (IS_EMPTY(s))\n            return 0;\n    } else if (t == ValType::Number) {\n        auto x = toDouble(v);\n        if (isnan(x) || x == 0.0 || x == -0.0)\n            return 0;\n        else\n            return 1;\n    }\n\n    return 1;\n}\n\nint toBoolDecr(TValue v) {\n    if (v == TAG_TRUE)\n        return 1;\n    if (v == TAG_FALSE)\n        return 0;\n    return toBool(v);\n}\n\n// The integer, non-overflow case for add/sub/bit opts is handled in assembly\n\n#ifdef PXT_VM\n#define NUMOP2(op)                                                                                 \\\n    if (bothNumbers(a, b)) {                                                                       \\\n        auto tmp = (int64_t)numValue(a) op(int64_t) numValue(b);                                   \\\n        if ((int)tmp == tmp)                                                                       \\\n            return TAG_NUMBER((int)tmp);                                                           \\\n    }                                                                                              \\\n    NUMOP(op)\n#else\n#define NUMOP2(op) NUMOP(op)\n#endif\n\n//%\nTNumber adds(TNumber a, TNumber b){NUMOP2(+)}\n\n//%\nTNumber subs(TNumber a, TNumber b){NUMOP2(-)}\n\n//%\nTNumber muls(TNumber a, TNumber b) {\n    if (bothNumbers(a, b)) {\n#ifdef PXT64\n        auto tmp = (int64_t)numValue(a) * (int64_t)numValue(b);\n        if ((int)tmp == tmp)\n            return TAG_NUMBER((int)tmp);\n#else\n        int aa = (int)a;\n        int bb = (int)b;\n        // if both operands fit 15 bits, the result will not overflow int\n        if ((aa >> 15 == 0 || aa >> 15 == -1) && (bb >> 15 == 0 || bb >> 15 == -1)) {\n            // it may overflow 31 bit int though - use fromInt to convert properly\n            return fromInt((aa >> 1) * (bb >> 1));\n        }\n#endif\n    }\n    NUMOP(*)\n}\n\n//%\nTNumber div(TNumber a, TNumber b) {\n    if (b == TAG_NUMBER(1))\n        return a;\n    NUMOP(/)\n}\n\n//%\nTNumber mod(TNumber a, TNumber b) {\n    if (isInt(a) && isInt(b) && numValue(b))\n        BITOP(%)\n    return fromDouble(fmod(toDouble(a), toDouble(b)));\n}\n\n//%\nTNumber lsls(TNumber a, TNumber b) {\n    return fromInt(toInt(a) << (toInt(b) & 0x1f));\n}\n\n//%\nTNumber lsrs(TNumber a, TNumber b) {\n    return fromUInt(toUInt(a) >> (toUInt(b) & 0x1f));\n}\n\n//%\nTNumber asrs(TNumber a, TNumber b) {\n    return fromInt(toInt(a) >> (toInt(b) & 0x1f));\n}\n\n//%\nTNumber eors(TNumber a, TNumber b){BITOP(^)}\n\n//%\nTNumber orrs(TNumber a, TNumber b){BITOP(|)}\n\n//%\nTNumber bnot(TNumber a) {\n    return fromInt(~toInt(a));\n}\n\n//%\nTNumber ands(TNumber a, TNumber b) {\n    BITOP(&)\n}\n\n#ifdef PXT64\n#define CMPOP_RAW(op, t, f)                                                                        \\\n    if (bothNumbers(a, b))                                                                         \\\n        return numValue(a) op numValue(b) ? t : f;                                                 \\\n    int cmp = valCompare(a, b);                                                                    \\\n    return cmp != -2 && cmp op 0 ? t : f;\n#else\n#define CMPOP_RAW(op, t, f)                                                                        \\\n    if (bothNumbers(a, b))                                                                         \\\n        return (intptr_t)a op((intptr_t)b) ? t : f;                                                \\\n    int cmp = valCompare(a, b);                                                                    \\\n    return cmp != -2 && cmp op 0 ? t : f;\n#endif\n\n#define CMPOP(op) CMPOP_RAW(op, TAG_TRUE, TAG_FALSE)\n\n// 7.2.13 Abstract Relational Comparison\nstatic int valCompare(TValue a, TValue b) {\n    if (a == TAG_NAN || b == TAG_NAN)\n        return -2;\n\n    ValType ta = valType(a);\n    ValType tb = valType(b);\n\n    if (ta == ValType::String && tb == ValType::String)\n        return String_::compare((String)a, (String)b);\n\n    if (a == b)\n        return 0;\n\n    auto da = toDouble(a);\n    auto db = toDouble(b);\n\n    if (isnan(da) || isnan(db))\n        return -2;\n\n    if (da < db)\n        return -1;\n    else if (da > db)\n        return 1;\n    else\n        return 0;\n}\n\n//%\nbool lt_bool(TNumber a, TNumber b){CMPOP_RAW(<, true, false)}\n\n//%\nTNumber le(TNumber a, TNumber b){CMPOP(<=)}\n\n//%\nTNumber lt(TNumber a, TNumber b){CMPOP(<)}\n\n//%\nTNumber ge(TNumber a, TNumber b){CMPOP(>=)}\n\n//%\nTNumber gt(TNumber a, TNumber b){CMPOP(>)}\n\n//%\nTNumber eq(TNumber a, TNumber b) {\n    return pxt::eq_bool(a, b) ? TAG_TRUE : TAG_FALSE;\n}\n\n//%\nTNumber neq(TNumber a, TNumber b) {\n    return !pxt::eq_bool(a, b) ? TAG_TRUE : TAG_FALSE;\n}\n\n//%\nTNumber eqq(TNumber a, TNumber b) {\n    return pxt::eqq_bool(a, b) ? TAG_TRUE : TAG_FALSE;\n}\n\n//%\nTNumber neqq(TNumber a, TNumber b) {\n    return !pxt::eqq_bool(a, b) ? TAG_TRUE : TAG_FALSE;\n}\n\n// How many significant digits mycvt() should output.\n// This cannot be more than 15, as this is the most that can be accurately represented\n// in 64 bit double. Otherwise this code may crash.\n#define DIGITS 15\n\nstatic const uint64_t pows[] = {\n    1LL,           10LL,           100LL,           1000LL,           10000LL,\n    100000LL,      1000000LL,      10000000LL,      100000000LL,      1000000000LL,\n    10000000000LL, 100000000000LL, 1000000000000LL, 10000000000000LL, 100000000000000LL,\n};\n\n// The basic idea is we convert d to a 64 bit integer with DIGITS\n// digits, and then print it out, putting dot in the right place.\n\nvoid mycvt(NUMBER d, char *buf) {\n    if (d < 0) {\n        *buf++ = '-';\n        d = -d;\n    }\n\n    if (!d) {\n        *buf++ = '0';\n        *buf++ = 0;\n        return;\n    }\n\n    int pw = (int)log10(d);\n    int e = 1;\n\n    // if outside 1e-6 -- 1e21 range, we use the e-notation\n    if (d < 1e-6 || d > 1e21) {\n        // normalize number to 1.XYZ, save e, and reset pw\n        if (pw < 0)\n            d *= p10(-pw);\n        else\n            d /= p10(pw);\n        e = pw;\n        pw = 0;\n    }\n\n    int trailingZ = 0;\n    int dotAfter = pw + 1; // at which position the dot should be in the number\n\n    uint64_t dd;\n\n    // normalize number to be integer with exactly DIGITS digits\n    if (pw >= DIGITS) {\n        // if the number is larger than DIGITS, we need trailing zeroes\n        trailingZ = pw - DIGITS + 1;\n        dd = (uint64_t)(d / p10(trailingZ) + 0.5);\n    } else {\n        dd = (uint64_t)(d * p10(DIGITS - pw - 1) + 0.5);\n    }\n\n    // if number is less than 1, we need 0.00...00 at the beginning\n    if (dotAfter < 1) {\n        *buf++ = '0';\n        *buf++ = '.';\n        int n = -dotAfter;\n        while (n--)\n            *buf++ = '0';\n    }\n\n    // now print out the actual number\n    for (int i = DIGITS - 1; i >= 0; i--) {\n        uint64_t q = pows[i];\n        // this may be faster than fp-division and fmod(); or maybe not\n        // anyways, it works\n        int k = '0';\n        while (dd >= q) {\n            dd -= q;\n            k++;\n        }\n        *buf++ = k;\n        // if we're after dot, and what's left is zeroes, stop\n        if (dd == 0 && (DIGITS - i) >= dotAfter)\n            break;\n        // print the dot, if we arrived at it\n        if ((DIGITS - i) == dotAfter)\n            *buf++ = '.';\n    }\n\n    // print out remaining trailing zeroes if any\n    while (trailingZ-- > 0)\n        *buf++ = '0';\n\n    // if we used e-notation, handle that\n    if (e != 1) {\n        *buf++ = 'e';\n        if (e > 0)\n            *buf++ = '+';\n        itoa(e, buf);\n    } else {\n        *buf = 0;\n    }\n}\n\n#if 0\n//%\nTValue floatAsInt(TValue x) {\n    return doubleToInt(toDouble(x));\n}\n\n//% shim=numops::floatAsInt\nfunction floatAsInt(v: number): number { return 0 }\n\nfunction testInt(i: number) {\n    if (floatAsInt(i) != i)\n        control.panic(101)\n    if (floatAsInt(i + 0.5) != null)\n        control.panic(102)\n    if (floatAsInt(i + 0.00001) != null)\n        control.panic(103)\n}\n\nfunction testFloat(i: number) {\n    if (floatAsInt(i) != null)\n        control.panic(104)\n}\n\nfunction testFloatAsInt() {\n    for (let i = 0; i < 0xffff; ++i) {\n        testInt(i)\n        testInt(-i)\n        testInt(i * 10000)\n        testInt(i << 12)\n        testInt(i + 0x3fff0001)\n        testInt(-i - 0x3fff0002)\n        testFloat(i + 0x3fffffff + 1)\n        testFloat((i + 10000) * 1000000)\n    }\n}\n#endif\n\nString toString(TValue v) {\n    ValType t = valType(v);\n\n    if (t == ValType::String) {\n        return (String)v;\n    } else if (t == ValType::Number) {\n        char buf[64];\n\n        if (isInt(v)) {\n            itoa(numValue(v), buf);\n            return mkStringCore(buf);\n        }\n\n        if (v == TAG_NAN)\n            return (String)(void *)sNaN;\n\n        auto x = toDouble(v);\n\n#ifdef PXT_BOX_DEBUG\n        if (x == (int)x) {\n            itoa((int)x, buf);\n            return mkStringCore(buf);\n        }\n#endif\n\n        if (isinf(x)) {\n            if (x < 0)\n                return (String)(void *)sMInf;\n            else\n                return (String)(void *)sInf;\n        } else if (isnan(x)) {\n            return (String)(void *)sNaN;\n        }\n        mycvt(x, buf);\n\n        return mkStringCore(buf);\n    } else if (t == ValType::Function) {\n        return (String)(void *)sFunction;\n    } else {\n        if (v == TAG_UNDEFINED)\n            return (String)(void *)sUndefined;\n        else if (v == TAG_FALSE)\n            return (String)(void *)sFalse;\n        else if (v == TAG_NAN)\n            return (String)(void *)sNaN;\n        else if (v == TAG_TRUE)\n            return (String)(void *)sTrue;\n        else if (v == TAG_NULL)\n            return (String)(void *)sNull;\n        return (String)(void *)sObject;\n    }\n}\n\n} // namespace numops\n\nnamespace Math_ {\n//%\nTNumber pow(TNumber x, TNumber y) {\n#ifdef PXT_POWI\n    // regular pow() from math.h is 4k of code\n    return fromDouble(__builtin_powi(toDouble(x), toInt(y)));\n#else\n    return fromDouble(::pow(toDouble(x), toDouble(y)));\n#endif\n}\n\nNUMBER randomDouble() {\n    return getRandom(UINT_MAX) / ((NUMBER)UINT_MAX + 1) +\n           getRandom(0xffffff) / ((NUMBER)UINT_MAX * 0xffffff);\n}\n\n//%\nTNumber random() {\n    return fromDouble(randomDouble());\n}\n\n//%\nTNumber randomRange(TNumber min, TNumber max) {\n    if (isInt(min) && isInt(max)) {\n        int mini = numValue(min);\n        int maxi = numValue(max);\n        if (mini > maxi) {\n            int temp = mini;\n            mini = maxi;\n            maxi = temp;\n        }\n        if (maxi == mini)\n            return fromInt(mini);\n        else\n            return fromInt(mini + getRandom(maxi - mini));\n    } else {\n        auto mind = toDouble(min);\n        auto maxd = toDouble(max);\n        if (mind > maxd) {\n            auto temp = mind;\n            mind = maxd;\n            maxd = temp;\n        }\n        if (maxd == mind)\n            return fromDouble(mind);\n        else {\n            return fromDouble(mind + randomDouble() * (maxd - mind));\n        }\n    }\n}\n\n#define SINGLE(op) return fromDouble(::op(toDouble(x)));\n\n//%\nTNumber log(TNumber x){SINGLE(log)}\n\n//%\nTNumber log10(TNumber x){SINGLE(log10)}\n\n//%\nTNumber floor(TNumber x){SINGLE(floor)}\n\n//%\nTNumber ceil(TNumber x){SINGLE(ceil)}\n\n//%\nTNumber trunc(TNumber x){SINGLE(trunc)}\n\n//%\nTNumber round(TNumber x) {\n    // In C++, round(-1.5) == -2, while in JS, round(-1.5) == -1. Align to the JS convention for\n    // consistency between simulator and device. The following does rounding with ties (x.5) going\n    // towards positive infinity.\n    return fromDouble(::floor(toDouble(x) + 0.5));\n}\n\n//%\nint imul(int x, int y) {\n    return x * y;\n}\n\n//%\nint idiv(int x, int y) {\n    return x / y;\n}\n} // namespace Math_\n\nnamespace Array_ {\nRefCollection *mk() {\n    auto r = NEW_GC(RefCollection);\n    MEMDBG(\"mkColl: => %p\", r);\n    return r;\n}\nint length(RefCollection *c) {\n    return c->length();\n}\nvoid setLength(RefCollection *c, int newLength) {\n    c->setLength(newLength);\n}\nvoid push(RefCollection *c, TValue x) {\n    c->head.push(x);\n}\nTValue pop(RefCollection *c) {\n    return c->head.pop();\n}\nTValue getAt(RefCollection *c, int x) {\n    return c->head.get(x);\n}\nvoid setAt(RefCollection *c, int x, TValue y) {\n    c->head.set(x, y);\n}\nTValue removeAt(RefCollection *c, int x) {\n    return c->head.remove(x);\n}\nvoid insertAt(RefCollection *c, int x, TValue value) {\n    c->head.insert(x, value);\n}\nint indexOf(RefCollection *c, TValue x, int start) {\n    auto data = c->head.getData();\n    auto len = c->head.getLength();\n    for (unsigned i = 0; i < len; i++) {\n        if (pxt::eq_bool(data[i], x)) {\n            return (int)i;\n        }\n    }\n    return -1;\n}\nbool removeElement(RefCollection *c, TValue x) {\n    int idx = indexOf(c, x, 0);\n    if (idx >= 0) {\n        decr(removeAt(c, idx));\n        return 1;\n    }\n    return 0;\n}\n} // namespace Array_\n\nnamespace pxt {\nint debugFlags;\n\n//%\nvoid *ptrOfLiteral(int offset);\n\n#ifdef PXT_VM\nunsigned programSize() {\n    return 0;\n}\n#else\n//%\nunsigned programSize() {\n    return bytecode[17] * 8;\n}\n#endif\n\nvoid deepSleep() __attribute__((weak));\n//%\nvoid deepSleep() {}\n\nint *getBootloaderConfigData() __attribute__((weak));\nint *getBootloaderConfigData() {\n    return NULL;\n}\n\n//%\nint getConfig(int key, int defl) {\n#ifdef PXT_VM\n    if (!vmImg)\n        return defl;\n    int *cfgData = vmImg->configData;\n#else\n    int *cfgData = bytecode ? *(int **)&bytecode[18] : NULL;\n#endif\n\n    if (cfgData) {\n        for (int i = 0;; i += 2) {\n            if (cfgData[i] == key)\n                return cfgData[i + 1];\n            if (cfgData[i] == 0)\n                break;\n        }\n    }\n\n    cfgData = getBootloaderConfigData();\n\n    if (cfgData) {\n        for (int i = 0;; i += 2) {\n            if (cfgData[i] == key)\n                return cfgData[i + 1];\n            if (cfgData[i] == 0)\n                break;\n        }\n    }\n\n    return defl;\n}\n\n} // namespace pxt\n\nnamespace pxtrt {\n//%\nTValue ldlocRef(RefRefLocal *r) {\n    return r->v;\n}\n\n//%\nvoid stlocRef(RefRefLocal *r, TValue v) {\n    r->v = v;\n}\n\n//%\nRefRefLocal *mklocRef() {\n    auto r = NEW_GC(RefRefLocal);\n    MEMDBG(\"mklocRef: => %p\", r);\n    return r;\n}\n\n// Store a captured local in a closure. It returns the action, so it can be chained.\n//%\nRefAction *stclo(RefAction *a, int idx, TValue v) {\n    // DBG(\"STCLO \"); a->print(); DBG(\"@%d = %p\\n\", idx, (void*)v);\n    a->stCore(idx, v);\n    return a;\n}\n\n//%\nvoid panic(int code) {\n    soft_panic(code);\n}\n\n//%\nString emptyToNull(String s) {\n    if (!s || IS_EMPTY(s))\n        return NULL;\n    return s;\n}\n\n//%\nint ptrToBool(TValue p) {\n    if (p) {\n        decr(p);\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\nRefMap *mkMap() {\n    auto r = NEW_GC(RefMap);\n    MEMDBG(\"mkMap: => %p\", r);\n    return r;\n}\n\nTValue mapGetByString(RefMap *map, String key) {\n    int i = map->findIdx(key);\n    if (i < 0) {\n        return 0;\n    }\n    return map->values.get(i);\n}\n\n#ifdef PXT_VM\n#define IFACE_MEMBER_NAMES vmImg->ifaceMemberNames\n#else\n#define IFACE_MEMBER_NAMES *(uintptr_t **)&bytecode[22]\n#endif\n\nint lookupMapKey(String key) {\n    auto arr = IFACE_MEMBER_NAMES;\n    auto len = *arr++;\n    int l = 1U; // skip index 0 - it's invalid\n    int r = (int)len - 1;\n    auto ikey = (uintptr_t)key;\n    if (arr[l] <= ikey && ikey <= arr[r]) {\n        while (l <= r) {\n            auto m = (l + r) >> 1;\n            if (arr[m] == ikey)\n                return m;\n            else if (arr[m] < ikey)\n                l = m + 1;\n            else\n                r = m - 1;\n        }\n    } else {\n        while (l <= r) {\n            int m = (l + r) >> 1;\n            auto cmp = String_::compare((String)arr[m], key);\n            if (cmp == 0)\n                return m;\n            else if (cmp < 0)\n                l = m + 1;\n            else\n                r = m - 1;\n        }\n    }\n    return 0;\n}\n\nTValue mapGet(RefMap *map, unsigned key) {\n    auto arr = (String *)IFACE_MEMBER_NAMES;\n    auto r = mapGetByString(map, arr[key + 1]);\n    map->unref();\n    return r;\n}\n\nvoid mapSetByString(RefMap *map, String key, TValue val) {\n    int i = map->findIdx(key);\n    if (i < 0) {\n        map->keys.push((TValue)key);\n        map->values.push(val);\n    } else {\n        map->values.set(i, val);\n    }\n}\n\nvoid mapSet(RefMap *map, unsigned key, TValue val) {\n    auto arr = (String *)IFACE_MEMBER_NAMES;\n    mapSetByString(map, arr[key + 1], val);\n    decr(val);\n    map->unref();\n}\n\n//\n// Debugger\n//\n\n// This is only to be called once at the beginning of lambda function\n//%\nvoid *getGlobalsPtr() {\n#ifdef DEVICE_GROUP_ID_USER\n    fiber_set_group(DEVICE_GROUP_ID_USER);\n#endif\n\n    return globals;\n}\n\n//%\nvoid runtimeWarning(String s) {\n    // noop for now\n}\n} // namespace pxtrt\n#endif\n\nnamespace pxt {\n\nvoid doNothing() {}\n\n//%\nValType valType(TValue v) {\n    if (isTagged(v)) {\n        if (!v)\n            return ValType::Undefined;\n\n        if (isInt(v) || v == TAG_NAN)\n            return ValType::Number;\n        if (v == TAG_TRUE || v == TAG_FALSE)\n            return ValType::Boolean;\n        else if (v == TAG_NULL)\n            return ValType::Object;\n        else {\n            oops(1);\n            return ValType::Object;\n        }\n#ifdef PXT64\n    } else if (isDouble(v)) {\n        return ValType::Number;\n#endif\n    } else {\n        auto vt = getVTable((RefObject *)v);\n        if (vt->magic == VTABLE_MAGIC)\n            return vt->objectType;\n        else\n            return ValType::Object;\n    }\n}\n\nPXT_DEF_STRING(sObjectTp, \"object\")\nPXT_DEF_STRING(sBooleanTp, \"boolean\")\nPXT_DEF_STRING(sStringTp, \"string\")\nPXT_DEF_STRING(sNumberTp, \"number\")\nPXT_DEF_STRING(sFunctionTp, \"function\")\nPXT_DEF_STRING(sUndefinedTp, \"undefined\")\n\n//% expose\nString typeOf(TValue v) {\n    switch (valType(v)) {\n    case ValType::Undefined:\n        return (String)sUndefinedTp;\n    case ValType::Boolean:\n        return (String)sBooleanTp;\n    case ValType::Number:\n        return (String)sNumberTp;\n    case ValType::String:\n        return (String)sStringTp;\n    case ValType::Object:\n        return (String)sObjectTp;\n    case ValType::Function:\n        return (String)sFunctionTp;\n    default:\n        oops(2);\n        return 0;\n    }\n}\n\n// Maybe in future we will want separate print methods; for now ignore\nvoid anyPrint(TValue v) {\n    if (valType(v) == ValType::Object) {\n        if (isRefCounted(v)) {\n            auto o = (RefObject *)v;\n            auto vt = getVTable(o);\n            auto meth = ((RefObjectMethod)vt->methods[1]);\n            if ((void *)meth == (void *)&anyPrint)\n                DMESG(\"[RefObject vt=%p cl=%d sz=%d]\", o->vtable, vt->classNo, vt->numbytes);\n            else\n                meth(o);\n        } else {\n            DMESG(\"[Native %p]\", v);\n        }\n    } else {\n#ifndef X86_64\n        String s = numops::toString(v);\n        DMESG(\"[%s %p = %s]\", pxt::typeOf(v)->getUTF8Data(), v, s->getUTF8Data());\n        decr((TValue)s);\n#endif\n    }\n}\n\nstatic void dtorDoNothing() {}\n\n#define PRIM_VTABLE(name, objectTp, tp, szexpr)                                                    \\\n    static uint32_t name##_size(tp *p) { return TOWORDS(sizeof(tp) + szexpr); }                    \\\n    DEF_VTABLE(name##_vt, tp, objectTp, (void *)&dtorDoNothing, (void *)&anyPrint, 0,              \\\n               (void *)&name##_size)\n\n#define NOOP ((void)0)\n\n#define STRING_VT(name, fix, scan, gcsize, data, utfsize, length, dataAt)                          \\\n    static uint32_t name##_gcsize(BoxedString *p) { return TOWORDS(sizeof(void *) + (gcsize)); }   \\\n    static void name##_gcscan(BoxedString *p) { scan; }                                            \\\n    static const char *name##_data(BoxedString *p) {                                               \\\n        fix;                                                                                       \\\n        return data;                                                                               \\\n    }                                                                                              \\\n    static uint32_t name##_utfsize(BoxedString *p) {                                               \\\n        fix;                                                                                       \\\n        return utfsize;                                                                            \\\n    }                                                                                              \\\n    static uint32_t name##_length(BoxedString *p) {                                                \\\n        fix;                                                                                       \\\n        return length;                                                                             \\\n    }                                                                                              \\\n    static const char *name##_dataAt(BoxedString *p, uint32_t idx) {                               \\\n        fix;                                                                                       \\\n        return dataAt;                                                                             \\\n    }                                                                                              \\\n    DEF_VTABLE(name##_vt, BoxedString, ValType::String, (void *)&dtorDoNothing, (void *)&anyPrint, \\\n               (void *)&name##_gcscan, (void *)&name##_gcsize, (void *)&name##_data,               \\\n               (void *)&name##_utfsize, (void *)&name##_length, (void *)&name##_dataAt)\n\nvoid gcMarkArray(void *data);\nvoid gcScan(TValue v);\n\n#if PXT_UTF8\nstatic const char *skipLookup(BoxedString *p, uint32_t idx, int packed) {\n    if (idx > p->skip.length)\n        return NULL;\n    auto ent = idx / PXT_STRING_SKIP_INCR;\n    auto data = packed ? PXT_SKIP_DATA_PACK(p) : PXT_SKIP_DATA_IND(p);\n    auto size = p->skip.size;\n    if (ent) {\n        auto off = packed ? p->skip_pack.list[ent - 1] : p->skip.list[ent - 1];\n        data += off;\n        size -= off;\n        idx &= PXT_STRING_SKIP_INCR - 1;\n    }\n    return utf8Skip(data, size, idx);\n}\n\nextern LLSegment workQueue;\n\nstatic uint32_t fixSize(BoxedString *p, uint32_t *len) {\n    uint32_t tlen = 0;\n    uint32_t sz = 0;\n    if (workQueue.getLength())\n        oops(81);\n    workQueue.push((TValue)p);\n    while (workQueue.getLength()) {\n        p = (BoxedString *)workQueue.pop();\n        if (IS_CONS(p)) {\n            workQueue.push((TValue)p->cons.right);\n            workQueue.push((TValue)p->cons.left);\n        } else {\n            tlen += p->getLength();\n            sz += p->getUTF8Size();\n        }\n    }\n    *len = tlen;\n    return sz;\n}\n\nstatic void fixCopy(BoxedString *p, char *dst) {\n    if (workQueue.getLength())\n        oops(81);\n\n    workQueue.push((TValue)p);\n    while (workQueue.getLength()) {\n        p = (BoxedString *)workQueue.pop();\n        if (IS_CONS(p)) {\n            workQueue.push((TValue)p->cons.right);\n            workQueue.push((TValue)p->cons.left);\n        } else {\n            auto sz = p->getUTF8Size();\n            memcpy(dst, p->getUTF8Data(), sz);\n            dst += sz;\n        }\n    }\n}\n\n// switches CONS representation into skip list representation\n// does not switch representation of CONS' children\nstatic void fixCons(BoxedString *r) {\n    uint32_t length = 0;\n    auto sz = fixSize(r, &length);\n    auto numSkips = length / PXT_STRING_SKIP_INCR;\n    // allocate first, while [r] still holds references to its children\n    // because allocation might trigger GC\n    auto data = (uint16_t *)gcAllocateArray(numSkips * 2 + sz + 1);\n    // copy, while [r] is still cons\n    fixCopy(r, (char *)(data + numSkips));\n    // now, set [r] up properly\n    r->vtable = &string_skiplist16_vt;\n    r->skip.size = sz;\n    r->skip.length = length;\n    r->skip.list = data;\n    setupSkipList(r, NULL, 0);\n}\n#endif\n\nSTRING_VT(string_inline_ascii, NOOP, NOOP, 2 + p->ascii.length + 1, p->ascii.data, p->ascii.length,\n          p->ascii.length, idx <= p->ascii.length ? p->ascii.data + idx : NULL)\n#if PXT_UTF8\nSTRING_VT(string_inline_utf8, NOOP, NOOP, 2 + p->utf8.size + 1, p->utf8.data, p->utf8.size,\n          utf8Len(p->utf8.data, p->utf8.size), utf8Skip(p->utf8.data, p->utf8.size, idx))\nSTRING_VT(string_skiplist16, NOOP, if (p->skip.list) gcMarkArray(p->skip.list), 2 * sizeof(void *),\n          PXT_SKIP_DATA_IND(p), p->skip.size, p->skip.length, skipLookup(p, idx, 0))\nSTRING_VT(string_skiplist16_packed, NOOP, NOOP,\n          2 + 2 + PXT_NUM_SKIP_ENTRIES(p) * 2 + p->skip.size + 1, PXT_SKIP_DATA_PACK(p),\n          p->skip.size, p->skip.length, skipLookup(p, idx, 1))\nSTRING_VT(string_cons, fixCons(p), (gcScan((TValue)p->cons.left), gcScan((TValue)p->cons.right)),\n          2 * sizeof(void *), PXT_SKIP_DATA_IND(p), p->skip.size, p->skip.length,\n          skipLookup(p, idx, 0))\n#endif\n\nPRIM_VTABLE(number, ValType::Number, BoxedNumber, 0)\nPRIM_VTABLE(buffer, ValType::Object, BoxedBuffer, p->length)\n// PRIM_VTABLE(action, ValType::Function, RefAction, )\n\nvoid failedCast(TValue v, void *addr) {\n    DMESG(\"failed type check for %p @%p\", v, addr);\n    auto vt = getAnyVTable(v);\n    if (vt) {\n        DMESG(\"VT %p - objtype %d classNo %d\", vt, vt->objectType, vt->classNo);\n    }\n\n    int code;\n    if (v == TAG_NULL)\n        code = PANIC_CAST_FROM_NULL;\n    else\n        code = PANIC_CAST_FIRST + (int)valType(v);\n    soft_panic(code);\n}\n\nvoid missingProperty(TValue v) {\n    DMESG(\"missing property on %p\", v);\n    soft_panic(PANIC_MISSING_PROPERTY);\n}\n\n#ifdef PXT_PROFILE\nstruct PerfCounter *perfCounters;\n\nstruct PerfCounterInfo {\n    uint32_t numPerfCounters;\n    char *perfCounterNames[0];\n};\n\n#define PERF_INFO ((PerfCounterInfo *)(((uintptr_t *)bytecode)[13]))\n\nvoid initPerfCounters() {\n    auto n = PERF_INFO->numPerfCounters;\n    perfCounters = new PerfCounter[n];\n    memset(perfCounters, 0, n * sizeof(PerfCounter));\n}\n\nvoid dumpPerfCounters() {\n    auto info = PERF_INFO;\n    DMESG(\"calls,us,name\");\n    for (uint32_t i = 0; i < info->numPerfCounters; ++i) {\n        auto c = &perfCounters[i];\n        DMESG(\"%d,%d,%s\", c->numstops, c->value, info->perfCounterNames[i]);\n    }\n}\n\nvoid startPerfCounter(PerfCounters n) {\n    if (!perfCounters)\n        return;\n    auto c = &perfCounters[(uint32_t)n];\n    if (c->start)\n        oops(50);\n    c->start = PERF_NOW();\n}\n\nvoid stopPerfCounter(PerfCounters n) {\n    if (!perfCounters)\n        return;\n    auto c = &perfCounters[(uint32_t)n];\n    if (!c->start)\n        oops(51);\n    c->value += PERF_NOW() - c->start;\n    c->start = 0;\n    c->numstops++;\n}\n#endif\n\n// Exceptions\n\n#ifndef PXT_EXN_CTX\n#define PXT_EXN_CTX() getThreadContext()\n#endif\n\ntypedef void (*RestoreStateType)(TryFrame *, ThreadContext *);\n#ifndef pxt_restore_exception_state\n#define pxt_restore_exception_state ((RestoreStateType)(((uintptr_t *)bytecode)[14]))\n#endif\n\n//%\nTryFrame *beginTry() {\n    auto ctx = PXT_EXN_CTX();\n    auto frame = (TryFrame *)app_alloc(sizeof(TryFrame));\n    frame->parent = ctx->tryFrame;\n    ctx->tryFrame = frame;\n    return frame;\n}\n\n//% expose\nvoid endTry() {\n    auto ctx = PXT_EXN_CTX();\n    auto f = ctx->tryFrame;\n    if (!f)\n        oops(51);\n    ctx->tryFrame = f->parent;\n    app_free(f);\n}\n\n//% expose\nvoid throwValue(TValue v) {\n    auto ctx = PXT_EXN_CTX();\n    auto f = ctx->tryFrame;\n    if (!f) {\n        DMESG(\"unhandled exception, value:\");\n        anyPrint(v);\n        target_panic(PANIC_UNHANDLED_EXCEPTION);\n    }\n    ctx->tryFrame = f->parent;\n    TryFrame copy = *f;\n    app_free(f);\n    ctx->thrownValue = v;\n    pxt_restore_exception_state(&copy, ctx);\n}\n\n//% expose\nTValue getThrownValue() {\n    auto ctx = PXT_EXN_CTX();\n    auto v = ctx->thrownValue;\n    ctx->thrownValue = TAG_NON_VALUE;\n    if (v == TAG_NON_VALUE)\n        oops(51);\n    return v;\n}\n\n//% expose\nvoid endFinally() {\n    auto ctx = PXT_EXN_CTX();\n    if (ctx->thrownValue == TAG_NON_VALUE)\n        return;\n    throwValue(getThrownValue());\n}\n\n// https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function\nuint32_t hash_fnv1(const void *data, unsigned len) {\n    const uint8_t *d = (const uint8_t *)data;\n    uint32_t h = 0x811c9dc5;\n    while (len--)\n        h = (h * 0x1000193) ^ *d++;\n    return h;\n}\n\n// redefined in melody.cpp\n__attribute__((weak)) int redirectSamples(int16_t *dst, int numsamples, int samplerate) {\n    return 0;\n}\n\n} // namespace pxt\n",
            "dal.d.ts": "// Auto-generated. Do not edit.\ndeclare const enum DAL {\n    // /libraries/codal-core/inc/core/CodalComponent.h\n    DEVICE_ID_BUTTON_A = 1,\n    DEVICE_ID_BUTTON_B = 2,\n    DEVICE_ID_BUTTON_AB = 3,\n    DEVICE_ID_BUTTON_RESET = 4,\n    DEVICE_ID_ACCELEROMETER = 5,\n    DEVICE_ID_COMPASS = 6,\n    DEVICE_ID_DISPLAY = 7,\n    DEVICE_ID_THERMOMETER = 8,\n    DEVICE_ID_RADIO = 9,\n    DEVICE_ID_RADIO_DATA_READY = 10,\n    DEVICE_ID_MULTIBUTTON_ATTACH = 11,\n    DEVICE_ID_SERIAL = 12,\n    DEVICE_ID_GESTURE = 13,\n    DEVICE_ID_SYSTEM_TIMER = 14,\n    DEVICE_ID_SCHEDULER = 15,\n    DEVICE_ID_COMPONENT = 16,\n    DEVICE_ID_LIGHT_SENSOR = 17,\n    DEVICE_ID_TOUCH_SENSOR = 18,\n    DEVICE_ID_SYSTEM_DAC = 19,\n    DEVICE_ID_SYSTEM_MICROPHONE = 20,\n    DEVICE_ID_SYSTEM_LEVEL_DETECTOR = 21,\n    DEVICE_ID_SYSTEM_LEVEL_DETECTOR_SPL = 22,\n    DEVICE_ID_MSC = 23,\n    DEVICE_ID_SPI = 24,\n    DEVICE_ID_DISTANCE = 25,\n    DEVICE_ID_GYROSCOPE = 26,\n    DEVICE_ID_HUMIDITY = 27,\n    DEVICE_ID_PRESSURE = 28,\n    DEVICE_ID_SINGLE_WIRE_SERIAL = 29,\n    DEVICE_ID_JACDAC = 30,\n    DEVICE_ID_JACDAC_PHYS = 31,\n    DEVICE_ID_JACDAC_CONTROL_SERVICE = 32,\n    DEVICE_ID_JACDAC_CONFIGURATION_SERVICE = 33,\n    DEVICE_ID_SYSTEM_ADC = 34,\n    DEVICE_ID_PULSE_IN = 35,\n    DEVICE_ID_IO_P0 = 100,\n    DEVICE_ID_MESSAGE_BUS_LISTENER = 1021,\n    DEVICE_ID_NOTIFY_ONE = 1022,\n    DEVICE_ID_NOTIFY = 1023,\n    DEVICE_ID_BUTTON_UP = 2000,\n    DEVICE_ID_BUTTON_DOWN = 2001,\n    DEVICE_ID_BUTTON_LEFT = 2002,\n    DEVICE_ID_BUTTON_RIGHT = 2003,\n    DEVICE_ID_JD_DYNAMIC_ID = 3000,\n    DEVICE_COMPONENT_RUNNING = 4096,\n    DEVICE_COMPONENT_STATUS_SYSTEM_TICK = 8192,\n    DEVICE_COMPONENT_STATUS_IDLE_TICK = 16384,\n    DEVICE_COMPONENT_LISTENERS_CONFIGURED = 1,\n    DEVICE_COMPONENT_EVT_SYSTEM_TICK = 1,\n    // /libraries/codal-core/inc/core/CodalFiber.h\n    DEVICE_SCHEDULER_RUNNING = 1,\n    DEVICE_SCHEDULER_IDLE = 2,\n    DEVICE_FIBER_FLAG_FOB = 1,\n    DEVICE_FIBER_FLAG_PARENT = 2,\n    DEVICE_FIBER_FLAG_CHILD = 4,\n    DEVICE_FIBER_FLAG_DO_NOT_PAGE = 8,\n    DEVICE_SCHEDULER_EVT_TICK = 1,\n    DEVICE_SCHEDULER_EVT_IDLE = 2,\n    DEVICE_GET_FIBER_LIST_AVAILABLE = 1,\n    // /libraries/codal-core/inc/core/CodalListener.h\n    MESSAGE_BUS_LISTENER_PARAMETERISED = 1,\n    MESSAGE_BUS_LISTENER_METHOD = 2,\n    MESSAGE_BUS_LISTENER_BUSY = 4,\n    MESSAGE_BUS_LISTENER_REENTRANT = 8,\n    MESSAGE_BUS_LISTENER_QUEUE_IF_BUSY = 16,\n    MESSAGE_BUS_LISTENER_DROP_IF_BUSY = 32,\n    MESSAGE_BUS_LISTENER_NONBLOCKING = 64,\n    MESSAGE_BUS_LISTENER_URGENT = 128,\n    MESSAGE_BUS_LISTENER_DELETING = 32768,\n    MESSAGE_BUS_LISTENER_IMMEDIATE = 192,\n    // /libraries/codal-core/inc/core/ErrorNo.h\n    DEVICE_OK = 0,\n    DEVICE_INVALID_PARAMETER = -1001,\n    DEVICE_NOT_SUPPORTED = -1002,\n    DEVICE_CALIBRATION_IN_PROGRESS = -1003,\n    DEVICE_CALIBRATION_REQUIRED = -1004,\n    DEVICE_NO_RESOURCES = -1005,\n    DEVICE_BUSY = -1006,\n    DEVICE_CANCELLED = -1007,\n    DEVICE_I2C_ERROR = -1010,\n    DEVICE_SERIAL_IN_USE = -1011,\n    DEVICE_NO_DATA = -1012,\n    DEVICE_NOT_IMPLEMENTED = -1013,\n    DEVICE_SPI_ERROR = -1014,\n    DEVICE_INVALID_STATE = -1015,\n    DEVICE_OOM = 20,\n    DEVICE_HEAP_ERROR = 30,\n    DEVICE_NULL_DEREFERENCE = 40,\n    DEVICE_USB_ERROR = 50,\n    DEVICE_JACDAC_ERROR = 60,\n    DEVICE_HARDWARE_CONFIGURATION_ERROR = 90,\n    // /libraries/codal-core/inc/core/NotifyEvents.h\n    DISPLAY_EVT_FREE = 1,\n    CODAL_SERIAL_EVT_TX_EMPTY = 2,\n    BLE_EVT_SERIAL_TX_EMPTY = 3,\n    ARCADE_PLAYER_JOIN_RESULT = 4,\n    DEVICE_NOTIFY_USER_EVENT_BASE = 1024,\n    // /libraries/codal-core/inc/driver-models/AbstractButton.h\n    DEVICE_BUTTON_EVT_DOWN = 1,\n    DEVICE_BUTTON_EVT_UP = 2,\n    DEVICE_BUTTON_EVT_CLICK = 3,\n    DEVICE_BUTTON_EVT_LONG_CLICK = 4,\n    DEVICE_BUTTON_EVT_HOLD = 5,\n    DEVICE_BUTTON_EVT_DOUBLE_CLICK = 6,\n    DEVICE_BUTTON_LONG_CLICK_TIME = 1000,\n    DEVICE_BUTTON_HOLD_TIME = 1500,\n    DEVICE_BUTTON_STATE = 1,\n    DEVICE_BUTTON_STATE_HOLD_TRIGGERED = 2,\n    DEVICE_BUTTON_STATE_CLICK = 4,\n    DEVICE_BUTTON_STATE_LONG_CLICK = 8,\n    DEVICE_BUTTON_SIGMA_MIN = 0,\n    DEVICE_BUTTON_SIGMA_MAX = 12,\n    DEVICE_BUTTON_SIGMA_THRESH_HI = 8,\n    DEVICE_BUTTON_SIGMA_THRESH_LO = 2,\n    DEVICE_BUTTON_DOUBLE_CLICK_THRESH = 50,\n    DEVICE_BUTTON_SIMPLE_EVENTS = 0,\n    DEVICE_BUTTON_ALL_EVENTS = 1,\n    ACTIVE_LOW = 0,\n    ACTIVE_HIGH = 1,\n    // /libraries/codal-core/inc/driver-models/Accelerometer.h\n    ACCELEROMETER_IMU_DATA_VALID = 2,\n    ACCELEROMETER_EVT_DATA_UPDATE = 1,\n    ACCELEROMETER_EVT_NONE = 0,\n    ACCELEROMETER_EVT_TILT_UP = 1,\n    ACCELEROMETER_EVT_TILT_DOWN = 2,\n    ACCELEROMETER_EVT_TILT_LEFT = 3,\n    ACCELEROMETER_EVT_TILT_RIGHT = 4,\n    ACCELEROMETER_EVT_FACE_UP = 5,\n    ACCELEROMETER_EVT_FACE_DOWN = 6,\n    ACCELEROMETER_EVT_FREEFALL = 7,\n    ACCELEROMETER_EVT_3G = 8,\n    ACCELEROMETER_EVT_6G = 9,\n    ACCELEROMETER_EVT_8G = 10,\n    ACCELEROMETER_EVT_SHAKE = 11,\n    ACCELEROMETER_EVT_2G = 12,\n    ACCELEROMETER_REST_TOLERANCE = 200,\n    ACCELEROMETER_TILT_TOLERANCE = 200,\n    ACCELEROMETER_FREEFALL_TOLERANCE = 400,\n    ACCELEROMETER_SHAKE_TOLERANCE = 400,\n    ACCELEROMETER_2G_TOLERANCE = 2048,\n    ACCELEROMETER_3G_TOLERANCE = 3072,\n    ACCELEROMETER_6G_TOLERANCE = 6144,\n    ACCELEROMETER_8G_TOLERANCE = 8192,\n    ACCELEROMETER_GESTURE_DAMPING = 5,\n    ACCELEROMETER_SHAKE_DAMPING = 10,\n    ACCELEROMETER_SHAKE_RTX = 30,\n    ACCELEROMETER_SHAKE_COUNT_THRESHOLD = 4,\n    // /libraries/codal-core/inc/driver-models/Compass.h\n    COMPASS_STATUS_RUNNING = 1,\n    COMPASS_STATUS_CALIBRATED = 2,\n    COMPASS_STATUS_CALIBRATING = 4,\n    COMPASS_STATUS_ADDED_TO_IDLE = 8,\n    COMPASS_EVT_DATA_UPDATE = 1,\n    COMPASS_EVT_CONFIG_NEEDED = 2,\n    COMPASS_EVT_CALIBRATE = 3,\n    COMPASS_EVT_CALIBRATION_NEEDED = 4,\n    // /libraries/codal-core/inc/driver-models/Gyroscope.h\n    GYROSCOPE_IMU_DATA_VALID = 2,\n    GYROSCOPE_EVT_DATA_UPDATE = 1,\n    // /libraries/codal-core/inc/driver-models/LowLevelTimer.h\n    TimerModeTimer = 0,\n    TimerModeCounter = 1,\n    TimerModeAlternateFunction = 2,\n    BitMode8 = 0,\n    BitMode16 = 1,\n    BitMode24 = 2,\n    BitMode32 = 3,\n    // /libraries/codal-core/inc/driver-models/Pin.h\n    IO_STATUS_DIGITAL_IN = 1,\n    IO_STATUS_DIGITAL_OUT = 2,\n    IO_STATUS_ANALOG_IN = 4,\n    IO_STATUS_ANALOG_OUT = 8,\n    IO_STATUS_TOUCH_IN = 16,\n    IO_STATUS_EVENT_ON_EDGE = 32,\n    IO_STATUS_EVENT_PULSE_ON_EDGE = 64,\n    IO_STATUS_INTERRUPT_ON_EDGE = 128,\n    IO_STATUS_ACTIVE_HI = 256,\n    DEVICE_PIN_MAX_OUTPUT = 1023,\n    DEVICE_PIN_MAX_SERVO_RANGE = 180,\n    DEVICE_PIN_DEFAULT_SERVO_RANGE = 2000,\n    DEVICE_PIN_DEFAULT_SERVO_CENTER = 1500,\n    DEVICE_PIN_EVENT_NONE = 0,\n    DEVICE_PIN_INTERRUPT_ON_EDGE = 1,\n    DEVICE_PIN_EVENT_ON_EDGE = 2,\n    DEVICE_PIN_EVENT_ON_PULSE = 3,\n    DEVICE_PIN_EVENT_ON_TOUCH = 4,\n    DEVICE_PIN_EVT_RISE = 2,\n    DEVICE_PIN_EVT_FALL = 3,\n    DEVICE_PIN_EVT_PULSE_HI = 4,\n    DEVICE_PIN_EVT_PULSE_LO = 5,\n    PIN_CAPABILITY_DIGITAL = 1,\n    PIN_CAPABILITY_ANALOG = 2,\n    PIN_CAPABILITY_AD = 3,\n    PIN_CAPABILITY_ALL = 3,\n    None = 0,\n    Down = 1,\n    Up = 2,\n    // /libraries/codal-core/inc/driver-models/Radio.h\n    RADIO_EVT_DATA_READY = 2,\n    // /libraries/codal-core/inc/driver-models/SPIFlash.h\n    SPIFLASH_PAGE_SIZE = 256,\n    SPIFLASH_SMALL_ROW_PAGES = 16,\n    SPIFLASH_BIG_ROW_PAGES = 256,\n    // /libraries/codal-core/inc/driver-models/Sensor.h\n    SENSOR_THRESHOLD_LOW = 1,\n    SENSOR_THRESHOLD_HIGH = 2,\n    SENSOR_UPDATE_NEEDED = 3,\n    SENSOR_INITIALISED = 1,\n    SENSOR_HIGH_THRESHOLD_PASSED = 2,\n    SENSOR_LOW_THRESHOLD_PASSED = 4,\n    SENSOR_LOW_THRESHOLD_ENABLED = 8,\n    SENSOR_HIGH_THRESHOLD_ENABLED = 16,\n    SENSOR_DEFAULT_SENSITIVITY = 868,\n    SENSOR_DEFAULT_SAMPLE_PERIOD = 500,\n    // /libraries/codal-core/inc/driver-models/Serial.h\n    CODAL_SERIAL_DEFAULT_BAUD_RATE = 115200,\n    CODAL_SERIAL_DEFAULT_BUFFER_SIZE = 20,\n    CODAL_SERIAL_EVT_DELIM_MATCH = 1,\n    CODAL_SERIAL_EVT_HEAD_MATCH = 2,\n    CODAL_SERIAL_EVT_RX_FULL = 3,\n    CODAL_SERIAL_EVT_DATA_RECEIVED = 4,\n    CODAL_SERIAL_STATUS_RX_IN_USE = 1,\n    CODAL_SERIAL_STATUS_TX_IN_USE = 2,\n    CODAL_SERIAL_STATUS_RX_BUFF_INIT = 4,\n    CODAL_SERIAL_STATUS_TX_BUFF_INIT = 8,\n    CODAL_SERIAL_STATUS_RXD = 16,\n    ASYNC = 0,\n    SYNC_SPINWAIT = 1,\n    SYNC_SLEEP = 2,\n    RxInterrupt = 0,\n    TxInterrupt = 1,\n    // /libraries/codal-core/inc/driver-models/SingleWireSerial.h\n    SWS_EVT_DATA_RECEIVED = 1,\n    SWS_EVT_DATA_SENT = 2,\n    SWS_EVT_ERROR = 3,\n    SWS_EVT_DATA_DROPPED = 4,\n    SingleWireRx = 0,\n    SingleWireTx = 1,\n    SingleWireDisconnected = 2,\n    // /libraries/codal-core/inc/driver-models/Timer.h\n    CODAL_TIMER_DEFAULT_EVENT_LIST_SIZE = 10,\n    // /libraries/codal-core/inc/drivers/AnalogSensor.h\n    ANALOG_THRESHOLD_LOW = 1,\n    ANALOG_THRESHOLD_HIGH = 2,\n    ANALOG_SENSOR_UPDATE_NEEDED = 3,\n    ANALOG_SENSOR_INITIALISED = 1,\n    ANALOG_SENSOR_HIGH_THRESHOLD_PASSED = 2,\n    ANALOG_SENSOR_LOW_THRESHOLD_PASSED = 4,\n    ANALOG_SENSOR_LOW_THRESHOLD_ENABLED = 8,\n    ANALOG_SENSOR_HIGH_THRESHOLD_ENABLED = 16,\n    // /libraries/codal-core/inc/drivers/AnimatedDisplay.h\n    DISPLAY_EVT_ANIMATION_COMPLETE = 1,\n    DISPLAY_DEFAULT_AUTOCLEAR = 1,\n    DISPLAY_SPACING = 1,\n    DISPLAY_ANIMATE_DEFAULT_POS = -255,\n    DISPLAY_DEFAULT_SCROLL_SPEED = 120,\n    DISPLAY_DEFAULT_SCROLL_STRIDE = -1,\n    DISPLAY_DEFAULT_PRINT_SPEED = 400,\n    ANIMATION_MODE_NONE = 0,\n    ANIMATION_MODE_STOPPED = 1,\n    ANIMATION_MODE_SCROLL_TEXT = 2,\n    ANIMATION_MODE_PRINT_TEXT = 3,\n    ANIMATION_MODE_SCROLL_IMAGE = 4,\n    ANIMATION_MODE_ANIMATE_IMAGE = 5,\n    ANIMATION_MODE_ANIMATE_IMAGE_WITH_CLEAR = 6,\n    ANIMATION_MODE_PRINT_CHARACTER = 7,\n    // /libraries/codal-core/inc/drivers/FAT.h\n    FAT_RESERVED_SECTORS = 1,\n    FAT_ROOT_DIR_SECTORS = 4,\n    // /libraries/codal-core/inc/drivers/HID.h\n    HID_REQUEST_GET_REPORT = 1,\n    HID_REQUEST_GET_IDLE = 2,\n    HID_REQUEST_GET_PROTOCOL = 3,\n    HID_REQUEST_SET_REPORT = 9,\n    HID_REQUEST_SET_IDLE = 10,\n    HID_REQUEST_SET_PROTOCOL = 11,\n    // /libraries/codal-core/inc/drivers/HIDKeyboard.h\n    HID_KEYBOARD_NUM_REPORTS = 3,\n    HID_KEYBOARD_REPORT_GENERIC = 1,\n    HID_KEYBOARD_REPORT_CONSUMER = 2,\n    HID_KEYBOARD_KEYSTATE_SIZE_GENERIC = 8,\n    HID_KEYBOARD_KEYSTATE_SIZE_CONSUMER = 2,\n    HID_KEYBOARD_MODIFIER_OFFSET = 2,\n    HID_KEYBOARD_DELAY_DEFAULT = 10,\n    PressKey = 0,\n    ReleaseKey = 1,\n    // /libraries/codal-core/inc/drivers/KeyMap.h\n    KEYMAP_ALL_KEYS_UP_Val = 1,\n    KEYMAP_ALL_KEYS_UP_POS = 28,\n    KEYMAP_NORMAL_KEY_Val = 0,\n    KEYMAP_MODIFIER_KEY_Val = 1,\n    KEYMAP_MODIFIER_POS = 29,\n    KEYMAP_MEDIA_KEY_Val = 1,\n    KEYMAP_MEDIA_POS = 30,\n    KEYMAP_KEY_UP_Val = 0,\n    KEYMAP_KEY_DOWN_Val = 1,\n    KEYMAP_KEY_DOWN_POS = 31,\n    // /libraries/codal-core/inc/drivers/KeyValueStorage.h\n    DEVICE_KEY_VALUE_STORE_OFFSET = -4,\n    KEY_VALUE_STORAGE_MAGIC = 789921,\n    KEY_VALUE_STORAGE_BLOCK_SIZE = 48,\n    KEY_VALUE_STORAGE_KEY_SIZE = 16,\n    KEY_VALUE_STORAGE_SCRATCH_WORD_SIZE = 64,\n    KEY_VALUE_STORAGE_MAX_PAIRS = 5,\n    // /libraries/codal-core/inc/drivers/LEDMatrix.h\n    LED_MATRIX_GREYSCALE_BIT_DEPTH = 8,\n    LED_MATRIX_EVT_LIGHT_SENSE = 2,\n    LED_MATRIX_EVT_FRAME_TIMEOUT = 3,\n    LED_MATRIX_MINIMUM_BRIGHTNESS = 1,\n    LED_MATRIX_MAXIMUM_BRIGHTNESS = 255,\n    LED_MATRIX_DEFAULT_BRIGHTNESS = 255,\n    DISPLAY_MODE_BLACK_AND_WHITE = 0,\n    DISPLAY_MODE_GREYSCALE = 1,\n    DISPLAY_MODE_BLACK_AND_WHITE_LIGHT_SENSE = 2,\n    DISPLAY_MODE_GREYSCALE_LIGHT_SENSE = 3,\n    MATRIX_DISPLAY_ROTATION_0 = 0,\n    MATRIX_DISPLAY_ROTATION_90 = 1,\n    MATRIX_DISPLAY_ROTATION_180 = 2,\n    MATRIX_DISPLAY_ROTATION_270 = 3,\n    NO_CONN = 0,\n    // /libraries/codal-core/inc/drivers/LSM303Accelerometer.h\n    LSM303_A_DEFAULT_ADDR = 50,\n    LSM303_STATUS_REG_AUX_A = 7,\n    LSM303_OUT_TEMP_L_A = 12,\n    LSM303_OUT_TEMP_H_A = 13,\n    LSM303_INT_COUNTER_REG_A = 14,\n    LSM303_WHO_AM_I_A = 15,\n    LSM303_TEMP_CFG_REG_A = 31,\n    LSM303_CTRL_REG1_A = 32,\n    LSM303_CTRL_REG2_A = 33,\n    LSM303_CTRL_REG3_A = 34,\n    LSM303_CTRL_REG4_A = 35,\n    LSM303_CTRL_REG5_A = 36,\n    LSM303_CTRL_REG6_A = 37,\n    LSM303_DATACAPTURE_A = 38,\n    LSM303_STATUS_REG_A = 39,\n    LSM303_OUT_X_L_A = 40,\n    LSM303_OUT_X_H_A = 41,\n    LSM303_OUT_Y_L_A = 42,\n    LSM303_OUT_Y_H_A = 43,\n    LSM303_OUT_Z_L_A = 44,\n    LSM303_OUT_Z_H_A = 45,\n    LSM303_FIFO_CTRL_REG_A = 46,\n    LSM303_FIFO_SRC_REG_A = 47,\n    LSM303_INT1_CFG_A = 48,\n    LSM303_INT1_SRC_A = 49,\n    LSM303_INT1_THS_A = 50,\n    LSM303_INT1_DURATION_A = 51,\n    LSM303_INT2_CFG_A = 52,\n    LSM303_INT2_SRC_A = 53,\n    LSM303_INT2_THS_A = 54,\n    LSM303_INT2_DURATION_A = 55,\n    LSM303_CLICK_CFG_A = 56,\n    LSM303_CLICK_SRC_A = 57,\n    LSM303_CLICK_THS_A = 58,\n    LSM303_TIME_LIMIT_A = 59,\n    LSM303_TIME_LATENCY_A = 60,\n    LSM303_TIME_WINDOW_A = 61,\n    LSM303_ACT_THS_A = 62,\n    LSM303_ACT_DUR_A = 63,\n    LSM303_A_WHOAMI_VAL = 51,\n    LSM303_A_STATUS_DATA_READY = 8,\n    LSM303_A_STATUS_ENABLED = 256,\n    LSM303_A_STATUS_SLEEPING = 512,\n    // /libraries/codal-core/inc/drivers/LSM303Magnetometer.h\n    LSM303_M_WHOAMI_VAL = 64,\n    LSM303_M_DEFAULT_ADDR = 60,\n    LSM303_OFFSET_X_REG_L_M = 69,\n    LSM303_OFFSET_X_REG_H_M = 70,\n    LSM303_OFFSET_Y_REG_L_M = 71,\n    LSM303_OFFSET_Y_REG_H_M = 72,\n    LSM303_OFFSET_Z_REG_L_M = 73,\n    LSM303_OFFSET_Z_REG_H_M = 74,\n    LSM303_WHO_AM_I_M = 79,\n    LSM303_CFG_REG_A_M = 96,\n    LSM303_CFG_REG_B_M = 97,\n    LSM303_CFG_REG_C_M = 98,\n    LSM303_INT_CRTL_REG_M = 99,\n    LSM303_INT_SOURCE_REG_M = 100,\n    LSM303_INT_THS_L_REG_M = 101,\n    LSM303_INT_THS_H_REG_M = 102,\n    LSM303_STATUS_REG_M = 103,\n    LSM303_OUTX_L_REG_M = 104,\n    LSM303_OUTX_H_REG_M = 105,\n    LSM303_OUTY_L_REG_M = 106,\n    LSM303_OUTY_H_REG_M = 107,\n    LSM303_OUTZ_L_REG_M = 108,\n    LSM303_OUTZ_H_REG_M = 109,\n    LSM303_M_STATUS_DATA_READY = 8,\n    LSM303_M_STATUS_ENABLED = 256,\n    LSM303_M_STATUS_SLEEPING = 512,\n    // /libraries/codal-core/inc/drivers/MultiButton.h\n    MULTI_BUTTON_STATE_1 = 1,\n    MULTI_BUTTON_STATE_2 = 2,\n    MULTI_BUTTON_HOLD_TRIGGERED_1 = 4,\n    MULTI_BUTTON_HOLD_TRIGGERED_2 = 8,\n    MULTI_BUTTON_SUPRESSED_1 = 16,\n    MULTI_BUTTON_SUPRESSED_2 = 32,\n    MULTI_BUTTON_ATTACHED = 64,\n    // /libraries/codal-core/inc/drivers/PulseIn.h\n    DEVICE_EVT_PULSE_IN_TIMEOUT = 10000,\n    // /libraries/codal-core/inc/drivers/TouchButton.h\n    TOUCH_BUTTON_CALIBRATION_LINEAR_OFFSET = 2,\n    TOUCH_BUTTON_CALIBRATION_PERCENTAGE_OFFSET = 5,\n    TOUCH_BUTTON_SENSITIVITY = 10,\n    TOUCH_BUTTON_CALIBRATION_PERIOD = 10,\n    TOUCH_BUTTON_CALIBRATING = 16,\n    // /libraries/codal-core/inc/drivers/TouchSensor.h\n    TOUCH_SENSOR_MAX_BUTTONS = 10,\n    TOUCH_SENSOR_SAMPLE_PERIOD = 50,\n    TOUCH_SENSE_SAMPLE_MAX = 1000,\n    TOUCH_SENSOR_UPDATE_NEEDED = 1,\n    // /libraries/codal-core/inc/drivers/USB_HID_Keys.h\n    KEY_MOD_LCTRL = 1,\n    KEY_MOD_LSHIFT = 2,\n    KEY_MOD_LALT = 4,\n    KEY_MOD_LMETA = 8,\n    KEY_MOD_RCTRL = 16,\n    KEY_MOD_RSHIFT = 32,\n    KEY_MOD_RALT = 64,\n    KEY_MOD_RMETA = 128,\n    KEY_NONE = 0,\n    KEY_ERR_OVF = 1,\n    KEY_A = 4,\n    KEY_B = 5,\n    KEY_C = 6,\n    KEY_D = 7,\n    KEY_E = 8,\n    KEY_F = 9,\n    KEY_G = 10,\n    KEY_H = 11,\n    KEY_I = 12,\n    KEY_J = 13,\n    KEY_K = 14,\n    KEY_L = 15,\n    KEY_M = 16,\n    KEY_N = 17,\n    KEY_O = 18,\n    KEY_P = 19,\n    KEY_Q = 20,\n    KEY_R = 21,\n    KEY_S = 22,\n    KEY_T = 23,\n    KEY_U = 24,\n    KEY_V = 25,\n    KEY_W = 26,\n    KEY_X = 27,\n    KEY_Y = 28,\n    KEY_Z = 29,\n    KEY_1 = 30,\n    KEY_2 = 31,\n    KEY_3 = 32,\n    KEY_4 = 33,\n    KEY_5 = 34,\n    KEY_6 = 35,\n    KEY_7 = 36,\n    KEY_8 = 37,\n    KEY_9 = 38,\n    KEY_0 = 39,\n    KEY_ENTER = 40,\n    KEY_ESC = 41,\n    KEY_BACKSPACE = 42,\n    KEY_TAB = 43,\n    KEY_SPACE = 44,\n    KEY_MINUS = 45,\n    KEY_EQUAL = 46,\n    KEY_LEFTBRACE = 47,\n    KEY_RIGHTBRACE = 48,\n    KEY_BACKSLASH = 49,\n    KEY_HASHTILDE = 50,\n    KEY_SEMICOLON = 51,\n    KEY_APOSTROPHE = 52,\n    KEY_GRAVE = 53,\n    KEY_COMMA = 54,\n    KEY_DOT = 55,\n    KEY_SLASH = 56,\n    KEY_CAPSLOCK = 57,\n    KEY_F1 = 58,\n    KEY_F2 = 59,\n    KEY_F3 = 60,\n    KEY_F4 = 61,\n    KEY_F5 = 62,\n    KEY_F6 = 63,\n    KEY_F7 = 64,\n    KEY_F8 = 65,\n    KEY_F9 = 66,\n    KEY_F10 = 67,\n    KEY_F11 = 68,\n    KEY_F12 = 69,\n    KEY_SYSRQ = 70,\n    KEY_SCROLLLOCK = 71,\n    KEY_PAUSE = 72,\n    KEY_INSERT = 73,\n    KEY_HOME = 74,\n    KEY_PAGEUP = 75,\n    KEY_DELETE = 76,\n    KEY_END = 77,\n    KEY_PAGEDOWN = 78,\n    KEY_RIGHT = 79,\n    KEY_LEFT = 80,\n    KEY_DOWN = 81,\n    KEY_UP = 82,\n    KEY_NUMLOCK = 83,\n    KEY_KPSLASH = 84,\n    KEY_KPASTERISK = 85,\n    KEY_KPMINUS = 86,\n    KEY_KPPLUS = 87,\n    KEY_KPENTER = 88,\n    KEY_KP1 = 89,\n    KEY_KP2 = 90,\n    KEY_KP3 = 91,\n    KEY_KP4 = 92,\n    KEY_KP5 = 93,\n    KEY_KP6 = 94,\n    KEY_KP7 = 95,\n    KEY_KP8 = 96,\n    KEY_KP9 = 97,\n    KEY_KP0 = 98,\n    KEY_KPDOT = 99,\n    KEY_102ND = 100,\n    KEY_COMPOSE = 101,\n    KEY_POWER = 102,\n    KEY_KPEQUAL = 103,\n    KEY_F13 = 104,\n    KEY_F14 = 105,\n    KEY_F15 = 106,\n    KEY_F16 = 107,\n    KEY_F17 = 108,\n    KEY_F18 = 109,\n    KEY_F19 = 110,\n    KEY_F20 = 111,\n    KEY_F21 = 112,\n    KEY_F22 = 113,\n    KEY_F23 = 114,\n    KEY_F24 = 115,\n    KEY_OPEN = 116,\n    KEY_HELP = 117,\n    KEY_PROPS = 118,\n    KEY_FRONT = 119,\n    KEY_STOP = 120,\n    KEY_AGAIN = 121,\n    KEY_UNDO = 122,\n    KEY_CUT = 123,\n    KEY_COPY = 124,\n    KEY_PASTE = 125,\n    KEY_FIND = 126,\n    KEY_MUTE = 127,\n    KEY_VOLUMEUP = 128,\n    KEY_VOLUMEDOWN = 129,\n    KEY_KPCOMMA = 133,\n    KEY_RO = 135,\n    KEY_KATAKANAHIRAGANA = 136,\n    KEY_YEN = 137,\n    KEY_HENKAN = 138,\n    KEY_MUHENKAN = 139,\n    KEY_KPJPCOMMA = 140,\n    KEY_HANGEUL = 144,\n    KEY_HANJA = 145,\n    KEY_KATAKANA = 146,\n    KEY_HIRAGANA = 147,\n    KEY_ZENKAKUHANKAKU = 148,\n    KEY_KPLEFTPAREN = 182,\n    KEY_KPRIGHTPAREN = 183,\n    KEY_LEFTCTRL = 224,\n    KEY_LEFTSHIFT = 225,\n    KEY_LEFTALT = 226,\n    KEY_LEFTMETA = 227,\n    KEY_RIGHTCTRL = 228,\n    KEY_RIGHTSHIFT = 229,\n    KEY_RIGHTALT = 230,\n    KEY_RIGHTMETA = 231,\n    KEY_MEDIA_PLAYPAUSE = 232,\n    KEY_MEDIA_STOPCD = 233,\n    KEY_MEDIA_PREVIOUSSONG = 234,\n    KEY_MEDIA_NEXTSONG = 235,\n    KEY_MEDIA_EJECTCD = 236,\n    KEY_MEDIA_VOLUMEUP = 237,\n    KEY_MEDIA_VOLUMEDOWN = 238,\n    KEY_MEDIA_MUTE = 239,\n    KEY_MEDIA_WWW = 240,\n    KEY_MEDIA_BACK = 241,\n    KEY_MEDIA_FORWARD = 242,\n    KEY_MEDIA_STOP = 243,\n    KEY_MEDIA_FIND = 244,\n    KEY_MEDIA_SCROLLUP = 245,\n    KEY_MEDIA_SCROLLDOWN = 246,\n    KEY_MEDIA_EDIT = 247,\n    KEY_MEDIA_SLEEP = 248,\n    KEY_MEDIA_COFFEE = 249,\n    KEY_MEDIA_REFRESH = 250,\n    KEY_MEDIA_CALC = 251,\n    // /libraries/codal-core/inc/drivers/uf2format.h\n    UF2FORMAT_H = 1,\n    APP_START_ADDRESS = 8192,\n    UF2_FLAG_NOFLASH = 1,\n    // /libraries/codal-core/inc/streams/DataStream.h\n    DATASTREAM_MAXIMUM_BUFFERS = 1,\n    DATASTREAM_FORMAT_UNKNOWN = 0,\n    DATASTREAM_FORMAT_8BIT_UNSIGNED = 1,\n    DATASTREAM_FORMAT_8BIT_SIGNED = 2,\n    DATASTREAM_FORMAT_16BIT_UNSIGNED = 3,\n    DATASTREAM_FORMAT_16BIT_SIGNED = 4,\n    DATASTREAM_FORMAT_24BIT_UNSIGNED = 5,\n    DATASTREAM_FORMAT_24BIT_SIGNED = 6,\n    DATASTREAM_FORMAT_32BIT_UNSIGNED = 7,\n    DATASTREAM_FORMAT_32BIT_SIGNED = 8,\n    // /libraries/codal-core/inc/streams/LevelDetector.h\n    LEVEL_THRESHOLD_LOW = 1,\n    LEVEL_THRESHOLD_HIGH = 2,\n    LEVEL_DETECTOR_INITIALISED = 1,\n    LEVEL_DETECTOR_HIGH_THRESHOLD_PASSED = 2,\n    LEVEL_DETECTOR_LOW_THRESHOLD_PASSED = 4,\n    LEVEL_DETECTOR_DEFAULT_WINDOW_SIZE = 128,\n    // /libraries/codal-core/inc/streams/LevelDetectorSPL.h\n    LEVEL_DETECTOR_SPL_INITIALISED = 1,\n    LEVEL_DETECTOR_SPL_HIGH_THRESHOLD_PASSED = 2,\n    LEVEL_DETECTOR_SPL_LOW_THRESHOLD_PASSED = 4,\n    LEVEL_DETECTOR_SPL_DEFAULT_WINDOW_SIZE = 128,\n    // /libraries/codal-core/inc/streams/MemorySource.h\n    MEMORY_SOURCE_DEFAULT_MAX_BUFFER = 256,\n    // /libraries/codal-core/inc/streams/Synthesizer.h\n    SYNTHESIZER_SAMPLE_RATE = 44100,\n    TONE_WIDTH = 1024,\n    // /libraries/codal-core/inc/types/BitmapFont.h\n    BITMAP_FONT_WIDTH = 5,\n    BITMAP_FONT_HEIGHT = 5,\n    BITMAP_FONT_ASCII_START = 32,\n    BITMAP_FONT_ASCII_END = 126,\n    // /libraries/codal-core/inc/types/CoordinateSystem.h\n    COORDINATE_SPACE_ROTATED_0 = 0,\n    COORDINATE_SPACE_ROTATED_90 = 1,\n    COORDINATE_SPACE_ROTATED_180 = 2,\n    COORDINATE_SPACE_ROTATED_270 = 3,\n    RAW = 0,\n    SIMPLE_CARTESIAN = 1,\n    NORTH_EAST_DOWN = 2,\n    EAST_NORTH_UP = 3,\n    NORTH_EAST_UP = 3,\n    // /libraries/codal-core/inc/types/Event.h\n    DEVICE_ID_ANY = 0,\n    DEVICE_EVT_ANY = 0,\n    CREATE_ONLY = 0,\n    CREATE_AND_FIRE = 1,\n    DEVICE_EVENT_DEFAULT_LAUNCH_MODE = 1,\n    // /libraries/codal-core/inc/types/ManagedBuffer.h\n    Zero = 1,\n    // /libraries/codal-core/inc/types/RefCounted.h\n    REF_TAG_STRING = 1,\n    REF_TAG_BUFFER = 2,\n    REF_TAG_IMAGE = 3,\n    REF_TAG_USER = 32,\n    // /pxtapp/accelerometer---lsm6dsl/axis.h\n    ACC_SYSTEM = 1,\n    ACC_ROTATION = 2,\n    // /pxtapp/configkeys.h\n    CFG_PIN_NAME_MSK = 65535,\n    CFG_PIN_CONFIG_MSK = 4294901760,\n    CFG_PIN_CONFIG_ACTIVE_LO = 65536,\n    CFG_MAGIC0 = 513675505,\n    CFG_MAGIC1 = 539130489,\n    CFG_PIN_ACCELEROMETER_INT = 1,\n    CFG_PIN_ACCELEROMETER_SCL = 2,\n    CFG_PIN_ACCELEROMETER_SDA = 3,\n    CFG_PIN_BTN_A = 4,\n    CFG_PIN_BTN_B = 5,\n    CFG_PIN_BTN_SLIDE = 6,\n    CFG_PIN_DOTSTAR_CLOCK = 7,\n    CFG_PIN_DOTSTAR_DATA = 8,\n    CFG_PIN_FLASH_CS = 9,\n    CFG_PIN_FLASH_MISO = 10,\n    CFG_PIN_FLASH_MOSI = 11,\n    CFG_PIN_FLASH_SCK = 12,\n    CFG_PIN_LED = 13,\n    CFG_PIN_LIGHT = 14,\n    CFG_PIN_MICROPHONE = 15,\n    CFG_PIN_MIC_CLOCK = 16,\n    CFG_PIN_MIC_DATA = 17,\n    CFG_PIN_MISO = 18,\n    CFG_PIN_MOSI = 19,\n    CFG_PIN_NEOPIXEL = 20,\n    CFG_PIN_RX = 21,\n    CFG_PIN_RXLED = 22,\n    CFG_PIN_SCK = 23,\n    CFG_PIN_SCL = 24,\n    CFG_PIN_SDA = 25,\n    CFG_PIN_SPEAKER_AMP = 26,\n    CFG_PIN_TEMPERATURE = 27,\n    CFG_PIN_TX = 28,\n    CFG_PIN_TXLED = 29,\n    CFG_PIN_IR_OUT = 30,\n    CFG_PIN_IR_IN = 31,\n    CFG_PIN_DISPLAY_SCK = 32,\n    CFG_PIN_DISPLAY_MISO = 33,\n    CFG_PIN_DISPLAY_MOSI = 34,\n    CFG_PIN_DISPLAY_CS = 35,\n    CFG_PIN_DISPLAY_DC = 36,\n    CFG_DISPLAY_WIDTH = 37,\n    CFG_DISPLAY_HEIGHT = 38,\n    CFG_DISPLAY_CFG0 = 39,\n    CFG_DISPLAY_CFG1 = 40,\n    CFG_DISPLAY_CFG2 = 41,\n    CFG_DISPLAY_CFG3 = 42,\n    CFG_PIN_DISPLAY_RST = 43,\n    CFG_PIN_DISPLAY_BL = 44,\n    CFG_PIN_SERVO_1 = 45,\n    CFG_PIN_SERVO_2 = 46,\n    CFG_PIN_BTN_LEFT = 47,\n    CFG_PIN_BTN_RIGHT = 48,\n    CFG_PIN_BTN_UP = 49,\n    CFG_PIN_BTN_DOWN = 50,\n    CFG_PIN_BTN_MENU = 51,\n    CFG_PIN_LED_R = 52,\n    CFG_PIN_LED_G = 53,\n    CFG_PIN_LED_B = 54,\n    CFG_PIN_LED1 = 55,\n    CFG_PIN_LED2 = 56,\n    CFG_PIN_LED3 = 57,\n    CFG_PIN_LED4 = 58,\n    CFG_SPEAKER_VOLUME = 59,\n    CFG_PIN_JACK_TX = 60,\n    CFG_PIN_JACK_SENSE = 61,\n    CFG_PIN_JACK_HPEN = 62,\n    CFG_PIN_JACK_BZEN = 63,\n    CFG_PIN_JACK_PWREN = 64,\n    CFG_PIN_JACK_SND = 65,\n    CFG_PIN_JACK_BUSLED = 66,\n    CFG_PIN_JACK_COMMLED = 67,\n    CFG_PIN_BTN_SOFT_RESET = 69,\n    CFG_ACCELEROMETER_TYPE = 70,\n    CFG_PIN_BTNMX_LATCH = 71,\n    CFG_PIN_BTNMX_CLOCK = 72,\n    CFG_PIN_BTNMX_DATA = 73,\n    CFG_PIN_BTN_MENU2 = 74,\n    CFG_PIN_BATTSENSE = 75,\n    CFG_PIN_VIBRATION = 76,\n    CFG_PIN_PWREN = 77,\n    CFG_DISPLAY_TYPE = 78,\n    CFG_PIN_ROTARY_ENCODER_A = 79,\n    CFG_PIN_ROTARY_ENCODER_B = 80,\n    CFG_ACCELEROMETER_SPACE = 81,\n    CFG_PIN_WIFI_MOSI = 82,\n    CFG_PIN_WIFI_MISO = 83,\n    CFG_PIN_WIFI_SCK = 84,\n    CFG_PIN_WIFI_TX = 85,\n    CFG_PIN_WIFI_RX = 86,\n    CFG_PIN_WIFI_CS = 87,\n    CFG_PIN_WIFI_BUSY = 88,\n    CFG_PIN_WIFI_RESET = 89,\n    CFG_PIN_WIFI_GPIO0 = 90,\n    CFG_PIN_WIFI_AT_TX = 91,\n    CFG_PIN_WIFI_AT_RX = 92,\n    CFG_PIN_USB_POWER = 93,\n    ACCELEROMETER_TYPE_LIS3DH = 50,\n    ACCELEROMETER_TYPE_LIS3DH_ALT = 48,\n    ACCELEROMETER_TYPE_MMA8453 = 56,\n    ACCELEROMETER_TYPE_FXOS8700 = 60,\n    ACCELEROMETER_TYPE_MMA8653 = 58,\n    ACCELEROMETER_TYPE_MSA300 = 76,\n    ACCELEROMETER_TYPE_MPU6050 = 104,\n    DISPLAY_TYPE_ST7735 = 7735,\n    DISPLAY_TYPE_ILI9341 = 9341,\n    DISPLAY_TYPE_SMART = 4242,\n    CFG_PIN_A0 = 100,\n    CFG_PIN_A1 = 101,\n    CFG_PIN_A2 = 102,\n    CFG_PIN_A3 = 103,\n    CFG_PIN_A4 = 104,\n    CFG_PIN_A5 = 105,\n    CFG_PIN_A6 = 106,\n    CFG_PIN_A7 = 107,\n    CFG_PIN_A8 = 108,\n    CFG_PIN_A9 = 109,\n    CFG_PIN_A10 = 110,\n    CFG_PIN_A11 = 111,\n    CFG_PIN_A12 = 112,\n    CFG_PIN_A13 = 113,\n    CFG_PIN_A14 = 114,\n    CFG_PIN_A15 = 115,\n    CFG_PIN_A16 = 116,\n    CFG_PIN_A17 = 117,\n    CFG_PIN_A18 = 118,\n    CFG_PIN_A19 = 119,\n    CFG_PIN_A20 = 120,\n    CFG_PIN_A21 = 121,\n    CFG_PIN_A22 = 122,\n    CFG_PIN_A23 = 123,\n    CFG_PIN_A24 = 124,\n    CFG_PIN_A25 = 125,\n    CFG_PIN_A26 = 126,\n    CFG_PIN_A27 = 127,\n    CFG_PIN_A28 = 128,\n    CFG_PIN_A29 = 129,\n    CFG_PIN_A30 = 130,\n    CFG_PIN_A31 = 131,\n    CFG_PIN_D0 = 150,\n    CFG_PIN_D1 = 151,\n    CFG_PIN_D2 = 152,\n    CFG_PIN_D3 = 153,\n    CFG_PIN_D4 = 154,\n    CFG_PIN_D5 = 155,\n    CFG_PIN_D6 = 156,\n    CFG_PIN_D7 = 157,\n    CFG_PIN_D8 = 158,\n    CFG_PIN_D9 = 159,\n    CFG_PIN_D10 = 160,\n    CFG_PIN_D11 = 161,\n    CFG_PIN_D12 = 162,\n    CFG_PIN_D13 = 163,\n    CFG_PIN_D14 = 164,\n    CFG_PIN_D15 = 165,\n    CFG_PIN_D16 = 166,\n    CFG_PIN_D17 = 167,\n    CFG_PIN_D18 = 168,\n    CFG_PIN_D19 = 169,\n    CFG_PIN_D20 = 170,\n    CFG_PIN_D21 = 171,\n    CFG_PIN_D22 = 172,\n    CFG_PIN_D23 = 173,\n    CFG_PIN_D24 = 174,\n    CFG_PIN_D25 = 175,\n    CFG_PIN_D26 = 176,\n    CFG_PIN_D27 = 177,\n    CFG_PIN_D28 = 178,\n    CFG_PIN_D29 = 179,\n    CFG_PIN_D30 = 180,\n    CFG_PIN_D31 = 181,\n    CFG_NUM_NEOPIXELS = 200,\n    CFG_NUM_DOTSTARS = 201,\n    CFG_DEFAULT_BUTTON_MODE = 202,\n    CFG_SWD_ENABLED = 203,\n    CFG_FLASH_BYTES = 204,\n    CFG_RAM_BYTES = 205,\n    CFG_SYSTEM_HEAP_BYTES = 206,\n    CFG_LOW_MEM_SIMULATION_KB = 207,\n    CFG_BOOTLOADER_BOARD_ID = 208,\n    CFG_UF2_FAMILY = 209,\n    CFG_PINS_PORT_SIZE = 210,\n    CFG_BOOTLOADER_PROTECTION = 211,\n    CFG_POWER_DEEPSLEEP_TIMEOUT = 212,\n    CFG_ANALOG_BUTTON_THRESHOLD = 213,\n    CFG_CPU_MHZ = 214,\n    CFG_CONTROLLER_LIGHT_MAX_BRIGHTNESS = 215,\n    CFG_ANALOG_JOYSTICK_MIN = 216,\n    CFG_ANALOG_JOYSTICK_MAX = 217,\n    CFG_TIMERS_TO_USE = 218,\n    CFG_PIN_ONBOARD_DOTSTAR_CLOCK = 219,\n    CFG_PIN_ONBOARD_DOTSTAR_DATA = 220,\n    CFG_NUM_ONBOARD_DOTSTARS = 221,\n    CFG_PIN_ONBOARD_NEOPIXEL = 222,\n    CFG_NUM_ONBOARD_NEOPIXELS = 223,\n    CFG_MATRIX_KEYPAD_MESSAGE_ID = 239,\n    CFG_NUM_MATRIX_KEYPAD_ROWS = 240,\n    CFG_PIN_MATRIX_KEYPAD_ROW0 = 241,\n    CFG_PIN_MATRIX_KEYPAD_ROW1 = 242,\n    CFG_PIN_MATRIX_KEYPAD_ROW2 = 243,\n    CFG_PIN_MATRIX_KEYPAD_ROW3 = 244,\n    CFG_PIN_MATRIX_KEYPAD_ROW4 = 245,\n    CFG_PIN_MATRIX_KEYPAD_ROW5 = 246,\n    CFG_PIN_MATRIX_KEYPAD_ROW6 = 247,\n    CFG_PIN_MATRIX_KEYPAD_ROW7 = 248,\n    CFG_NUM_MATRIX_KEYPAD_COLS = 250,\n    CFG_PIN_MATRIX_KEYPAD_COL0 = 251,\n    CFG_PIN_MATRIX_KEYPAD_COL1 = 252,\n    CFG_PIN_MATRIX_KEYPAD_COL2 = 253,\n    CFG_PIN_MATRIX_KEYPAD_COL3 = 254,\n    CFG_PIN_MATRIX_KEYPAD_COL4 = 255,\n    CFG_PIN_MATRIX_KEYPAD_COL5 = 256,\n    CFG_PIN_MATRIX_KEYPAD_COL6 = 257,\n    CFG_PIN_MATRIX_KEYPAD_COL7 = 258,\n    CFG_PIN_B0 = 300,\n    CFG_PIN_B1 = 301,\n    CFG_PIN_B2 = 302,\n    CFG_PIN_B3 = 303,\n    CFG_PIN_B4 = 304,\n    CFG_PIN_B5 = 305,\n    CFG_PIN_B6 = 306,\n    CFG_PIN_B7 = 307,\n    CFG_PIN_B8 = 308,\n    CFG_PIN_B9 = 309,\n    CFG_PIN_B10 = 310,\n    CFG_PIN_B11 = 311,\n    CFG_PIN_B12 = 312,\n    CFG_PIN_B13 = 313,\n    CFG_PIN_B14 = 314,\n    CFG_PIN_B15 = 315,\n    CFG_PIN_B16 = 316,\n    CFG_PIN_B17 = 317,\n    CFG_PIN_B18 = 318,\n    CFG_PIN_B19 = 319,\n    CFG_PIN_B20 = 320,\n    CFG_PIN_B21 = 321,\n    CFG_PIN_B22 = 322,\n    CFG_PIN_B23 = 323,\n    CFG_PIN_B24 = 324,\n    CFG_PIN_B25 = 325,\n    CFG_PIN_B26 = 326,\n    CFG_PIN_B27 = 327,\n    CFG_PIN_B28 = 328,\n    CFG_PIN_B29 = 329,\n    CFG_PIN_B30 = 330,\n    CFG_PIN_B31 = 331,\n    CFG_PIN_C0 = 350,\n    CFG_PIN_C1 = 351,\n    CFG_PIN_C2 = 352,\n    CFG_PIN_C3 = 353,\n    CFG_PIN_C4 = 354,\n    CFG_PIN_C5 = 355,\n    CFG_PIN_C6 = 356,\n    CFG_PIN_C7 = 357,\n    CFG_PIN_C8 = 358,\n    CFG_PIN_C9 = 359,\n    CFG_PIN_C10 = 360,\n    CFG_PIN_C11 = 361,\n    CFG_PIN_C12 = 362,\n    CFG_PIN_C13 = 363,\n    CFG_PIN_C14 = 364,\n    CFG_PIN_C15 = 365,\n    CFG_PIN_C16 = 366,\n    CFG_PIN_C17 = 367,\n    CFG_PIN_C18 = 368,\n    CFG_PIN_C19 = 369,\n    CFG_PIN_C20 = 370,\n    CFG_PIN_C21 = 371,\n    CFG_PIN_C22 = 372,\n    CFG_PIN_C23 = 373,\n    CFG_PIN_C24 = 374,\n    CFG_PIN_C25 = 375,\n    CFG_PIN_C26 = 376,\n    CFG_PIN_C27 = 377,\n    CFG_PIN_C28 = 378,\n    CFG_PIN_C29 = 379,\n    CFG_PIN_C30 = 380,\n    CFG_PIN_C31 = 381,\n    CFG_PIN_P0 = 400,\n    CFG_PIN_P1 = 401,\n    CFG_PIN_P2 = 402,\n    CFG_PIN_P3 = 403,\n    CFG_PIN_P4 = 404,\n    CFG_PIN_P5 = 405,\n    CFG_PIN_P6 = 406,\n    CFG_PIN_P7 = 407,\n    CFG_PIN_P8 = 408,\n    CFG_PIN_P9 = 409,\n    CFG_PIN_P10 = 410,\n    CFG_PIN_P11 = 411,\n    CFG_PIN_P12 = 412,\n    CFG_PIN_P13 = 413,\n    CFG_PIN_P14 = 414,\n    CFG_PIN_P15 = 415,\n    CFG_PIN_P16 = 416,\n    CFG_PIN_P17 = 417,\n    CFG_PIN_P18 = 418,\n    CFG_PIN_P19 = 419,\n    CFG_PIN_P20 = 420,\n    CFG_PIN_P21 = 421,\n    CFG_PIN_P22 = 422,\n    CFG_PIN_P23 = 423,\n    CFG_PIN_P24 = 424,\n    CFG_PIN_P25 = 425,\n    CFG_PIN_P26 = 426,\n    CFG_PIN_P27 = 427,\n    CFG_PIN_P28 = 428,\n    CFG_PIN_P29 = 429,\n    CFG_PIN_P30 = 430,\n    CFG_PIN_P31 = 431,\n    CFG_PIN_P32 = 432,\n    CFG_PIN_P33 = 433,\n    CFG_PIN_P34 = 434,\n    CFG_PIN_P35 = 435,\n    CFG_PIN_P36 = 436,\n    CFG_PIN_P37 = 437,\n    CFG_PIN_P38 = 438,\n    CFG_PIN_P39 = 439,\n    CFG_PIN_P40 = 440,\n    CFG_PIN_P41 = 441,\n    CFG_PIN_P42 = 442,\n    CFG_PIN_P43 = 443,\n    CFG_PIN_P44 = 444,\n    CFG_PIN_P45 = 445,\n    CFG_PIN_P46 = 446,\n    CFG_PIN_P47 = 447,\n    CFG_PIN_P48 = 448,\n    CFG_PIN_P49 = 449,\n    CFG_PIN_P50 = 450,\n    CFG_PIN_P51 = 451,\n    CFG_PIN_P52 = 452,\n    CFG_PIN_P53 = 453,\n    CFG_PIN_P54 = 454,\n    CFG_PIN_P55 = 455,\n    CFG_PIN_P56 = 456,\n    CFG_PIN_P57 = 457,\n    CFG_PIN_P58 = 458,\n    CFG_PIN_P59 = 459,\n    CFG_PIN_P60 = 460,\n    CFG_PIN_P61 = 461,\n    CFG_PIN_P62 = 462,\n    CFG_PIN_P63 = 463,\n    CFG_PIN_LORA_MISO = 1001,\n    CFG_PIN_LORA_MOSI = 1002,\n    CFG_PIN_LORA_SCK = 1003,\n    CFG_PIN_LORA_CS = 1004,\n    CFG_PIN_LORA_BOOT = 1005,\n    CFG_PIN_LORA_RESET = 1006,\n    CFG_PIN_IRRXLED = 1007,\n    CFG_PIN_IRTXLED = 1008,\n    CFG_PIN_LCD_RESET = 1009,\n    CFG_PIN_LCD_ENABLE = 1010,\n    CFG_PIN_LCD_DATALINE4 = 1011,\n    CFG_PIN_LCD_DATALINE5 = 1012,\n    CFG_PIN_LCD_DATALINE6 = 1013,\n    CFG_PIN_LCD_DATALINE7 = 1014,\n    CFG_NUM_LCD_COLUMNS = 1015,\n    CFG_NUM_LCD_ROWS = 1016,\n    CFG_PIN_RCC0 = 1017,\n    CFG_PIN_RCC1 = 1018,\n    CFG_PIN_RCC2 = 1019,\n    CFG_PIN_RCC3 = 1020,\n    CFG_PIN_RCC4 = 1021,\n    CFG_PIN_RCC5 = 1022,\n    CFG_PIN_RCC6 = 1023,\n    CFG_PIN_RCC7 = 1024,\n    CFG_PIN_SERVO0 = 1025,\n    CFG_PIN_SERVO1 = 1026,\n    CFG_PIN_SERVO2 = 1027,\n    CFG_PIN_SERVO3 = 1028,\n    CFG_PIN_SERVO4 = 1029,\n    CFG_PIN_SERVO5 = 1030,\n    CFG_PIN_SERVO6 = 1031,\n    CFG_PIN_SERVO7 = 1032,\n    CFG_PIN_SERVO8 = 1033,\n    CFG_PIN_PI_TX = 1034,\n    CFG_PIN_PI_RX = 1035,\n    CFG_PIN_GPS_SDA = 1036,\n    CFG_PIN_GPS_SCL = 1037,\n    CFG_PIN_GPS_TX = 1038,\n    CFG_PIN_GPS_RX = 1039,\n    CFG_PIN_GROVE0 = 1040,\n    CFG_PIN_GROVE1 = 1041,\n    CFG_PIN_SS = 1042,\n    CFG_PIN_D33 = 183,\n    CFG_PIN_D34 = 184,\n    CFG_PIN_D35 = 185,\n    CFG_PIN_D36 = 186,\n    CFG_PIN_D37 = 187,\n    CFG_PIN_D38 = 188,\n    CFG_PIN_D39 = 189,\n    CFG_PIN_D40 = 190,\n    CFG_PIN_D41 = 191,\n    CFG_PIN_D42 = 192,\n    CFG_PIN_D43 = 193,\n    CFG_PIN_D44 = 194,\n    CFG_PIN_D45 = 195,\n    CFG_PIN_D46 = 196,\n    CFG_PIN_D47 = 197,\n    CFG_PIN_D48 = 198,\n    CFG_PIN_D49 = 199,\n    CFG_PIN_D50 = 259,\n    CFG_PIN_D51 = 260,\n    CFG_PIN_D52 = 261,\n    CFG_PIN_D53 = 262,\n    CFG_PIN_TX1 = 263,\n    CFG_PIN_TX2 = 264,\n    CFG_PIN_TX3 = 265,\n    CFG_PIN_RX1 = 266,\n    CFG_PIN_RX2 = 267,\n    CFG_PIN_RX3 = 268,\n    CFG_PIN_SCL1 = 269,\n    CFG_PIN_SDA1 = 270,\n    CFG_PIN_PCC_D0 = 271,\n    CFG_PIN_PCC_D1 = 272,\n    CFG_PIN_PCC_D2 = 273,\n    CFG_PIN_PCC_D3 = 274,\n    CFG_PIN_PCC_D4 = 275,\n    CFG_PIN_PCC_D5 = 276,\n    CFG_PIN_PCC_D6 = 277,\n    CFG_PIN_PCC_D7 = 278,\n    CFG_PIN_PCC_D8 = 279,\n    CFG_PIN_PCC_D9 = 280,\n    CFG_PIN_PCC_D10 = 281,\n    CFG_PIN_PCC_D11 = 282,\n    CFG_PIN_PCC_D12 = 283,\n    CFG_PIN_PCC_D13 = 284,\n    CFG_PIN_CC_DEN1 = 285,\n    CFG_PIN_CC_DEN2 = 286,\n    CFG_PIN_CC_CLK = 287,\n    CFG_PIN_XCC_CLK = 288,\n    CFG_PIN_JDPWR_PRE_SENSE = 1100,\n    CFG_PIN_JDPWR_GND_SENSE = 1101,\n    CFG_PIN_JDPWR_PULSE = 1102,\n    CFG_PIN_JDPWR_OVERLOAD_LED = 1103,\n    CFG_PIN_JDPWR_ENABLE = 1104,\n    CFG_PIN_JDPWR_FAULT = 1105,\n    // /pxtapp/hf2dbg.h\n    HF2DBG_H = 1,\n    // /pxtapp/pins.h\n    CFG_PIN_BTN_USER = 94,\n    CFG_PIN_RESET = 95,\n    CFG_PIN_HTS221_SDA = 96,\n    CFG_PIN_HTS221_SCL = 97,\n    CFG_PIN_LPS22HB_SDA = 98,\n    CFG_PIN_LPS22HB_SCL = 99,\n    CFG_PIN_VL53L0X_SDA = 132,\n    CFG_PIN_VL53L0X_SCL = 133,\n    CFG_PIN_VL53L0X_SHUT = 134,\n    CFG_PIN_LSM6DSL_SDA = 135,\n    CFG_PIN_LSM6DSL_SCL = 136,\n    CFG_PIN_BLE_SPI_MISO = 137,\n    CFG_PIN_BLE_SPI_MOSI = 138,\n    CFG_PIN_BLE_SPI_SCLK = 139,\n    CFG_PIN_BLE_SPI_CS = 140,\n    CFG_PIN_BLE_SPI_IRQ = 141,\n    CFG_PIN_BLE_RST = 142,\n    CFG_PIN_WIFI_ISM43362_MOSI = 224,\n    CFG_PIN_WIFI_ISM43362_MISO = 225,\n    CFG_PIN_WIFI_ISM43362_SCK = 226,\n    CFG_PIN_WIFI_ISM43362_CS = 227,\n    CFG_PIN_WIFI_ISM43362_COMMAND_DATA_READY = 228,\n    CFG_PIN_WIFI_ISM43362_RESET = 229,\n    CFG_PIN_WIFI_ISM43362_WAKE_UP = 230,\n    CFG_PIN_UART1_TX = 231,\n    CFG_PIN_UART1_RX = 232,\n    CFG_PIN_UART2_TX = 234,\n    CFG_PIN_UART2_RX = 235,\n    CFG_PIN_UART3_TX = 236,\n    CFG_PIN_UART3_RX = 237,\n    CFG_PIN_UART4_TX = 289,\n    CFG_PIN_UART4_RX = 290,\n    CFG_PIN_SPI1_MISO = 291,\n    CFG_PIN_SPI1_MOSI = 292,\n    CFG_PIN_SPI1_SCK = 293,\n    CFG_PIN_SPI2_MISO = 294,\n    CFG_PIN_SPI2_MOSI = 295,\n    CFG_PIN_SPI2_SCK = 296,\n    CFG_PIN_SPI3_MISO = 297,\n    CFG_PIN_SPI3_MOSI = 298,\n    CFG_PIN_SPI3_SCK = 299,\n    CFG_PIN_I2C1_SCL = 332,\n    CFG_PIN_I2C1_SDA = 333,\n    CFG_PIN_I2C2_SCL = 334,\n    CFG_PIN_I2C2_SDA = 335,\n    BUTTON_ACTIVE_HIGH_PULL_DOWN = 17,\n    BUTTON_ACTIVE_HIGH_PULL_UP = 33,\n    BUTTON_ACTIVE_HIGH_PULL_NONE = 49,\n    BUTTON_ACTIVE_LOW_PULL_DOWN = 16,\n    BUTTON_ACTIVE_LOW_PULL_UP = 32,\n    BUTTON_ACTIVE_LOW_PULL_NONE = 48,\n    // /pxtapp/platform.h\n    SETTINGS_MAGIC_0 = 273114691,\n    SETTINGS_MAGIC_1 = 781864998,\n    BOOT_RTC_SIGNATURE = 1906448503,\n    APP_RTC_SIGNATURE = 614608146,\n    PAGE_SIZE = 1024,\n    DEV_NUM_PINS = 64,\n    IMAGE_BITS = 4,\n    ALT0 = 0,\n    ALT1 = 256,\n    ALT2 = 512,\n    PA_0 = 0,\n    PA_0_ALT0 = 0,\n    PA_1 = 1,\n    PA_1_ALT0 = 1,\n    PA_2 = 2,\n    PA_2_ALT0 = 2,\n    PA_3 = 3,\n    PA_3_ALT0 = 3,\n    PA_4 = 4,\n    PA_4_ALT0 = 4,\n    PA_5 = 5,\n    PA_5_ALT0 = 5,\n    PA_6 = 6,\n    PA_6_ALT0 = 6,\n    PA_7 = 7,\n    PA_7_ALT0 = 7,\n    PA_7_ALT1 = 263,\n    PA_7_ALT2 = 519,\n    PA_8 = 8,\n    PA_9 = 9,\n    PA_10 = 10,\n    PA_11 = 11,\n    PA_12 = 12,\n    PA_13 = 13,\n    PA_14 = 14,\n    PA_15 = 15,\n    PA_15_ALT0 = 15,\n    PB_0 = 16,\n    PB_0_ALT0 = 16,\n    PB_0_ALT1 = 272,\n    PB_1 = 17,\n    PB_1_ALT0 = 17,\n    PB_1_ALT1 = 273,\n    PB_2 = 18,\n    PB_3 = 19,\n    PB_3_ALT0 = 19,\n    PB_4 = 20,\n    PB_4_ALT0 = 20,\n    PB_5 = 21,\n    PB_5_ALT0 = 21,\n    PB_6 = 22,\n    PB_6_ALT0 = 22,\n    PB_7 = 23,\n    PB_7_ALT0 = 23,\n    PB_8 = 24,\n    PB_8_ALT0 = 24,\n    PB_9 = 25,\n    PB_9_ALT0 = 25,\n    PB_10 = 26,\n    PB_11 = 27,\n    PB_12 = 28,\n    PB_13 = 29,\n    PB_13_ALT0 = 29,\n    PB_14 = 30,\n    PB_14_ALT0 = 30,\n    PB_14_ALT1 = 286,\n    PB_15 = 31,\n    PB_15_ALT0 = 31,\n    PB_15_ALT1 = 287,\n    PC_0 = 32,\n    PC_0_ALT0 = 32,\n    PC_0_ALT1 = 288,\n    PC_1 = 33,\n    PC_1_ALT0 = 33,\n    PC_1_ALT1 = 289,\n    PC_2 = 34,\n    PC_2_ALT0 = 34,\n    PC_2_ALT1 = 290,\n    PC_3 = 35,\n    PC_3_ALT0 = 35,\n    PC_3_ALT1 = 291,\n    PC_4 = 36,\n    PC_4_ALT0 = 36,\n    PC_5 = 37,\n    PC_5_ALT0 = 37,\n    PC_6 = 38,\n    PC_6_ALT0 = 38,\n    PC_7 = 39,\n    PC_7_ALT0 = 39,\n    PC_8 = 40,\n    PC_8_ALT0 = 40,\n    PC_9 = 41,\n    PC_9_ALT0 = 41,\n    PC_10 = 42,\n    PC_10_ALT0 = 42,\n    PC_11 = 43,\n    PC_11_ALT0 = 43,\n    PC_12 = 44,\n    PC_13 = 45,\n    PC_14 = 46,\n    PC_15 = 47,\n    PD_0 = 48,\n    PD_1 = 49,\n    PD_2 = 50,\n    PD_3 = 51,\n    PD_4 = 52,\n    PD_5 = 53,\n    PD_6 = 54,\n    PD_7 = 55,\n    PD_8 = 56,\n    PD_9 = 57,\n    PD_10 = 58,\n    PD_11 = 59,\n    PD_12 = 60,\n    PD_13 = 61,\n    PD_14 = 62,\n    PD_15 = 63,\n    PE_0 = 64,\n    PE_1 = 65,\n    PE_2 = 66,\n    PE_3 = 67,\n    PE_4 = 68,\n    PE_5 = 69,\n    PE_6 = 70,\n    PE_7 = 71,\n    PE_8 = 72,\n    PE_9 = 73,\n    PE_10 = 74,\n    PE_11 = 75,\n    PE_12 = 76,\n    PE_13 = 77,\n    PE_14 = 78,\n    PE_15 = 79,\n    // /pxtapp/pxt.h\n    PXT_COMM_BASE = 536879104,\n    PXT_CODAL = 1,\n    DEVICE_ID_BUTTON_SLIDE = 3000,\n    DEVICE_ID_MICROPHONE = 3001,\n    DEVICE_ID_FIRST_BUTTON = 4000,\n    DEVICE_ID_FIRST_TOUCHBUTTON = 4100,\n    PXT_INTERNAL_KEY_UP = 2050,\n    PXT_INTERNAL_KEY_DOWN = 2051,\n    // /pxtapp/pxtbase.h\n    PXT_UTF8 = 0,\n    PXT32 = 1,\n    PXT64 = 1,\n    PXT_REFCNT_FLASH = 65534,\n    VTABLE_MAGIC = 249,\n    VTABLE_MAGIC2 = 248,\n    Undefined = 0,\n    Boolean = 1,\n    Number = 2,\n    String = 3,\n    Object = 4,\n    Function = 5,\n    BoxedString = 1,\n    BoxedNumber = 2,\n    BoxedBuffer = 3,\n    RefAction = 4,\n    RefImage = 5,\n    RefCollection = 6,\n    RefRefLocal = 7,\n    RefMap = 8,\n    RefMImage = 9,\n    MMap = 10,\n    BoxedString_SkipList = 11,\n    BoxedString_ASCII = 12,\n    ZPin = 13,\n    User0 = 16,\n    IMAGE_HEADER_MAGIC = 135,\n    Int8LE = 1,\n    UInt8LE = 2,\n    Int16LE = 3,\n    UInt16LE = 4,\n    Int32LE = 5,\n    Int8BE = 6,\n    UInt8BE = 7,\n    Int16BE = 8,\n    UInt16BE = 9,\n    Int32BE = 10,\n    UInt32LE = 11,\n    UInt32BE = 12,\n    Float32LE = 13,\n    Float64LE = 14,\n    Float32BE = 15,\n    Float64BE = 16,\n    NUM_TRY_FRAME_REGS = 3,\n    GC = 0,\n    PXT_STRING_SKIP_INCR = 16,\n    // /pxtapp/pxtconfig.h\n    PXT_UF2_FAMILY = 1467308631,\n    // /pxtapp/uf2hid.h\n    UF2_HID_H = 1,\n}",
            "enums.d.ts": "// Auto-generated. Do not edit.\n\n\n    declare const enum NumberFormat {\n    Int8LE = 1,\n    UInt8LE = 2,\n    Int16LE = 3,\n    UInt16LE = 4,\n    Int32LE = 5,\n    Int8BE = 6,\n    UInt8BE = 7,\n    Int16BE = 8,\n    UInt16BE = 9,\n    Int32BE = 10,\n\n    UInt32LE = 11,\n    UInt32BE = 12,\n    Float32LE = 13,\n    Float64LE = 14,\n    Float32BE = 15,\n    Float64BE = 16,\n    }\n\n\n    declare const enum PerfCounters {\n    GC = 0,\n    }\n\n\n    declare const enum EventFlags {\n    //%\n    QueueIfBusy = 16,  // MESSAGE_BUS_LISTENER_QUEUE_IF_BUSY\n    //%\n    DropIfBusy = 32,  // MESSAGE_BUS_LISTENER_DROP_IF_BUSY\n    //%\n    Reentrant = 8,  // MESSAGE_BUS_LISTENER_REENTRANT\n    }\n\n// Auto-generated. Do not edit. Really.\n",
            "fixed.ts": "interface Fx8 {\n    _dummyFx8: string;\n}\n\nfunction Fx8(v: number) {\n    return ((v * 256) | 0) as any as Fx8\n}\n\nnamespace Fx {\n    export const zeroFx8 = 0 as any as Fx8\n    export const oneHalfFx8 = 128 as any as Fx8\n    export const oneFx8 = 256 as any as Fx8\n    export const twoFx8 = 512 as any as Fx8\n\n    export function neg(a: Fx8) {\n        return (-(a as any as number)) as any as Fx8\n    }\n    export function toIntShifted(a: Fx8, n: number) {\n        return (a as any as number) >> (n + 8)\n    }\n    export function add(a: Fx8, b: Fx8) {\n        return ((a as any as number) + (b as any as number)) as any as Fx8\n    }\n    export function iadd(a: number, b: Fx8) {\n        return ((a << 8) + (b as any as number)) as any as Fx8\n    }\n    export function sub(a: Fx8, b: Fx8) {\n        return ((a as any as number) - (b as any as number)) as any as Fx8\n    }\n    export function mul(a: Fx8, b: Fx8) {\n        return (Math.imul((a as any as number), (b as any as number)) >> 8) as any as Fx8\n    }\n    export function imul(a: Fx8, b: number) {\n        return Math.imul((a as any as number), (b as any as number)) as any as Fx8\n    }\n    export function div(a: Fx8, b: Fx8) {\n        return Math.idiv((a as any as number) << 8, b as any as number) as any as Fx8\n    }\n    export function idiv(a: Fx8, b: number) {\n        return Math.idiv((a as any as number), b) as any as Fx8\n    }\n    export function compare(a: Fx8, b: Fx8) {\n        return (a as any as number) - (b as any as number)\n    }\n    export function abs(a: Fx8) {\n        if ((a as any as number) < 0)\n            return (-(a as any as number)) as any as Fx8\n        else\n            return a\n    }\n    export function min(a: Fx8, b: Fx8) {\n        if (a < b)\n            return a\n        else\n            return b\n    }\n    export function max(a: Fx8, b: Fx8) {\n        if (a > b)\n            return a\n        else\n            return b\n    }\n    export function floor(v: Fx8): Fx8 {\n        return ((v as any as number) & ~0xff) as any as Fx8;\n    }\n    export function ceil(v: Fx8): Fx8 {\n        return (v as any as number) & 0xff ? Fx.floor(Fx.add(v, Fx.oneFx8)) : v;\n    }\n    export function leftShift(a: Fx8, n: number) {\n        return (a as any as number << n) as any as Fx8\n    }\n    export function rightShift(a: Fx8, n: number) {\n        return (a as any as number >> n) as any as Fx8\n    }\n    export function toInt(v: Fx8) {\n        return ((v as any as number) + 128) >> 8\n    }\n    export function toFloat(v: Fx8) {\n        return (v as any as number) / 256\n    }\n}",
            "forever.ts": "/**\n * Repeats the code forever in the background. On each iteration, allows other codes to run.\n * @param body code to execute\n */\n//% help=loops/forever weight=100 afterOnStart=true blockNamespace=\"loops\"\n//% blockId=forever block=\"forever\" blockAllowMultiple=1\nfunction forever(a: () => void): void {\n    loops.forever(a);\n}\n\n// micro:bit compatibility\n// these functions allow some level of reuse\n// between micro:bit and other maker-style editors\nnamespace basic {\n    export function forever(a: () => void) {\n        loops.forever(a);\n    }\n}",
            "gc.cpp": "#include \"pxtbase.h\"\n\n#ifndef GC_BLOCK_SIZE\n#define GC_BLOCK_SIZE (1024 * 16)\n#endif\n\n#ifndef GC_MAX_ALLOC_SIZE\n#define GC_MAX_ALLOC_SIZE (GC_BLOCK_SIZE - 16)\n#endif\n\n#ifndef GC_ALLOC_BLOCK\n#define GC_ALLOC_BLOCK xmalloc\n#endif\n\n#ifdef PXT64\n#define HIGH_SHIFT 48\n#define BYTES_TO_WORDS(x) ((x) >> 3)\n#define WORDS_TO_BYTES(x) ((x) << 3)\n#define ALIGN_TO_WORD(x) (((x) + 7) & (~7ULL))\n#define VAR_BLOCK_WORDS(vt) ((uint32_t)(uint64_t)(vt) >> 2)\n#else\n#define HIGH_SHIFT 28\n#define BYTES_TO_WORDS(x) ((x) >> 2)\n#define WORDS_TO_BYTES(x) ((x) << 2)\n#define ALIGN_TO_WORD(x) (((x) + 3) & (~3U))\n#define VAR_BLOCK_WORDS(vt) (((uint32_t)(vt) << 4) >> (4 + 2))\n#endif\n\n#define FREE_MASK (1ULL << (HIGH_SHIFT + 3))\n#define ARRAY_MASK (1ULL << (HIGH_SHIFT + 2))\n#define PERMA_MASK (1ULL << (HIGH_SHIFT + 1))\n#define MARKED_MASK 0x1\n#define ANY_MARKED_MASK 0x3\n\n// the bit operations should be faster than loading large constants\n#define IS_FREE(vt) ((uintptr_t)(vt) >> (HIGH_SHIFT + 3))\n#define IS_ARRAY(vt) (((uintptr_t)(vt) >> (HIGH_SHIFT + 2)) & 1)\n#define IS_PERMA(vt) (((uintptr_t)(vt) >> (HIGH_SHIFT + 1)) & 1)\n#define IS_VAR_BLOCK(vt) ((uintptr_t)(vt) >> (HIGH_SHIFT + 2))\n#define IS_MARKED(vt) ((uintptr_t)(vt)&MARKED_MASK)\n#define IS_LIVE(vt) (IS_MARKED(vt) || (((uintptr_t)(vt) >> (HIGH_SHIFT)) == 0x6))\n\n//#define PXT_GC_DEBUG 1\n#ifndef PXT_GC_CHECKS\n#define PXT_GC_CHECKS 1\n#endif\n//#define PXT_GC_STRESS 1\n\n//#define PXT_GC_CHECKS 1\n\n#define MARK(v)                                                                                    \\\n    do {                                                                                           \\\n        GC_CHECK(inGCArea(v), 42);                                                                 \\\n        *(uintptr_t *)(v) |= MARKED_MASK;                                                          \\\n    } while (0)\n\n#ifdef PXT_GC_DEBUG\n#define LOG DMESG\n#define VLOG DMESG\n#define VVLOG DMESG\n#else\n#define LOG NOLOG\n#define VLOG NOLOG\n#define VVLOG NOLOG\n#endif\n\n#ifdef PXT_GC_CHECKS\n#define GC_CHECK(cond, code)                                                                       \\\n    if (!(cond))                                                                                   \\\n    oops(code)\n#else\n#define GC_CHECK(cond, code) ((void)0)\n#endif\n\nnamespace pxt {\n\n// keep in sync with base/control.ts, function gcStats()\nstruct GCStats {\n    uint32_t numGC;\n    uint32_t numBlocks;\n    uint32_t totalBytes;\n    uint32_t lastFreeBytes;\n    uint32_t lastMaxBlockBytes;\n    uint32_t minFreeBytes;\n};\n\nstatic GCStats gcStats;\n\n//% expose\nBuffer getGCStats() {\n    return mkBuffer((uint8_t *)&gcStats, sizeof(gcStats));\n}\n\n//%\nvoid popThreadContext(ThreadContext *ctx);\n//%\nThreadContext *pushThreadContext(void *sp, void *endSP);\n\nunsigned RefRecord_gcsize(RefRecord *r) {\n    VTable *tbl = getVTable(r);\n    return BYTES_TO_WORDS(tbl->numbytes);\n}\n\n#ifdef PXT_GC_THREAD_LIST\nThreadContext *threadContexts;\n#endif\n\n#define IN_GC_ALLOC 1\n#define IN_GC_COLLECT 2\n#define IN_GC_FREEZE 4\n#define IN_GC_PREALLOC 8\n\n#ifndef PXT_VM\nstatic TValue *tempRoot;\nstatic uint8_t tempRootLen;\n#endif\n\nuint8_t inGC;\n\nvoid popThreadContext(ThreadContext *ctx) {\n#ifndef PXT_VM\n    VLOG(\"pop: %p\", ctx);\n\n    if (!ctx)\n        return;\n\n    auto n = ctx->stack.next;\n    if (n) {\n        VLOG(\"seg %p\", n);\n        ctx->stack.top = n->top;\n        ctx->stack.bottom = n->bottom;\n        ctx->stack.next = n->next;\n        app_free(n);\n    } else {\n#ifdef PXT_GC_THREAD_LIST\n        if (ctx->next)\n            ctx->next->prev = ctx->prev;\n        if (ctx->prev)\n            ctx->prev->next = ctx->next;\n        else {\n            if (threadContexts != ctx)\n                oops(41);\n            threadContexts = ctx->next;\n            if (threadContexts)\n                threadContexts->prev = NULL;\n        }\n#endif\n        app_free(ctx);\n        setThreadContext(NULL);\n    }\n#endif\n}\n\n#define ALLOC(tp) (tp *)app_alloc(sizeof(tp))\n\nThreadContext *pushThreadContext(void *sp, void *endSP) {\n#ifdef PXT_VM\n    return NULL;\n#else\n    if (PXT_IN_ISR())\n        target_panic(PANIC_CALLED_FROM_ISR);\n\n    auto curr = getThreadContext();\n    tempRoot = (TValue *)endSP;\n    tempRootLen = (uintptr_t *)sp - (uintptr_t *)endSP;\n    if (curr) {\n#ifdef PXT_GC_THREAD_LIST\n#ifdef PXT_GC_DEBUG\n        auto ok = false;\n        for (auto p = threadContexts; p; p = p->next)\n            if (p == curr) {\n                ok = true;\n                break;\n            }\n        if (!ok)\n            oops(49);\n#endif\n#endif\n        auto seg = ALLOC(StackSegment);\n        VLOG(\"stack %p / %p\", seg, curr);\n        seg->top = curr->stack.top;\n        seg->bottom = curr->stack.bottom;\n        seg->next = curr->stack.next;\n        curr->stack.next = seg;\n    } else {\n        curr = ALLOC(ThreadContext);\n        LOG(\"push: %p\", curr);\n        curr->globals = globals;\n        curr->stack.next = NULL;\n        curr->thrownValue = TAG_NON_VALUE;\n        curr->tryFrame = NULL;\n\n#ifdef PXT_GC_THREAD_LIST\n        curr->next = threadContexts;\n        curr->prev = NULL;\n        if (curr->next)\n            curr->next->prev = curr;\n        threadContexts = curr;\n#endif\n        setThreadContext(curr);\n    }\n    tempRootLen = 0;\n    curr->stack.bottom = sp;\n    curr->stack.top = NULL;\n    return curr;\n#endif\n}\n\nclass RefBlock : public RefObject {\n  public:\n    RefBlock *nextFree;\n};\n\nstruct GCBlock {\n    GCBlock *next;\n    uint32_t blockSize;\n    RefObject data[0];\n};\n\nstruct PendingArray {\n    PendingArray *next;\n    TValue *data;\n    unsigned len;\n};\n\n#define PENDING_ARRAY_THR 100\n\nstatic PendingArray *pendingArrays;\nstatic LLSegment gcRoots;\nLLSegment workQueue; // (ab)used by consString making\nstatic GCBlock *firstBlock;\nstatic RefBlock *firstFree;\nstatic uint8_t *midPtr;\n\nstatic bool inGCArea(void *ptr) {\n    for (auto block = firstBlock; block; block = block->next) {\n        if ((void *)block->data <= ptr && ptr < (void *)((uint8_t *)block->data + block->blockSize))\n            return true;\n    }\n    return false;\n}\n\n#define NO_MAGIC(vt) ((VTable *)vt)->magic != VTABLE_MAGIC\n#define VT(p) (*(uintptr_t *)(p))\n#define SKIP_PROCESSING(p)                                                                         \\\n    (isReadOnly(p) || (VT(p) & (ANY_MARKED_MASK | ARRAY_MASK)) || NO_MAGIC(VT(p)))\n\nvoid gcMarkArray(void *data) {\n    auto segBl = (uintptr_t *)data - 1;\n    GC_CHECK(!IS_MARKED(VT(segBl)), 47);\n    MARK(segBl);\n}\n\nvoid gcScan(TValue v) {\n    if (SKIP_PROCESSING(v))\n        return;\n    MARK(v);\n    workQueue.push(v);\n}\n\nvoid gcScanMany(TValue *data, unsigned len) {\n    // VLOG(\"scan: %p %d\", data, len);\n    for (unsigned i = 0; i < len; ++i) {\n        auto v = data[i];\n        // VLOG(\"psh: %p %d %d\", v, isReadOnly(v), (*(uint32_t *)v & 1));\n        if (SKIP_PROCESSING(v))\n            continue;\n        MARK(v);\n        workQueue.push(v);\n        if (workQueue.getLength() > PENDING_ARRAY_THR) {\n            i++;\n            // store rest of the work for later, when we have cleared the queue\n            auto pa = (PendingArray *)xmalloc(sizeof(PendingArray));\n            pa->next = pendingArrays;\n            pa->data = data + i;\n            pa->len = len - i;\n            pendingArrays = pa;\n            break;\n        }\n    }\n}\n\nvoid gcScanSegment(Segment &seg) {\n    auto data = seg.getData();\n    if (!data)\n        return;\n    VVLOG(\"seg %p %d\", data, seg.getLength());\n    gcMarkArray(data);\n    gcScanMany(data, seg.getLength());\n}\n\n#define getScanMethod(vt) ((RefObjectMethod)(((VTable *)(vt))->methods[2]))\n#define getSizeMethod(vt) ((RefObjectSizeMethod)(((VTable *)(vt))->methods[3]))\n\nvoid gcProcess(TValue v) {\n    if (SKIP_PROCESSING(v))\n        return;\n    VVLOG(\"gcProcess: %p\", v);\n    MARK(v);\n    auto scan = getScanMethod(VT(v) & ~ANY_MARKED_MASK);\n    if (scan)\n        scan((RefObject *)v);\n    for (;;) {\n        while (workQueue.getLength()) {\n            auto curr = (RefObject *)workQueue.pop();\n            VVLOG(\" - %p\", curr);\n            scan = getScanMethod(curr->vt() & ~ANY_MARKED_MASK);\n            if (scan)\n                scan(curr);\n        }\n        if (pendingArrays) {\n            auto pa = pendingArrays;\n            pendingArrays = pa->next;\n            auto data = pa->data;\n            auto len = pa->len;\n            xfree(pa);\n            gcScanMany(data, len);\n        } else {\n            break;\n        }\n    }\n}\n\nstatic void mark(int flags) {\n#ifdef PXT_GC_DEBUG\n    flags |= 2;\n#endif\n    auto data = gcRoots.getData();\n    auto len = gcRoots.getLength();\n    if (flags & 2) {\n        DMESG(\"--MARK\");\n        DMESG(\"RP:%p/%d\", data, len);\n    }\n    for (unsigned i = 0; i < len; ++i) {\n        auto d = data[i];\n        if ((uintptr_t)d & 1) {\n            d = *(TValue *)((uintptr_t)d & ~1);\n        }\n        gcProcess(d);\n    }\n\n#ifdef PXT_GC_THREAD_LIST\n    for (auto ctx = threadContexts; ctx; ctx = ctx->next) {\n        gcProcess(ctx->thrownValue);\n        for (auto seg = &ctx->stack; seg; seg = seg->next) {\n            auto ptr = (TValue *)threadAddressFor(ctx, seg->top);\n            auto end = (TValue *)threadAddressFor(ctx, seg->bottom);\n            VLOG(\"mark: %p - %p\", ptr, end);\n            while (ptr < end) {\n                gcProcess(*ptr++);\n            }\n        }\n    }\n#else\n    gcProcessStacks(flags);\n#endif\n\n    if (globals) {\n#ifdef PXT_VM\n        auto nonPtrs = vmImg->infoHeader->nonPointerGlobals;\n#else\n        auto nonPtrs = bytecode[21];\n#endif\n        len = getNumGlobals() - nonPtrs;\n        data = globals + nonPtrs;\n        if (flags & 2)\n            DMESG(\"RG:%p/%d\", data, len);\n        VLOG(\"globals: %p %d\", data, len);\n        for (unsigned i = 0; i < len; ++i) {\n            gcProcess(*data++);\n        }\n    }\n\n#ifndef PXT_VM\n    data = tempRoot;\n    len = tempRootLen;\n    for (unsigned i = 0; i < len; ++i) {\n        gcProcess(*data++);\n    }\n#endif\n}\n\nstatic uint32_t getObjectSize(RefObject *o) {\n    auto vt = o->vt() & ~ANY_MARKED_MASK;\n    uint32_t r;\n    GC_CHECK(vt != 0, 49);\n    if (IS_VAR_BLOCK(vt)) {\n        r = VAR_BLOCK_WORDS(vt);\n    } else {\n        auto sz = getSizeMethod(vt);\n        // GC_CHECK(0x2000 <= (intptr_t)sz && (intptr_t)sz <= 0x100000, 47);\n        r = sz(o);\n    }\n    GC_CHECK(1 <= r && (r <= BYTES_TO_WORDS(GC_MAX_ALLOC_SIZE) || IS_FREE(vt)), 41);\n    return r;\n}\n\nstatic void setupFreeBlock(GCBlock *curr) {\n    gcStats.numBlocks++;\n    gcStats.totalBytes += curr->blockSize;\n    curr->data[0].setVT(FREE_MASK | (TOWORDS(curr->blockSize) << 2));\n    ((RefBlock *)curr->data)[0].nextFree = firstFree;\n    firstFree = (RefBlock *)curr->data;\n    midPtr = (uint8_t *)curr->data + curr->blockSize / 4;\n}\n\nstatic void linkFreeBlock(GCBlock *curr) {\n    // blocks need to be sorted by address for midPtr to work\n    if (!firstBlock || curr < firstBlock) {\n        curr->next = firstBlock;\n        firstBlock = curr;\n    } else {\n        for (auto p = firstBlock; p; p = p->next) {\n            if (!p->next || curr < p->next) {\n                curr->next = p->next;\n                p->next = curr;\n                break;\n            }\n        }\n    }\n}\n\nvoid gcPreAllocateBlock(uint32_t sz) {\n    auto curr = (GCBlock *)GC_ALLOC_BLOCK(sz);\n    curr->blockSize = sz - sizeof(GCBlock);\n    LOG(\"GC pre-alloc: %p\", curr);\n    GC_CHECK((curr->blockSize & 3) == 0, 40);\n    setupFreeBlock(curr);\n    linkFreeBlock(curr);\n}\n\nstatic GCBlock *allocateBlockCore() {\n    int sz = GC_BLOCK_SIZE;\n    void *dummy = NULL;\n#ifdef GC_GET_HEAP_SIZE\n    if (firstBlock) {\n#ifdef GC_STACK_BASE\n        if (!firstBlock->next) {\n            int memSize = getConfig(CFG_RAM_BYTES, 0);\n            int codalEnd = GC_STACK_BASE;\n            // round up to 1k - there is sometimes a few bytes below the stack\n            codalEnd = (codalEnd + 1024) & ~1023;\n            int codalSize = codalEnd & 0xffffff;\n            sz = memSize - codalSize - 4;\n            if (sz > 0) {\n                auto curr = (GCBlock *)codalEnd;\n                curr->blockSize = sz - sizeof(GCBlock);\n                return curr;\n            }\n        }\n#endif\n        gc(2); // dump roots\n        soft_panic(PANIC_GC_OOM);\n    }\n    auto lowMem = getConfig(CFG_LOW_MEM_SIMULATION_KB, 0);\n    auto sysHeapSize = getConfig(CFG_SYSTEM_HEAP_BYTES, 4 * 1024);\n    auto heapSize = GC_GET_HEAP_SIZE();\n    DMESG(\"heap: %d (minus %d sys bytes)\", heapSize, sysHeapSize);\n    sz = heapSize - sysHeapSize;\n    if (lowMem) {\n        auto memIncrement = 32 * 1024;\n        // get the memory size - assume it's increment of 32k,\n        // and we don't statically allocate more than 32k\n        auto memSize = ((heapSize + memIncrement - 1) / memIncrement) * memIncrement;\n        int fillerSize = memSize - lowMem * 1024;\n        if (fillerSize > 0) {\n            dummy = GC_ALLOC_BLOCK(fillerSize);\n            sz -= fillerSize;\n        }\n    }\n#endif\n    auto curr = (GCBlock *)GC_ALLOC_BLOCK(sz);\n    curr->blockSize = sz - sizeof(GCBlock);\n    // make sure reference to allocated block is stored somewhere, otherwise\n    // GCC optimizes out the call to GC_ALLOC_BLOCK\n    curr->data[4].setVT((uintptr_t)dummy);\n    return curr;\n}\n\n__attribute__((noinline)) static void allocateBlock() {\n    auto curr = allocateBlockCore();\n    DMESG(\"GC block %db @ %p\", curr->blockSize, curr);\n    GC_CHECK((curr->blockSize & 3) == 0, 40);\n    setupFreeBlock(curr);\n    linkFreeBlock(curr);\n}\n\nstatic void sweep(int flags) {\n    RefBlock *prevFreePtr = NULL;\n    uint32_t freeSize = 0;\n    uint32_t totalSize = 0;\n    uint32_t maxFreeBlock = 0;\n    firstFree = NULL;\n\n    gcStats.numGC++;\n\n    for (auto h = firstBlock; h; h = h->next) {\n        auto d = h->data;\n        auto words = BYTES_TO_WORDS(h->blockSize);\n        auto end = d + words;\n        totalSize += words;\n        VLOG(\"sweep: %p - %p\", d, end);\n        while (d < end) {\n            if (IS_LIVE(d->vtable)) {\n                VVLOG(\"Live %p\", d);\n                d->setVT(d->vt() & ~MARKED_MASK);\n                d += getObjectSize(d);\n            } else {\n                auto start = (RefBlock *)d;\n                while (d < end) {\n                    if (IS_FREE(d->vtable)) {\n                        VVLOG(\"Free %p\", d);\n                    } else if (IS_LIVE(d->vtable)) {\n                        break;\n                    } else if (IS_ARRAY(d->vtable)) {\n                        VVLOG(\"Dead Arr %p\", d);\n                    } else {\n                        VVLOG(\"Dead Obj %p\", d);\n                        GC_CHECK(d->vtable->magic == VTABLE_MAGIC, 41);\n                        d->destroyVT();\n                        VVLOG(\"destroyed\");\n                    }\n                    d += getObjectSize(d);\n                }\n                auto sz = d - (RefObject *)start;\n                freeSize += sz;\n                if (sz > (int)maxFreeBlock)\n                    maxFreeBlock = sz;\n#ifdef PXT_GC_CHECKS\n                memset((void *)start, 0xff, WORDS_TO_BYTES(sz));\n#endif\n                start->setVT((sz << 2) | FREE_MASK);\n                if (sz > 1) {\n                    start->nextFree = NULL;\n                    if (!prevFreePtr) {\n                        firstFree = start;\n                    } else {\n                        prevFreePtr->nextFree = start;\n                    }\n                    prevFreePtr = start;\n                }\n            }\n        }\n    }\n\n    if (midPtr) {\n        uint32_t currFree = 0;\n#ifdef PXT_ESP32\n        auto limit = freeSize * 1 / 4;\n#else\n        auto limit = freeSize * 1 / 2;\n#endif\n        for (auto p = firstFree; p; p = p->nextFree) {\n            auto len = VAR_BLOCK_WORDS(p->vtable);\n            currFree += len;\n            if (currFree > limit) {\n                midPtr = (uint8_t *)p + ((limit - currFree + len) << 2);\n                break;\n            }\n        }\n    }\n\n    freeSize = WORDS_TO_BYTES(freeSize);\n    totalSize = WORDS_TO_BYTES(totalSize);\n    maxFreeBlock = WORDS_TO_BYTES(maxFreeBlock);\n\n    gcStats.lastFreeBytes = freeSize;\n    gcStats.lastMaxBlockBytes = maxFreeBlock;\n\n    if (gcStats.minFreeBytes == 0 || gcStats.minFreeBytes > freeSize)\n        gcStats.minFreeBytes = freeSize;\n\n    if (flags & 1)\n        DMESG(\"GC %d/%d free; %d maxBlock\", freeSize, totalSize, maxFreeBlock);\n    else\n        LOG(\"GC %d/%d free; %d maxBlock\", freeSize, totalSize, maxFreeBlock);\n\n#ifndef GC_GET_HEAP_SIZE\n    // if the heap is 90% full, allocate a new block\n    if (freeSize * 10 <= totalSize) {\n        allocateBlock();\n    }\n#endif\n}\n\nvoid gc(int flags) {\n    startPerfCounter(PerfCounters::GC);\n    GC_CHECK(!(inGC & IN_GC_COLLECT), 40);\n    inGC |= IN_GC_COLLECT;\n    VLOG(\"GC mark\");\n    mark(flags);\n    VLOG(\"GC sweep\");\n    sweep(flags);\n    VLOG(\"GC done\");\n    stopPerfCounter(PerfCounters::GC);\n    inGC &= ~IN_GC_COLLECT;\n}\n\n#ifdef GC_GET_HEAP_SIZE\nextern \"C\" void free(void *ptr) {\n    if (!ptr)\n        return;\n    if (inGCArea(ptr))\n        app_free(ptr);\n    else\n        xfree(ptr);\n}\n\nextern \"C\" void *malloc(size_t sz) {\n    if (PXT_IN_ISR() || inGC)\n        return xmalloc(sz);\n    else\n        return app_alloc(sz);\n}\n\nextern \"C\" void *realloc(void *ptr, size_t size) {\n    if (inGCArea(ptr)) {\n        void *mem = malloc(size);\n\n        if (ptr != NULL && mem != NULL) {\n            auto r = (uintptr_t *)ptr;\n            GC_CHECK((r[-1] >> (HIGH_SHIFT + 1)) == 3, 41);\n            size_t blockSize = VAR_BLOCK_WORDS(r[-1]);\n            memcpy(mem, ptr, min(blockSize * sizeof(void *), size));\n            free(ptr);\n        }\n\n        return mem;\n    } else {\n        return device_realloc(ptr, size);\n    }\n}\n#endif\n\nvoid *gcAllocateArray(int numbytes) {\n    numbytes = ALIGN_TO_WORD(numbytes);\n    numbytes += sizeof(void *);\n    auto r = (uintptr_t *)gcAllocate(numbytes);\n    *r = ARRAY_MASK | (TOWORDS(numbytes) << 2);\n    return r + 1;\n}\n\nstatic void *gcAllocAt(void *hint, int numbytes) {\n    gc(0);\n    size_t numwords = BYTES_TO_WORDS(ALIGN_TO_WORD(numbytes));\n\n    for (auto p = firstFree; p; p = p->nextFree) {\n        GC_CHECK(!isReadOnly((TValue)p), 49);\n        auto vt = p->vtable;\n        GC_CHECK(IS_FREE(vt), 43);\n        int offset = BYTES_TO_WORDS((uint8_t *)hint - (uint8_t *)p);\n        int left = (int)(VAR_BLOCK_WORDS(vt) - numwords - offset);\n        // we give ourselves some space here, so we don't get some strange overlaps\n        if (offset >= 8 && left >= 8) {\n            auto nf = (RefBlock *)((void **)p + numwords + offset);\n            nf->setVT((left << 2) | FREE_MASK);\n            nf->nextFree = p->nextFree;\n            p->nextFree = nf;\n            p->setVT((offset << 2) | FREE_MASK);\n            p = (RefBlock *)((void **)p + offset);\n            p->setVT(0);\n            return p;\n        }\n    }\n\n    return NULL;\n}\n\nvoid *app_alloc_at(void *at, int numbytes) {\n    if (numbytes < 8)\n        return NULL;\n    if (!at)\n        return NULL;\n\n    numbytes = ALIGN_TO_WORD(numbytes) + sizeof(void *);\n    auto r = (uintptr_t *)gcAllocAt((uintptr_t *)at - 1, numbytes);\n    if (!r)\n        return NULL;\n    *r = ARRAY_MASK | PERMA_MASK | (TOWORDS(numbytes) << 2);\n    gc(0);\n    return r + 1;\n}\n\nvoid *app_alloc(int numbytes) {\n    if (!numbytes)\n        return NULL;\n\n    // gc(0);\n    auto r = (uintptr_t *)gcAllocateArray(numbytes);\n    r[-1] |= PERMA_MASK;\n    return r;\n}\n\nvoid *app_free(void *ptr) {\n    auto r = (uintptr_t *)ptr;\n    GC_CHECK((r[-1] >> (HIGH_SHIFT + 1)) == 3, 41);\n    r[-1] |= FREE_MASK;\n    return r;\n}\n\nvoid gcFreeze() {\n    inGC |= IN_GC_FREEZE;\n}\n\nvoid gcReset() {\n    inGC &= ~IN_GC_FREEZE;\n\n    gcRoots.setLength(0);\n\n    if (inGC)\n        oops(41);\n\n    if (workQueue.getLength())\n        oops(41);\n\n    memset(&gcStats, 0, sizeof(gcStats));\n    firstFree = NULL;\n    for (auto h = firstBlock; h; h = h->next) {\n        setupFreeBlock(h);\n    }\n}\n\n#ifdef PXT_VM\nvoid gcPreStartup() {\n    inGC |= IN_GC_PREALLOC;\n}\n\nvoid gcStartup() {\n    inGC &= ~IN_GC_PREALLOC;\n}\n#endif\n\nvoid *gcAllocate(int numbytes) {\n    size_t numwords = BYTES_TO_WORDS(ALIGN_TO_WORD(numbytes));\n    // VVLOG(\"alloc %d bytes %d words\", numbytes, numwords);\n\n    if (numbytes > GC_MAX_ALLOC_SIZE)\n        soft_panic(PANIC_GC_TOO_BIG_ALLOCATION);\n\n    if (PXT_IN_ISR() || (inGC & (IN_GC_PREALLOC | IN_GC_ALLOC | IN_GC_COLLECT | IN_GC_FREEZE)))\n        target_panic(PANIC_CALLED_FROM_ISR);\n\n    inGC |= IN_GC_ALLOC;\n\n#if defined(PXT_GC_CHECKS) && !defined(PXT_VM)\n    {\n        auto curr = getThreadContext();\n        if (curr && !curr->stack.top)\n            oops(46);\n    }\n#endif\n\n#ifdef PXT_GC_STRESS\n    gc(0);\n#endif\n\n    for (int i = 0;; ++i) {\n        RefBlock *prev = NULL;\n        for (auto p = firstFree; p; p = p->nextFree) {\n            VVLOG(\"p=%p\", p);\n            if (i == 0 && (uint8_t *)p > midPtr) {\n                VLOG(\"past midptr %p; gc\", midPtr);\n                break;\n            }\n            GC_CHECK(!isReadOnly((TValue)p), 49);\n            auto vt = p->vtable;\n            if (!IS_FREE(vt))\n                oops(43);\n            int left = (int)(VAR_BLOCK_WORDS(vt) - numwords);\n            VVLOG(\"%p %d - %d = %d\", (void *)vt, (int)VAR_BLOCK_WORDS(vt), (int)numwords, left);\n            if (left >= 0) {\n                auto nf = (RefBlock *)((void **)p + numwords);\n                auto nextFree = p->nextFree; // p and nf can overlap when allocating 4 bytes\n                // VVLOG(\"nf=%p nef=%p\", nf, nextFree);\n                if (left)\n                    nf->setVT((left << 2) | FREE_MASK);\n                if (left >= 2) {\n                    nf->nextFree = nextFree;\n                } else {\n                    nf = nextFree;\n                }\n                if (prev)\n                    prev->nextFree = nf;\n                else\n                    firstFree = nf;\n                p->setVT(0);\n                VVLOG(\"GC=>%p %d %p -> %p,%p\", p, numwords, nf, nf ? nf->nextFree : 0,\n                      nf ? (void *)nf->vtable : 0);\n                GC_CHECK(!nf || !nf->nextFree || !isReadOnly((TValue)nf->nextFree), 48);\n                inGC &= ~IN_GC_ALLOC;\n                return p;\n            }\n            prev = p;\n        }\n\n        // we didn't find anything, try GC\n        if (i == 0)\n            gc(0);\n        // GC didn't help, try new block\n        else if (i == 1) {\n            DMESG(\"gcAlloc(%d) (%d/%d free; %d max block) -> new block\", numbytes,\n                  gcStats.lastFreeBytes, gcStats.totalBytes, gcStats.lastMaxBlockBytes);\n            allocateBlock();\n        } else\n            // the block allocated was apparently too small\n            soft_panic(PANIC_GC_OOM);\n    }\n}\n\nstatic void removePtr(TValue v) {\n    int len = gcRoots.getLength();\n    auto data = gcRoots.getData();\n    // scan from the back, as this is often used as a stack\n    for (int i = len - 1; i >= 0; --i) {\n        if (data[i] == v) {\n            if (i == len - 1) {\n                gcRoots.pop();\n            } else {\n                data[i] = gcRoots.pop();\n            }\n            return;\n        }\n    }\n    oops(40);\n}\n\nvoid registerGC(TValue *root, int numwords) {\n    if (!numwords)\n        return;\n\n    if (numwords > 1) {\n        while (numwords-- > 0) {\n            registerGC(root++, 1);\n        }\n        return;\n    }\n\n    gcRoots.push((TValue)((uintptr_t)root | 1));\n}\n\nvoid unregisterGC(TValue *root, int numwords) {\n    if (!numwords)\n        return;\n    if (numwords > 1) {\n        while (numwords-- > 0) {\n            unregisterGC(root++, 1);\n        }\n        return;\n    }\n\n    removePtr((TValue)((uintptr_t)root | 1));\n}\n\nvoid registerGCPtr(TValue ptr) {\n    if (isReadOnly(ptr))\n        return;\n    gcRoots.push(ptr);\n}\n\nvoid unregisterGCPtr(TValue ptr) {\n    if (isReadOnly(ptr))\n        return;\n    removePtr(ptr);\n}\n\nvoid RefImage::scan(RefImage *t) {\n    gcScan((TValue)t->buffer);\n}\n\nvoid RefCollection::scan(RefCollection *t) {\n    gcScanSegment(t->head);\n}\n\nvoid RefAction::scan(RefAction *t) {\n    gcScanMany(t->fields, t->len);\n}\n\nvoid RefRefLocal::scan(RefRefLocal *t) {\n    gcScan(t->v);\n}\n\nvoid RefMap::scan(RefMap *t) {\n    gcScanSegment(t->keys);\n    gcScanSegment(t->values);\n}\n\nvoid RefRecord_scan(RefRecord *r) {\n    VTable *tbl = getVTable(r);\n    gcScanMany(r->fields, BYTES_TO_WORDS(tbl->numbytes - sizeof(RefRecord)));\n}\n\n#define SIZE(off) TOWORDS(sizeof(*t) + (off))\n\nunsigned RefImage::gcsize(RefImage *t) {\n    return SIZE(0);\n}\n\nunsigned RefCollection::gcsize(RefCollection *t) {\n    return SIZE(0);\n}\n\nunsigned RefAction::gcsize(RefAction *t) {\n    return SIZE(WORDS_TO_BYTES(t->len));\n}\n\nunsigned RefRefLocal::gcsize(RefRefLocal *t) {\n    return SIZE(0);\n}\n\nunsigned RefMap::gcsize(RefMap *t) {\n    return SIZE(0);\n}\n\n} // namespace pxt\n",
            "gcstats.ts": "namespace control {\n    //% shim=pxt::getGCStats\n    function getGCStats(): Buffer {\n        return null\n    }\n\n    export interface GCStats {\n        numGC: number;\n        numBlocks: number;\n        totalBytes: number;\n        lastFreeBytes: number;\n        lastMaxBlockBytes: number;\n        minFreeBytes: number;\n    }\n\n    /**\n     * Get various statistics about the garbage collector (GC)\n     */\n    export function gcStats(): GCStats {\n        const buf = getGCStats()\n        if (!buf)\n            return null\n        let off = 0\n        const res: any = {}\n\n        addField(\"numGC\")\n        addField(\"numBlocks\")\n        addField(\"totalBytes\")\n        addField(\"lastFreeBytes\")\n        addField(\"lastMaxBlockBytes\")\n        addField(\"minFreeBytes\")\n\n        return res\n\n        function addField(name: string) {\n            res[name] = buf.getNumber(NumberFormat.UInt32LE, off)\n            off += 4\n        }\n    }    \n}",
            "helpers.ts": "namespace Math {\n    /**\n     * Generates a `true` or `false` value randomly, just like flipping a coin.\n     */\n    //% blockId=logic_random block=\"pick random true or false\"\n    //% help=math/random-boolean weight=0\n    export function randomBoolean(): boolean {\n        return Math.randomRange(0, 1) === 1;\n    }\n}",
            "interval.ts": "namespace control {\n    export enum IntervalMode {\n        Interval,\n        Timeout,\n        Immediate\n    }\n\n    let _intervals: Interval[] = undefined;\n    class Interval {\n\n        id: number;\n        func: () => void;\n        delay: number;\n        mode: IntervalMode;\n\n        constructor(func: () => void, delay: number, mode: IntervalMode) {\n            this.id = _intervals.length == 0\n                ? 1 : _intervals[_intervals.length - 1].id + 1;\n            this.func = func;\n            this.delay = delay;\n            this.mode = mode;\n            _intervals.push(this);\n\n            control.runInParallel(() => this.work());\n        }\n\n        work() {\n            // execute\n            switch (this.mode) {\n                case IntervalMode.Immediate:\n                case IntervalMode.Timeout:\n                    if (this.delay > 0)\n                        pause(this.delay); // timeout\n                    if (this.delay >= 0) // immediate, timeout\n                        this.func();\n                    break;\n                case IntervalMode.Interval:\n                    while (this.delay > 0) {\n                        pause(this.delay);\n                        // might have been cancelled during this duration\n                        if (this.delay > 0)\n                            this.func();\n                    }\n                    break;\n            }\n            // remove from interval array\n            _intervals.removeElement(this);\n        }\n\n        cancel() {\n            this.delay = -1;\n        }\n    }\n\n    export function setInterval(func: () => void, delay: number, mode: IntervalMode): number {\n        if (!func || delay < 0) return 0;\n        if (!_intervals) _intervals = [];\n        const interval = new Interval(func, delay, mode);\n        return interval.id;\n    }\n\n    export function clearInterval(intervalId: number, mode: IntervalMode): void {\n        if (!_intervals) return;\n        for (let i = 0; i < _intervals.length; ++i) {\n            const it = _intervals[i];\n            if (it.id == intervalId && it.mode == mode) {\n                it.cancel();\n                break;\n            }\n        }\n    }\n}",
            "json.ts": "namespace JSON {\n    export function parseIntRadix(s: string, base?: number) {\n        if (base == null || base == 10) {\n            return parseFloat(s) | 0\n        }\n\n        let m = false\n        let r = 0\n        for (let i = 0; i < s.length; ++i) {\n            let c = s.charCodeAt(i)\n            if (c == 0x20 || c == 10 || c == 13 || c == 9)\n                continue\n            if (r == 0 && !m && c == 0x2d) {\n                m = true\n                continue\n            }\n\n            let v = -1\n            if (0x30 <= c && c <= 0x39)\n                v = c - 0x30\n            else {\n                c |= 0x20\n                if (0x61 <= c && c <= 0x7a)\n                    v = c - 0x61 + 10\n            }\n\n            if (0 <= v && v < base) {\n                r *= base\n                r += v\n            } else {\n                return undefined\n            }\n        }\n\n        return m ? -r : r\n    }\n\n\n    class Parser {\n        ptr: number\n        s: string\n        errorMsg: string\n\n        error(msg: string) {\n            if (!this.errorMsg) {\n                this.errorMsg = msg + \" at position \" + this.ptr\n                this.ptr = this.s.length\n            }\n        }\n\n        skipWS() {\n            for (; ;) {\n                const c = this.nextChar()\n                if (c == 0x20 || c == 0x0a || c == 0x0d || c == 0x09) {\n                    // OK\n                } else {\n                    this.ptr--\n                    return c\n                }\n            }\n        }\n\n        nextChar() {\n            if (this.ptr < this.s.length)\n                return this.s.charCodeAt(this.ptr++)\n            return 0\n        }\n\n        doString() {\n            let r = \"\"\n            this.ptr++\n            for (; ;) {\n                const c = this.s.charAt(this.ptr++)\n                if (c == \"\\\"\")\n                    return r\n                if (c == \"\\\\\") {\n                    let q = this.s.charAt(this.ptr++)\n                    if (q == \"b\") q = \"\\b\"\n                    else if (q == \"n\") q = \"\\n\"\n                    else if (q == \"r\") q = \"\\r\"\n                    else if (q == \"t\") q = \"\\t\"\n                    else if (q == \"u\") {\n                        q = String.fromCharCode(parseIntRadix(this.s.slice(this.ptr, this.ptr + 4), 16))\n                        this.ptr += 4\n                    }\n                    r += q\n                } else {\n                    r += c\n                }\n            }\n        }\n\n        doArray(): any[] {\n            const r = []\n            this.ptr++\n            for (; ;) {\n                let c = this.skipWS()\n                if (c == 0x5d) {\n                    this.ptr++\n                    return r\n                }\n                const v = this.value()\n                if (this.errorMsg)\n                    return null\n                r.push(v)\n                c = this.skipWS()\n                if (c == 0x2c) {\n                    this.ptr++\n                    continue\n                }\n                if (c == 0x5d)\n                    continue\n                this.error(\"expecting comma\")\n            }\n        }\n\n        doObject() {\n            const r: any = {}\n            this.ptr++\n            for (; ;) {\n                let c = this.skipWS()\n                if (c == 0x7d) {\n                    this.ptr++\n                    return r\n                }\n                if (c != 0x22) {\n                    this.error(\"expecting key\")\n                    return r\n                }\n                const k = this.doString()\n                c = this.skipWS()\n                if (c != 0x3a) {\n                    this.error(\"expecting colon\")\n                    return r\n                }\n                this.ptr++\n                const v = this.value()\n                if (this.errorMsg)\n                    return null\n                r[k] = v\n                c = this.skipWS()\n                if (c == 0x2c) {\n                    this.ptr++\n                    continue\n                }\n                if (c == 0x7d)\n                    continue\n                this.error(\"expecting comma, got \" + String.fromCharCode(c))\n            }\n        }\n\n        doNumber() {\n            const beg = this.ptr\n            for (; ;) {\n                const c = this.nextChar()\n                if ((0x30 <= c && c <= 0x39) || c == 0x2b || c == 0x2d || c == 0x2e || c == 0x45 || c == 0x65) {\n                    // one more\n                } else {\n                    this.ptr--\n                    break\n                }\n            }\n            const ss = this.s.slice(beg, this.ptr)\n            if (ss.length == 0) {\n                this.error(\"expecting number\")\n                return 0\n            }\n            return parseFloat(ss)\n        }\n\n        checkKw(k: string) {\n            if (this.s.slice(this.ptr, this.ptr + k.length) == k) {\n                this.ptr += k.length\n                return true\n            }\n            return false\n        }\n\n        value() {\n            if (this.errorMsg)\n                return null\n\n            const c = this.skipWS()\n            if (c == 0x7b)\n                return this.doObject()\n            else if (c == 0x5b)\n                return this.doArray()\n            else if ((0x30 <= c && c <= 0x39) || c == 0x2d)\n                return this.doNumber()\n            else if (c == 0x22)\n                return this.doString()\n            else if (c == 0x74 && this.checkKw(\"true\"))\n                return true\n            else if (c == 0x66 && this.checkKw(\"false\"))\n                return false\n            else if (c == 0x6e && this.checkKw(\"null\"))\n                return null\n\n            this.error(\"unexpected token\")\n            return null\n        }\n    }\n\n    class Stringifier {\n        currIndent: string\n        indentStep: string\n        indent: number\n\n        doString(s: string) {\n            let r = \"\\\"\"\n            for (let i = 0; i < s.length; ++i) {\n                let c = s[i]\n                if (c == \"\\n\") c = \"\\\\n\"\n                else if (c == \"\\r\") c = \"\\\\r\"\n                else if (c == \"\\t\") c = \"\\\\t\"\n                else if (c == \"\\b\") c = \"\\\\b\"\n                else if (c == \"\\\\\") c = \"\\\\\\\\\"\n                else if (c == \"\\\"\") c = \"\\\\\\\"\"\n                r += c\n            }\n            return r + \"\\\"\"\n        }\n\n        go(v: any) {\n            const t = typeof v\n            if (t == \"string\")\n                return this.doString(v)\n            else if (t == \"boolean\" || t == \"number\" || v == null)\n                return \"\" + v\n            else if (Array.isArray(v)) {\n                const arr = v as any[]\n                if (arr.length == 0)\n                    return \"[]\"\n                else {\n                    let r = \"[\"\n                    if (this.indent) {\n                        this.currIndent += this.indentStep\n                        r += \"\\n\"\n                    }\n                    for (let i = 0; i < arr.length; ++i) {\n                        r += this.currIndent + this.go(arr[i])\n                        if (i != arr.length - 1)\n                            r += \",\"\n                        if (this.indent)\n                            r += \"\\n\"\n                    }\n                    if (this.indent)\n                        this.currIndent = this.currIndent.slice(this.indent)\n                    r += this.currIndent + \"]\"\n                    return r\n                }\n            } else {\n                const keys = Object.keys(v)\n                if (keys.length == 0)\n                    return \"{}\"\n\n                let r = \"{\"\n                if (this.indent) {\n                    this.currIndent += this.indentStep\n                    r += \"\\n\"\n                }\n                for (let i = 0; i < keys.length; ++i) {\n                    const k = keys[i]\n                    r += this.currIndent + this.doString(k)\n                    if (this.indent)\n                        r += \": \"\n                    else\n                        r += \":\"\n                    r += this.go(v[k])\n                    if (i != keys.length - 1)\n                        r += \",\"\n                    if (this.indent)\n                        r += \"\\n\"\n                }\n                if (this.indent)\n                    this.currIndent = this.currIndent.slice(this.indent)\n                r += this.currIndent + \"}\"\n                return r\n            }\n        }\n    }\n\n    /**\n     * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\n     * @param value A JavaScript value, usually an object or array, to be converted.\n     * @param replacer Not supported; use null.\n     * @param indent Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.\n     */\n    export function stringify(value: any, replacer: any = null, indent: number = 0) {\n        const ss = new Stringifier()\n        ss.currIndent = \"\"\n        indent |= 0\n        if (indent < 0) indent = 0\n        if (indent > 10) indent = 10\n        ss.indentStep = \"\"\n        ss.currIndent = \"\"\n        ss.indent = indent\n        while (indent-- > 0)\n            ss.indentStep += \" \"\n        return ss.go(value)\n    }\n\n\n    /**\n     * Converts a JavaScript Object Notation (JSON) string into an object.\n     * @param text A valid JSON string.\n     */\n    export function parse(s: string) {\n        const p = new Parser()\n        p.ptr = 0\n        p.s = s\n        const r = p.value()\n        if (p.skipWS()) {\n            p.error(\"excessive input\")\n        }\n        if (p.errorMsg) {\n            control.dmesg(\"Invalid JSON: \" + p.errorMsg)\n            return undefined\n        }\n        return r\n    }\n}\n",
            "loops.cpp": "#include \"pxtbase.h\"\n\nnamespace loops {\n\n/**\n * Repeats the code forever in the background. On each iteration, allows other codes to run.\n * @param body code to execute\n */\n//% help=loops/forever weight=100 afterOnStart=true deprecated=true\n//% blockId=forever_deprecated block=\"forever\" blockAllowMultiple=1\nvoid forever(Action a) {\n    runForever(a);\n}\n\n/**\n * Pause for the specified time in milliseconds\n * @param ms how long to pause for, eg: 100, 200, 500, 1000, 2000\n */\n//% help=loops/pause weight=99 deprecated=true\n//% async block=\"pause %pause=timePicker|ms\"\n//% blockId=device_pause_deprecated\nvoid pause(int ms) {\n    if (ms < 0) return;\n    sleep_ms(ms);\n}\n\n}",
            "math.ts": "namespace Math {\n\n    export const E = 2.718281828459045;\n    export const LN2 = 0.6931471805599453;\n    export const LN10 = 2.302585092994046;\n    export const LOG2E = 1.4426950408889634;\n    export const LOG10E = 0.4342944819032518;\n    export const PI = 3.141592653589793;\n    export const SQRT1_2 = 0.7071067811865476;\n    export const SQRT2 = 1.4142135623730951;\n\n    /**\n     * Re-maps a number from one range to another. That is, a value of ``from low`` would get mapped to ``to low``, a value of ``from high`` to ``to high``, values in-between to values in-between, etc.\n     * @param value value to map in ranges\n     * @param fromLow the lower bound of the value's current range\n     * @param fromHigh the upper bound of the value's current range, eg: 1023\n     * @param toLow the lower bound of the value's target range\n     * @param toHigh the upper bound of the value's target range, eg: 4\n     */\n    //% help=math/map weight=10 blockGap=8\n    //% blockId=math_map block=\"map %value|from low %fromLow|high %fromHigh|to low %toLow|high %toHigh\"\n    //% inlineInputMode=inline\n    export function map(value: number, fromLow: number, fromHigh: number, toLow: number, toHigh: number): number {\n        return ((value - fromLow) * (toHigh - toLow)) / (fromHigh - fromLow) + toLow;\n    }    \n\n    /**\n     * Constrains a number to be within a range\n     * @param x the number to constrain, all data types\n     * @param y the lower end of the range, all data types\n     * @param z the upper end of the range, all data types\n     */\n    //% help=math/constrain weight=11 blockGap=8\n    //% blockId=\"math_constrain_value\" block=\"constrain %value|between %low|and %high\"\n    export function constrain(value: number, low: number, high: number): number {\n        return value < low ? low : value > high ? high : value;\n    }\n\n    const b_m16: number[] = [0, 49, 49, 41, 90, 27, 117, 10]\n    /**\n     * Returns the sine of an input angle. This is an 8-bit approximation.\n     * @param theta input angle from 0-255\n     */\n    //% help=math/isin weight=11 advanced=true blockGap=8\n    export function isin(theta: number) {\n        //reference: based on FASTLed's sin approximation method: [https://github.com/FastLED/FastLED](MIT)\n        let offset = theta;\n        if( theta & 0x40 ) {\n            offset = 255 - offset;\n        }\n        offset &= 0x3F; // 0..63\n\n        let secoffset  = offset & 0x0F; // 0..15\n        if( theta & 0x40) secoffset++;\n\n        let section = offset >> 4; // 0..3\n        let s2 = section * 2;\n\n        let b = b_m16[s2];\n        let m16 = b_m16[s2+1];\n        let mx = (m16 * secoffset) >> 4;\n        \n        let y = mx + b;\n        if( theta & 0x80 ) y = -y;\n\n        y += 128;\n\n        return y;\n    }\n\n    /**\n     * Returns the cosine of an input angle. This is an 8-bit approximation. \n     * @param theta input angle from 0-255\n     */\n    //% help=math/icos weight=10 advanced=true blockGap=8\n    export function icos(theta: number) {\n        return isin(theta + 16384);\n    }\n}\n\nnamespace Number {\n    export const EPSILON = 2.220446049250313e-16;\n}",
            "pause.ts": "/**\n * Pause for the specified time in milliseconds\n * @param ms how long to pause for, eg: 100, 200, 500, 1000, 2000\n */\n//% help=loops/pause weight=99\n//% async block=\"pause %pause=timePicker|ms\"\n//% blockId=device_pause blockNamespace=\"loops\"\nfunction pause(ms: number): void {\n    loops.pause(ms);\n}\n\n// micro:bit compatibility\n// these functions allow some level of reuse\n// between micro:bit and other maker-style editors\nnamespace basic {\n    export function pause(millis: number) {\n        loops.pause(millis);\n    }\n}",
            "perfcounters.ts": "namespace control {\n    /**\n     * Enable profiling for current function.\n     */\n    //% shim=TD_NOOP shimArgument=perfCounter\n    export function enablePerfCounter(name?: string) { }\n\n    /**\n     * Dump values of profiling performance counters.\n     */\n    //% shim=pxt::dumpPerfCounters\n    export function dmesgPerfCounters() { }\n}\n",
            "pins.cpp": "#include \"pxt.h\"\n\nnamespace pxt {\n\nstatic DevicePin *pinArray[DEV_NUM_PINS] = {nullptr};\n\n//%\nDevicePin *getPin(int id) {\n    id &= CFG_PIN_NAME_MSK;\n    auto pinName = (PinNumber)id;\n    uint8_t idx = 0;\n\n    for (idx = 0; idx < DEV_NUM_PINS && pinArray[idx] != nullptr; ++idx) {\n        if (pinArray[idx]->name == pinName) {\n            return pinArray[idx];\n        }\n    }\n\n    if (idx >= DEV_NUM_PINS)\n        target_panic(PANIC_NO_SUCH_PIN);\n\n    pinArray[idx] = new DevicePin(DEVICE_ID_IO_P0 + idx, pinName, IS_ANALOG_PIN(id) ? PIN_CAPABILITY_AD : PIN_CAPABILITY_DIGITAL);\n    return pinArray[idx];\n}\n\n//%\nDevicePin *getPinCfg(int key) {\n    int p = getConfig(key, -1);\n    if (p == -1)\n        DMESG(\"no pin cfg: %d\", key);\n    return getPin(p);\n}\n\nvoid linkPin(int from, int to) {\n    // if (from < 0 || from >= DEV_NUM_PINS)\n    //     target_panic(PANIC_NO_SUCH_PIN);\n    // getPin(to);\n    // pinPos[from] = pinPos[to];\n}\n\n//%\nDevicePin *lookupPin(int pinName) {\n    if (pinName < 0 || pinName == 0xff)\n        return NULL;\n    pinName &= CFG_PIN_NAME_MSK;\n    return getPin(pinName);\n}\n\n//%\nDevicePin *lookupPinCfg(int key) {\n    return lookupPin(getConfig(key));\n}\n\nCodalComponent *lookupComponent(int id) {\n    for (int i = 0; i < DEVICE_COMPONENT_COUNT; ++i) {\n        if (CodalComponent::components[i] && CodalComponent::components[i]->id == id)\n            return CodalComponent::components[i];\n    }\n    return NULL;\n}\n\n} // namespace pxt\n\nnamespace pins {\n/**\n * Get a pin by configuration id (DAL.CFG_PIN...)\n */\n//%\nDigitalInOutPin pinByCfg(int key) {\n    return pxt::lookupPinCfg(key);\n}\n\n/**\n * Create a new zero-initialized buffer.\n * @param size number of bytes in the buffer\n */\n//%\nBuffer createBuffer(int size) {\n    return mkBuffer(NULL, size);\n}\n\n/**\n * Get the duration of the last pulse in microseconds. This function should be called from a\n * ``onPulsed`` handler.\n */\n//% help=pins/pulse-duration blockGap=8\n//% blockId=pins_pulse_duration block=\"pulse duration (µs)\"\n//% weight=19\nint pulseDuration() {\n    return pxt::lastEvent.timestamp;\n}\n} // namespace pins\n",
            "pins.h": "#ifndef __PXT_PINS_H\n#define __PXT_PINS_H\n\n#define CFG_PIN_BTN_USER 94\n#define CFG_PIN_RESET 95\n\n#define CFG_PIN_HTS221_SDA 96\n#define CFG_PIN_HTS221_SCL 97\n\n#define CFG_PIN_LPS22HB_SDA 98\n#define CFG_PIN_LPS22HB_SCL 99\n\n#define CFG_PIN_VL53L0X_SDA 132\n#define CFG_PIN_VL53L0X_SCL 133\n#define CFG_PIN_VL53L0X_SHUT 134\n\n#define CFG_PIN_LSM6DSL_SDA 135\n#define CFG_PIN_LSM6DSL_SCL 136\n\n#define CFG_PIN_BLE_SPI_MISO 137\n#define CFG_PIN_BLE_SPI_MOSI 138\n#define CFG_PIN_BLE_SPI_SCLK 139\n#define CFG_PIN_BLE_SPI_CS 140\n#define CFG_PIN_BLE_SPI_IRQ 141\n#define CFG_PIN_BLE_RST 142\n\n#define CFG_PIN_WIFI_ISM43362_MOSI 224\n#define CFG_PIN_WIFI_ISM43362_MISO 225\n#define CFG_PIN_WIFI_ISM43362_SCK 226\n#define CFG_PIN_WIFI_ISM43362_CS 227\n#define CFG_PIN_WIFI_ISM43362_COMMAND_DATA_READY 228\n#define CFG_PIN_WIFI_ISM43362_RESET 229\n#define CFG_PIN_WIFI_ISM43362_WAKE_UP 230\n\n#define CFG_PIN_UART1_TX 231\n#define CFG_PIN_UART1_RX 232\n\n#define CFG_PIN_UART2_TX 234\n#define CFG_PIN_UART2_RX 235\n\n#define CFG_PIN_UART3_TX 236\n#define CFG_PIN_UART3_RX 237\n\n#define CFG_PIN_UART4_TX 289\n#define CFG_PIN_UART4_RX 290\n\n#define CFG_PIN_SPI1_MISO 291\n#define CFG_PIN_SPI1_MOSI 292\n#define CFG_PIN_SPI1_SCK 293\n\n#define CFG_PIN_SPI2_MISO 294\n#define CFG_PIN_SPI2_MOSI 295\n#define CFG_PIN_SPI2_SCK 296\n\n#define CFG_PIN_SPI3_MISO 297\n#define CFG_PIN_SPI3_MOSI 298\n#define CFG_PIN_SPI3_SCK 299\n\n#define CFG_PIN_I2C1_SCL 332\n#define CFG_PIN_I2C1_SDA 333\n\n#define CFG_PIN_I2C2_SCL 334\n#define CFG_PIN_I2C2_SDA 335\n\n#define BUTTON_ACTIVE_HIGH_PULL_DOWN (ACTIVE_HIGH | 0x10)\n#define BUTTON_ACTIVE_HIGH_PULL_UP (ACTIVE_HIGH | 0x20)\n#define BUTTON_ACTIVE_HIGH_PULL_NONE (ACTIVE_HIGH | 0x30)\n#define BUTTON_ACTIVE_LOW_PULL_DOWN (ACTIVE_LOW | 0x10)\n#define BUTTON_ACTIVE_LOW_PULL_UP (ACTIVE_LOW | 0x20)\n#define BUTTON_ACTIVE_LOW_PULL_NONE (ACTIVE_LOW | 0x30)\n\n#define PIN(name) ((PinName)pxt::getConfig(CFG_PIN_##name, -1))\n#define LOOKUP_PIN(name) pxt::lookupPin(PIN(name))\n\n// these can be overridden in platform.h\n#ifndef CODAL_PIN\n#define CODAL_PIN CODAL_MBED::Pin\n#endif\n\n#ifndef CODAL_TIMER\n#define CODAL_TIMER CODAL_MBED::Timer\n#endif\n\n#ifndef CODAL_SPI\n#define CODAL_SPI CODAL_MBED::SPI\n#endif\n\n#ifndef CODAL_SERIAL\n#define CODAL_SERIAL CODAL_MBED::Serial\n#endif\n\n#ifndef IS_ANALOG_PIN\n#define IS_ANALOG_PIN(id) ((DEV_ANALOG_PINS >> (id)) & 1)\n#endif\n\ntypedef CODAL_PIN DevicePin;\n\ntypedef DevicePin *DigitalInOutPin;\ntypedef DevicePin *AnalogInOutPin;\ntypedef DevicePin *AnalogInPin;\ntypedef DevicePin *AnalogOutPin;\ntypedef DevicePin *PwmPin;\ntypedef DevicePin *PwmOnlyPin;\ntypedef Button *Button_;\n\nnamespace pxt {\nDevicePin *getPin(int id);\nDevicePin *getPinCfg(int key);\nDevicePin *lookupPin(int pinName);\nDevicePin *lookupPinCfg(int key);\nvoid linkPin(int from, int to);\nCodalComponent *lookupComponent(int id);\n} // namespace pxt\n\n#define PINOP(op) name->op\n\n#endif\n",
            "pins.ts": "//% noRefCounting fixedInstances\ninterface DigitalInOutPin {\n    // methods filled from C++\n}\n\n//% noRefCounting fixedInstances\ninterface AnalogInPin extends DigitalInOutPin {\n    // methods filled from C++\n}\n\n//% noRefCounting fixedInstances\ninterface AnalogOutPin extends DigitalInOutPin {\n    // methods filled from C++\n}\n\n//% noRefCounting fixedInstances\ninterface AnalogInOutPin extends AnalogInPin, AnalogOutPin {\n    // methods filled from C++\n}\n\n//% noRefCounting fixedInstances\ninterface PwmOnlyPin extends DigitalInOutPin, AnalogOutPin {\n    // methods filled from C++\n}\n\n//% noRefCounting fixedInstances\ninterface PwmPin extends PwmOnlyPin, AnalogInOutPin {}\n\n/**\n * Control currents in Pins for analog/digital signals, servos, i2c, ...\n */\n//% color=#A80000 weight=85 icon=\"\\uf140\" advanced=true\n//% groups='[\"other\", \"Servo\", \"i2c\"]'\nnamespace pins {}\n",
            "platform.cpp": "#include \"pxt.h\"\n#include \"STM32LowLevelTimer.h\"\n#include \"Accelerometer.h\"\n\nnamespace pxt {\n\nstruct TimerConfig {\n    uint8_t id;\n    uint8_t irqn;\n    TIM_TypeDef *addr;\n};\n\n#define DEF_TIM(n)                                                                                                               \\\n    { 0x10 + n, TIM##n##_IRQn, TIM##n }\n\nstatic const TimerConfig timers[] = {\n#ifdef TIM1\n    DEF_TIM(1),\n#endif\n#ifdef TIM2\n    DEF_TIM(2),\n#endif\n#ifdef TIM3\n    DEF_TIM(3),\n#endif\n#ifdef TIM4\n    DEF_TIM(4),\n#endif\n#ifdef TIM5\n    DEF_TIM(5),\n#endif\n#ifdef TIM6\n    DEF_TIM(6),\n#endif\n#ifdef TIM7\n    DEF_TIM(7),\n#endif\n#ifdef TIM8\n    DEF_TIM(8),\n#endif\n#ifdef TIM9\n    DEF_TIM(9),\n#endif\n#ifdef TIM10\n    DEF_TIM(10),\n#endif\n#ifdef TIM11\n    DEF_TIM(11),\n#endif\n#ifdef TIM12\n    DEF_TIM(12),\n#endif\n#ifdef TIM13\n    DEF_TIM(13),\n#endif\n#ifdef TIM14\n    DEF_TIM(14),\n#endif\n#ifdef TIM15\n    DEF_TIM(15),\n#endif\n    {0, 0, 0}};\n\n#ifdef STM32F1\n#define DEF_TIMERS 0x14120000 // TIM4 TIM2\n#else\n#define DEF_TIMERS 0x15120000 // TIM5 TIM2\n#endif\n\nstatic uint32_t usedTimers;\nstatic int timerIdx(uint8_t id) {\n    for (unsigned i = 0; timers[i].id; i++) {\n        if (id == timers[i].id)\n            return i;\n    }\n    return -1;\n}\nLowLevelTimer *allocateTimer() {\n    uint32_t timersToUse = getConfig(CFG_TIMERS_TO_USE, DEF_TIMERS);\n    for (int shift = 24; shift >= 0; shift -= 8) {\n        uint8_t tcId = (timersToUse >> shift) & 0xff;\n        int idx = timerIdx(tcId);\n        if (idx < 0 || (usedTimers & (1 << idx)))\n            continue;\n        auto dev = timers[idx].addr;\n        if (dev->CR1 & TIM_CR1_CEN)\n            continue;\n        usedTimers |= 1 << idx;\n        DMESG(\"allocate TIM%d\", tcId - 0x10);\n        return new STM32LowLevelTimer(dev, (IRQn_Type)timers[idx].irqn);\n    }\n\n    target_panic(PANIC_OUT_OF_TIMERS);\n    return NULL;\n}\n\nvoid initAccelRandom();\n#ifdef STM32F4\nextern \"C\" void apply_clock_init(RCC_OscInitTypeDef *oscInit, RCC_ClkInitTypeDef *clkConfig, uint32_t flashLatency) {\n\n    int mhz = getConfig(CFG_CPU_MHZ, 84);\n\n    if (mhz >= 216) {\n        oscInit->PLL.PLLN = 432;\n        oscInit->PLL.PLLP = RCC_PLLP_DIV2;\n        oscInit->PLL.PLLQ = 9;\n        flashLatency = FLASH_LATENCY_6;\n    } else if (mhz >= 192) {\n        oscInit->PLL.PLLN = 384;\n        oscInit->PLL.PLLP = RCC_PLLP_DIV2;\n        oscInit->PLL.PLLQ = 8;\n        flashLatency = FLASH_LATENCY_6;\n    } else if (mhz >= 168) {\n        oscInit->PLL.PLLN = 336;\n        oscInit->PLL.PLLP = RCC_PLLP_DIV2;\n        oscInit->PLL.PLLQ = 7;\n        flashLatency = FLASH_LATENCY_5;\n    } else if (mhz >= 144) {\n        oscInit->PLL.PLLN = 288;\n        oscInit->PLL.PLLP = RCC_PLLP_DIV2;\n        oscInit->PLL.PLLQ = 6;\n        flashLatency = FLASH_LATENCY_5;\n    } else if (mhz >= 108) {\n        oscInit->PLL.PLLN = 432;\n        oscInit->PLL.PLLP = RCC_PLLP_DIV4;\n        oscInit->PLL.PLLQ = 9;\n        flashLatency = FLASH_LATENCY_4;\n    } else if (mhz >= 96) {\n        oscInit->PLL.PLLN = 384;\n        oscInit->PLL.PLLP = RCC_PLLP_DIV4;\n        oscInit->PLL.PLLQ = 8;\n        flashLatency = FLASH_LATENCY_3;\n    } else if (mhz >= 84) {\n        // this is the default from codal\n        oscInit->PLL.PLLN = 336;\n        oscInit->PLL.PLLP = RCC_PLLP_DIV4;\n        oscInit->PLL.PLLQ = 7;\n        flashLatency = FLASH_LATENCY_2;\n    } else {\n        target_panic(PANIC_CODAL_HARDWARE_CONFIGURATION_ERROR);\n    }\n\n    DMESG(\"CPU clock: %dMHz -> %dMHz\", mhz, oscInit->PLL.PLLN / (oscInit->PLL.PLLP == RCC_PLLP_DIV4 ? 4 : 2));\n\n    if (mhz > 108) {\n        clkConfig->APB1CLKDivider = RCC_HCLK_DIV4;\n        clkConfig->APB2CLKDivider = RCC_HCLK_DIV2;\n    } else {\n        clkConfig->APB1CLKDivider = RCC_HCLK_DIV2;\n        clkConfig->APB2CLKDivider = RCC_HCLK_DIV1;\n    }\n\n    HAL_RCC_OscConfig(oscInit);\n    HAL_RCC_ClockConfig(clkConfig, flashLatency);\n}\n#endif\n\n// Disable seeding random from accelerometer. We now store random\n// seed in internal flash, so it's different on every reset, and\n// accelerometer sometimes have bugs, so better not enable them unless\n// requested.\nstatic void initRandomSeed() {\n#if 0\n    if (getConfig(CFG_ACCELEROMETER_TYPE, -1) != -1) {\n        initAccelRandom();\n    }\n#endif\n}\n\nstatic void set_if_present(int cfg, int val) {\n    auto snd = pxt::lookupPinCfg(cfg);\n    if (snd)\n        snd->setDigitalValue(val);\n}\n\n//%\nvoid deepSleep() {\n    // this in particular puts accelerometer to sleep, which the bootloader\n    // doesn't do\n    CodalComponent::setAllSleep(true);\n\n#ifdef STM32F4\n    // ask bootloader to do the deep sleeping\n    QUICK_BOOT(1);\n    RTC->BKP1R = 0x10b37889;\n    NVIC_SystemReset();\n#endif\n}\n\nvoid platformSendSerial(const char *data, int len) {\n    /*\n    if (!serial) {\n        serial = new codal::_mbed::Serial(USBTX, NC);\n        serial->baud(9600);\n    }\n    serial->send((uint8_t*)data, len);\n    */\n}\n\nvoid platform_init() {\n    initRandomSeed();\n    setSendToUART(platformSendSerial);\n\n    // make sure sound doesn't draw power before enabled\n    set_if_present(CFG_PIN_JACK_SND, 0);\n    set_if_present(CFG_PIN_JACK_HPEN, 0);\n    set_if_present(CFG_PIN_JACK_BZEN, 1);\n\n    /*\n        if (*HF2_DBG_MAGIC_PTR == HF2_DBG_MAGIC_START) {\n            *HF2_DBG_MAGIC_PTR = 0;\n            // this will cause alignment fault at the first breakpoint\n            globals[0] = (TValue)1;\n        }\n    */\n}\n\nint *getBootloaderConfigData() {\n#ifdef STM32F4\n    auto config_data = (uint32_t)(UF2_BINFO->configValues);\n    if (config_data && (config_data & 3) == 0) {\n        auto p = (uint32_t *)config_data - 4;\n        if (p[0] == CFG_MAGIC0 && p[1] == CFG_MAGIC1)\n            return (int *)p + 4;\n    }\n#endif\n\n    return NULL;\n}\n\n#define STM32_UUID ((uint32_t *)0x1FFF7A10)\n\n#if CONFIG_ENABLED(DEVICE_USB)\nstatic void writeHex(char *buf, uint32_t n) {\n    int i = 0;\n    int sh = 28;\n    while (sh >= 0) {\n        int d = (n >> sh) & 0xf;\n        buf[i++] = d > 9 ? 'A' + d - 10 : '0' + d;\n        sh -= 4;\n    }\n    buf[i] = 0;\n}\n#endif\n\nvoid platform_usb_init() {\n#if CONFIG_ENABLED(DEVICE_USB)\n    static char serial_number[25];\n\n    writeHex(serial_number, STM32_UUID[0]);\n    writeHex(serial_number + 8, STM32_UUID[1]);\n    writeHex(serial_number + 16, STM32_UUID[2]);\n\n    usb.stringDescriptors[2] = serial_number;\n#endif\n}\n\n} // namespace pxt\n\nvoid cpu_clock_init() {}\n",
            "platform.h": "#ifndef __PXT_PLATFORM_H\n#define __PXT_PLATFORM_H\n\n#include \"Image.h\"\n#include \"MultiButton.h\"\n#include \"STM32I2C.h\"\n#include \"STM32Pin.h\"\n#include \"STM32SPI.h\"\n#include \"STM32Serial.h\"\n#include \"Timer.h\"\n\n#include \"pinmap.h\"\n\n#define BOOTLOADER_START 0x08000000\n#define BOOTLOADER_END 0x08008000\n\n#ifdef STM32F4\n#define SETTINGS_MAGIC_0 0x10476643\n#define SETTINGS_MAGIC_1 0x2e9a5026\n\nstruct F4_Settings {\n    uint32_t magic0;\n    uint32_t magic1;\n    int *configValues;\n    uint32_t hseValue;\n    const char *info_uf2;\n    const char *manufacturer;\n    const char *device;\n    uint32_t reserved[16 - 7];\n};\n\n#define UF2_BINFO ((F4_Settings *)(BOOTLOADER_END - sizeof(F4_Settings)))\n#define UF2_INFO_TXT UF2_BINFO->info_uf2\n#define USB_HANDOVER 0\n\n#define BOOT_RTC_SIGNATURE 0x71a21877\n#define APP_RTC_SIGNATURE 0x24a22d12\n#define HF2_RTC_SIGNATURE 0x39a63a78\n#define QUICK_BOOT(v)                                                                                                            \\\n    do {                                                                                                                         \\\n        RTC->BKP0R = v ? APP_RTC_SIGNATURE : HF2_RTC_SIGNATURE;                                                                  \\\n    } while (0)\n#else\n#define QUICK_BOOT(v) ((void)0)\n#endif\n\n#define PAGE_SIZE 1024 // not really\n\n#define DEV_NUM_PINS 64\n\n#ifdef STM32F1\n#define DEV_PWM_PINS 0b111100000011101100001110111000111111001110LL\n#else\n#define DEV_PWM_PINS 0b111100000011100111111110111000111111101111LL\n#endif\n\n//               CCCCCCCCCCCCCCCCBBBBBBBBBBBBBBBBAAAAAAAAAAAAAAAA\n//               fedcba9876543210fedcba9876543210fedcba9876543210\n#define DEV_AIN_PINS 0b000011111100000000000000110000000011111111LL\n\n// Codal doesn't yet distinguish between PWM and AIN\n#define DEV_ANALOG_PINS (DEV_PWM_PINS | DEV_AIN_PINS)\n\n#define CODAL_SERIAL codal::STM32Serial\n#define CODAL_PIN codal::STM32Pin\n#define CODAL_TIMER Timer\n#define CODAL_SPI codal::STM32SPI\n#define CODAL_I2C codal::STM32I2C\n#define CODAL_JACDAC_WIRE_SERIAL codal::ZSingleWireSerial\n\n#define PERF_NOW() (TIM5->CNT)\n\n#define IMAGE_BITS 4\n\n#define ALT0 0x000\n#define ALT1 0x100\n#define ALT2 0x200\n\n// The parameters below needs tuning!\n\n#ifdef JUST_FOR_DAL_D_TS_CPP_WILL_IGNORE\n\n#define PA_0 0x00\n#define PA_0_ALT0 PA_0 | ALT0\n#define PA_1 0x01\n#define PA_1_ALT0 PA_1 | ALT0\n#define PA_2 0x02\n#define PA_2_ALT0 PA_2 | ALT0\n#define PA_3 0x03\n#define PA_3_ALT0 PA_3 | ALT0\n#define PA_4 0x04\n#define PA_4_ALT0 PA_4 | ALT0\n#define PA_5 0x05\n#define PA_5_ALT0 PA_5 | ALT0\n#define PA_6 0x06\n#define PA_6_ALT0 PA_6 | ALT0\n#define PA_7 0x07\n#define PA_7_ALT0 PA_7 | ALT0\n#define PA_7_ALT1 PA_7 | ALT1\n#define PA_7_ALT2 PA_7 | ALT2\n#define PA_8 0x08\n#define PA_9 0x09\n#define PA_10 0x0A\n#define PA_11 0x0B\n#define PA_12 0x0C\n#define PA_13 0x0D\n#define PA_14 0x0E\n#define PA_15 0x0F\n#define PA_15_ALT0 PA_15 | ALT0\n#define PB_0 0x10\n#define PB_0_ALT0 PB_0 | ALT0\n#define PB_0_ALT1 PB_0 | ALT1\n#define PB_1 0x11\n#define PB_1_ALT0 PB_1 | ALT0\n#define PB_1_ALT1 PB_1 | ALT1\n#define PB_2 0x12\n#define PB_3 0x13\n#define PB_3_ALT0 PB_3 | ALT0\n#define PB_4 0x14\n#define PB_4_ALT0 PB_4 | ALT0\n#define PB_5 0x15\n#define PB_5_ALT0 PB_5 | ALT0\n#define PB_6 0x16\n#define PB_6_ALT0 PB_6 | ALT0\n#define PB_7 0x17\n#define PB_7_ALT0 PB_7 | ALT0\n#define PB_8 0x18\n#define PB_8_ALT0 PB_8 | ALT0\n#define PB_9 0x19\n#define PB_9_ALT0 PB_9 | ALT0\n#define PB_10 0x1A\n#define PB_11 0x1B\n#define PB_12 0x1C\n#define PB_13 0x1D\n#define PB_13_ALT0 PB_13 | ALT0\n#define PB_14 0x1E\n#define PB_14_ALT0 PB_14 | ALT0\n#define PB_14_ALT1 PB_14 | ALT1\n#define PB_15 0x1F\n#define PB_15_ALT0 PB_15 | ALT0\n#define PB_15_ALT1 PB_15 | ALT1\n#define PC_0 0x20\n#define PC_0_ALT0 PC_0 | ALT0\n#define PC_0_ALT1 PC_0 | ALT1\n#define PC_1 0x21\n#define PC_1_ALT0 PC_1 | ALT0\n#define PC_1_ALT1 PC_1 | ALT1\n#define PC_2 0x22\n#define PC_2_ALT0 PC_2 | ALT0\n#define PC_2_ALT1 PC_2 | ALT1\n#define PC_3 0x23\n#define PC_3_ALT0 PC_3 | ALT0\n#define PC_3_ALT1 PC_3 | ALT1\n#define PC_4 0x24\n#define PC_4_ALT0 PC_4 | ALT0\n#define PC_5 0x25\n#define PC_5_ALT0 PC_5 | ALT0\n#define PC_6 0x26\n#define PC_6_ALT0 PC_6 | ALT0\n#define PC_7 0x27\n#define PC_7_ALT0 PC_7 | ALT0\n#define PC_8 0x28\n#define PC_8_ALT0 PC_8 | ALT0\n#define PC_9 0x29\n#define PC_9_ALT0 PC_9 | ALT0\n#define PC_10 0x2A\n#define PC_10_ALT0 PC_10 | ALT0\n#define PC_11 0x2B\n#define PC_11_ALT0 PC_11 | ALT0\n#define PC_12 0x2C\n#define PC_13 0x2D\n#define PC_14 0x2E\n#define PC_15 0x2F\n#define PD_0 0x30\n#define PD_1 0x31\n#define PD_2 0x32\n#define PD_3 0x33\n#define PD_4 0x34\n#define PD_5 0x35\n#define PD_6 0x36\n#define PD_7 0x37\n#define PD_8 0x38\n#define PD_9 0x39\n#define PD_10 0x3A\n#define PD_11 0x3B\n#define PD_12 0x3C\n#define PD_13 0x3D\n#define PD_14 0x3E\n#define PD_15 0x3F\n#define PE_0 0x40\n#define PE_1 0x41\n#define PE_2 0x42\n#define PE_3 0x43\n#define PE_4 0x44\n#define PE_5 0x45\n#define PE_6 0x46\n#define PE_7 0x47\n#define PE_8 0x48\n#define PE_9 0x49\n#define PE_10 0x4A\n#define PE_11 0x4B\n#define PE_12 0x4C\n#define PE_13 0x4D\n#define PE_14 0x4E\n#define PE_15 0x4F\n\n#endif\n\n#endif\n",
            "poll.ts": "namespace control {\n    class PollEvent {\n        public eid: number;\n        public vid: number;\n        public start: number;\n        public timeOut: number;\n        public condition: () => boolean;\n        public once: boolean;\n        constructor(eid: number, vid: number, start: number, timeOut: number, condition: () => boolean, once: boolean) {\n            this.eid = eid;\n            this.vid = vid;\n            this.start = start;\n            this.timeOut = timeOut;\n            this.condition = condition;\n            this.once = once;\n        }\n    }\n\n    let _pollEventQueue: PollEvent[] = undefined;\n\n    function pollEvents() {\n        while (_pollEventQueue.length > 0) {\n            const now = control.millis();\n            for (let i = 0; i < _pollEventQueue.length; ++i) {\n                const ev = _pollEventQueue[i];\n                if (ev.condition() || (ev.timeOut > 0 && now - ev.start > ev.timeOut)) {\n                    control.raiseEvent(ev.eid, ev.vid);\n                    if (ev.once) {\n                        _pollEventQueue.splice(i, 1);\n                        --i;\n                    }\n                }\n            }\n            pause(50);\n        }\n        // release fiber\n        _pollEventQueue = undefined;\n    }\n\n    export function __queuePollEvent(timeOut: number, condition: () => boolean, handler: () => void) {\n        const ev = new PollEvent(\n            DAL.DEVICE_ID_NOTIFY,\n            control.allocateNotifyEvent(),\n            control.millis(),\n            timeOut,\n            condition,\n            !handler\n        );\n\n        // start polling fiber if needed\n        if (!_pollEventQueue) {\n            _pollEventQueue = [ev];\n            control.runInParallel(pollEvents);\n        }\n        else {\n            // add to the queue\n            _pollEventQueue.push(ev)\n        }\n\n        // register event\n        if (handler)\n            control.onEvent(ev.eid, ev.vid, handler);\n        else // or wait\n            control.waitForEvent(ev.eid, ev.vid);\n    }    \n}\n\n/**\n * Busy wait for a condition to be true\n * @param condition condition to test for\n * @param timeOut if positive, maximum duration to wait for in milliseconds\n */\n//% blockId=\"pxt_pause_until\"\nfunction pauseUntil(condition: () => boolean, timeOut?: number): void {\n    if (!condition || condition()) return; // optimistic path\n    if (!timeOut) timeOut = 0;\n    control.__queuePollEvent(timeOut, condition, undefined);\n}\n",
            "pxt-core.d.ts": "/// <reference no-default-lib=\"true\"/>\n\ninterface Array<T> {\n    /**\n      * Get or set the length of an array. This number is one more than the index of the last element the array.\n      */\n    //% shim=Array_::length weight=84\n    //% blockId=\"lists_length\" block=\"length of %VALUE\" blockBuiltin=true blockNamespace=\"arrays\"\n    length: number;\n\n    /**\n      * Append a new element to an array.\n      * @param items New elements of the Array.\n      */\n    //% help=arrays/push\n    //% shim=Array_::push weight=50\n    //% blockId=\"array_push\" block=\"%list| add value %value| to end\" blockNamespace=\"arrays\"\n    //% group=\"Modify\"\n    push(item: T): void;\n\n    /**\n      * Concatenates the values with another array.\n      * @param arr The other array that is being concatenated with\n      */\n    //% helper=arrayConcat weight=40\n    concat(arr: T[]): T[];\n\n    /**\n      * Remove the last element from an array and return it.\n      */\n    //% help=arrays/pop\n    //% shim=Array_::pop weight=45\n    //% blockId=\"array_pop\" block=\"get and remove last value from %list\" blockNamespace=\"arrays\"\n    //% group=\"Read\"\n    pop(): T;\n\n    /**\n      * Reverse the elements in an array. The first array element becomes the last, and the last array element becomes the first.\n      */\n    //% help=arrays/reverse\n    //% helper=arrayReverse weight=10\n    //% blockId=\"array_reverse\" block=\"reverse %list\" blockNamespace=\"arrays\"\n    //% group=\"Operations\"\n    reverse(): void;\n\n    /**\n      * Remove the first element from an array and return it. This method changes the length of the array.\n      */\n    //% help=arrays/shift\n    //% helper=arrayShift weight=30\n    //% blockId=\"array_shift\" block=\"get and remove first value from %list\" blockNamespace=\"arrays\"\n    //% group=\"Read\"\n    shift(): T;\n\n    /**\n      * Add one element to the beginning of an array and return the new length of the array.\n      * @param element to insert at the start of the Array.\n      */\n    //% help=arrays/unshift\n    //% helper=arrayUnshift weight=25\n    //% blockId=\"array_unshift\" block=\"%list| insert %value| at beginning\" blockNamespace=\"arrays\"\n    //% group=\"Modify\"\n    //unshift(...values:T[]): number; //rest is not supported in our compiler yet.\n    unshift(value: T): number;\n\n    /**\n      * Return a section of an array.\n      * @param start The beginning of the specified portion of the array. eg: 0\n      * @param end The end of the specified portion of the array. eg: 0\n      */\n    //% help=arrays/slice\n    //% helper=arraySlice weight=41 blockNamespace=\"arrays\"\n    slice(start?: number, end?: number): T[];\n\n    /**\n      * Remove elements from an array.\n      * @param start The zero-based location in the array from which to start removing elements. eg: 0\n      * @param deleteCount The number of elements to remove. eg: 0\n      */\n    //% helper=arraySplice weight=40\n    splice(start: number, deleteCount: number): void;\n\n    /**\n      * joins all elements of an array into a string and returns this string.\n      * @param sep the string separator\n      */\n    //% helper=arrayJoin weight=40\n    join(sep?: string): string;\n\n    /**\n      * Tests whether at least one element in the array passes the test implemented by the provided function.\n      * @param callbackfn A function that accepts up to two arguments. The some method calls the callbackfn function one time for each element in the array.\n      */\n    //% helper=arraySome weight=40\n    some(callbackfn: (value: T, index: number) => boolean): boolean;\n\n    /**\n      * Tests whether all elements in the array pass the test implemented by the provided function.\n      * @param callbackfn A function that accepts up to two arguments. The every method calls the callbackfn function one time for each element in the array.\n      */\n    //% helper=arrayEvery weight=40\n    every(callbackfn: (value: T, index: number) => boolean): boolean;\n\n    /**\n      * Sort the elements of an array in place and returns the array. The sort is not necessarily stable.\n      * @param specifies a function that defines the sort order. If omitted, the array is sorted according to the prmitive type\n      */\n    //% helper=arraySort weight=40\n    sort(callbackfn?: (value1: T, value2: T) => number): T[];\n\n    /**\n      * Call a defined callback function on each element of an array, and return an array containing the results.\n      * @param callbackfn A function that accepts up to two arguments. The map method calls the callbackfn function one time for each element in the array.\n      */\n    //% helper=arrayMap weight=40\n    map<U>(callbackfn: (value: T, index: number) => U): U[];\n\n    /**\n      * Call a defined callback function on each element of an array.\n      * @param callbackfn A function that accepts up to two arguments. The forEach method calls the callbackfn function one time for each element in the array.\n      */\n    //% helper=arrayForEach weight=40\n    forEach(callbackfn: (value: T, index: number) => void): void;\n\n    /**\n      * Return the elements of an array that meet the condition specified in a callback function.\n      * @param callbackfn A function that accepts up to two arguments. The filter method calls the callbackfn function one time for each element in the array.\n      */\n    //% helper=arrayFilter weight=40\n    filter(callbackfn: (value: T, index: number) => boolean): T[];\n\n    /**\n      * Fills all the elements of an array from a start index to an end index with a static value. The end index is not included.\n      */\n    //% helper=arrayFill weight=39\n    fill(value: T, start?: number, end?: number): T[];\n\n    /**\n     * Returns the value of the first element in the array that satisfies the provided testing function. Otherwise undefined is returned.\n     * @param callbackfn\n     */\n    //% helper=arrayFind weight=40\n    find(callbackfn: (value: T, index: number) => boolean): T;\n\n    /**\n      * Call the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n      * @param callbackfn A function that accepts up to three arguments. The reduce method calls the callbackfn function one time for each element in the array.\n      * @param initialValue Initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n      */\n    //% helper=arrayReduce weight=40\n    reduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number) => U, initialValue: U): U;\n\n\n    /** Remove the first occurence of an object. Returns true if removed. */\n    //% shim=Array_::removeElement weight=48\n    removeElement(element: T): boolean;\n\n    /** Remove the element at a certain index. */\n    //% help=arrays/remove-at\n    //% shim=Array_::removeAt weight=47\n    //% blockId=\"array_removeat\" block=\"%list| get and remove value at %index\" blockNamespace=\"arrays\"\n    //% group=\"Read\"\n    removeAt(index: number): T;\n\n    /**\n     * Insert the value at a particular index, increases length by 1\n     * @param index the zero-based position in the list to insert the value, eg: 0\n     * @param the value to insert, eg: 0\n     */\n    //% help=arrays/insert-at\n    //% shim=Array_::insertAt weight=20\n    //% blockId=\"array_insertAt\" block=\"%list| insert at %index| value %value\" blockNamespace=\"arrays\"\n    //% group=\"Modify\"\n    insertAt(index: number, value: T): void;\n\n    /**\n      * Return the index of the first occurrence of a value in an array.\n      * @param item The value to locate in the array.\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\n      */\n    //% help=arrays/index-of\n    //% shim=Array_::indexOf weight=40\n    //% blockId=\"array_indexof\" block=\"%list| find index of %value\" blockNamespace=\"arrays\"\n    //% group=\"Operations\"\n    indexOf(item: T, fromIndex?: number): number;\n\n    /**\n     * Get the value at a particular index\n     * @param index the zero-based position in the list of the item, eg: 0\n     */\n    //% help=arrays/get\n    //% shim=Array_::getAt weight=85\n    get(index: number): T;\n\n    /**\n     * Store a value at a particular index\n     * @param index the zero-based position in the list to store the value, eg: 0\n     * @param value the value to insert, eg: 0\n     */\n    //% help=arrays/set\n    //% shim=Array_::setAt weight=84\n    set(index: number, value: T): void;\n\n    /**\n     * Return a random value from the array\n     */\n    //% help=arrays/pick-random\n    //% helper=arrayPickRandom weight=25\n    //% blockId=\"array_pickRandom\" block=\"get random value from %list\"\n    //% blockNamespace=\"arrays\"\n    //% group=\"Read\"\n    _pickRandom(): T;\n\n    [n: number]: T;\n\n    /**\n      * Add one element to the beginning of an array and return the new length of the array.\n      * @param element to insert at the start of the Array.\n      */\n    //% help=arrays/unshift\n    //% helper=arrayUnshift weight=24\n    //% blockId=\"array_unshift_statement\" block=\"%list| insert %value| at beginning\" blockNamespace=\"arrays\"\n    //% blockAliasFor=\"Array.unshift\"\n    //% group=\"Modify\"\n    _unshiftStatement(value: T): void;\n\n    /**\n      * Remove the last element from an array and return it.\n      */\n    //% help=arrays/pop\n    //% shim=Array_::pop weight=44\n    //% blockId=\"array_pop_statement\" block=\"remove last value from %list\" blockNamespace=\"arrays\"\n    //% blockAliasFor=\"Array.pop\"\n    //% group=\"Modify\"\n    _popStatement(): void;\n\n    /**\n      * Remove the first element from an array and return it. This method changes the length of the array.\n      */\n    //% help=arrays/shift\n    //% helper=arrayShift weight=29\n    //% blockId=\"array_shift_statement\" block=\"remove first value from %list\" blockNamespace=\"arrays\"\n    //% blockAliasFor=\"Array.shift\"\n    //% group=\"Modify\"\n    _shiftStatement(): void;\n\n    /** Remove the element at a certain index. */\n    //% help=arrays/remove-at\n    //% shim=Array_::removeAt weight=14\n    //% blockId=\"array_removeat_statement\" block=\"%list| remove value at %index\" blockNamespace=\"arrays\"\n    //% blockAliasFor=\"Array.removeAt\"\n    //% group=\"Modify\"\n    _removeAtStatement(index: number): void;\n}\n\ndeclare interface String {\n    // This block is currently disabled in favor of the built-in Blockly \"Create text with\" block, which compiles to \"\" + \"\"\n    // Add % sign back to the block annotation to re-enable\n    /**\n     * Returns a string that contains the concatenation of two or more strings.\n     * @param other The string to append to the end of the string.\n     */\n    //% shim=String_::concat weight=49\n    //% blockId=\"string_concat\" blockNamespace=\"text\"\n    // block=\"join %list=text|%other\"\n    concat(other: string): string;\n\n    /**\n     * Return the character at the specified index.\n     * @param index The zero-based index of the desired character.\n     */\n    //% shim=String_::charAt weight=48\n    //% help=text/char-at\n    //% blockId=\"string_get\" block=\"char from %this=text|at %pos\" blockNamespace=\"text\"\n    //% this.defl=\"this\"\n    charAt(index: number): string;\n\n    /** Returns the length of a String object. */\n    //% property shim=String_::length weight=47\n    //% blockId=\"text_length\" block=\"length of %VALUE\" blockBuiltin=true blockNamespace=\"text\"\n    length: number;\n\n    /**\n     * Return the Unicode value of the character at the specified location.\n     * @param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.\n     */\n    //% shim=String_::charCodeAt\n    charCodeAt(index: number): number;\n\n    /**\n     * See how the order of characters in two strings is different (in ASCII encoding).\n     * @param that String to compare to target string\n     */\n    //% shim=String_::compare\n    //% help=text/compare\n    //% blockId=\"string_compare\" block=\"compare %this=text| to %that\" blockNamespace=\"text\"\n    //% this.defl=\"this\"\n    compare(that: string): number;\n\n    /**\n     * Return a substring of the current string.\n     * @param start first character index; can be negative from counting from the end, eg:0\n     * @param length number of characters to extract, eg: 10\n     */\n    //% helper=stringSubstr\n    //% help=text/substr\n    //% blockId=\"string_substr\" block=\"substring of %this=text|from %start|of length %length\" blockNamespace=\"text\"\n    //% this.defl=\"this\"\n    substr(start: number, length?: number): string;\n\n    /**\n     * Return the current string with the first occurence of toReplace\n     * replaced with the replacer\n     * @param toReplace the substring to replace in the current string\n     * @param replacer either the string that replaces toReplace in the current string,\n     *                or a function that accepts the substring and returns the replacement string.\n     */\n    //% helper=stringReplace\n    replace(toReplace: string, replacer: string | ((sub: string) => string)): string;\n\n    /**\n     * Return the current string with each occurence of toReplace\n     * replaced with the replacer\n     * @param toReplace the substring to replace in the current string\n     * @param replacer either the string that replaces toReplace in the current string,\n     *                or a function that accepts the substring and returns the replacement string.\n     */\n    //% helper=stringReplaceAll\n    replaceAll(toReplace: string, replacer: string | ((sub: string) => string)): string;\n\n    /**\n     * Return a substring of the current string.\n     * @param start first character index; can be negative from counting from the end, eg:0\n     * @param end one-past-last character index\n     */\n    //% helper=stringSlice\n    slice(start: number, end?: number): string;\n\n    /** Returns a value indicating if the string is empty */\n    //% helper=stringEmpty\n    //% help=text/is-empty\n    //% blockId=\"string_isempty\" blockNamespace=\"text\"\n    //% block=\"%this=text| is empty\"\n    //% this.defl=\"this\"\n    isEmpty(): boolean;\n\n    /**\n     * Returns the position of the first occurrence of a specified value in a string.\n     * @param searchValue the text to find\n     * @param start optional start index for the search\n     */\n    //% shim=String_::indexOf\n    //% help=text/index-of\n    //% blockId=\"string_indexof\" blockNamespace=\"text\"\n    //% block=\"%this=text|find index of %searchValue\"\n    //% this.defl=\"this\"\n    indexOf(searchValue: string, start?: number): number;\n\n    /**\n     * Determines whether a string contains the characters of a specified string.\n     * @param searchValue the text to find\n     * @param start optional start index for the search\n     */\n    //% shim=String_::includes\n    //% help=text/includes\n    //% blockId=\"string_includes\" blockNamespace=\"text\"\n    //% block=\"%this=text|includes %searchValue\"\n    //% this.defl=\"this\"\n    includes(searchValue: string, start?: number): boolean;\n\n    /**\n     * Splits the string according to the separators\n     * @param separator\n     * @param limit\n     */\n    //% helper=stringSplit\n    //% help=text/split\n    //% blockId=\"string_split\" blockNamespace=\"text\"\n    //% block=\"split %this=text|at %separator\"\n    //% this.defl=\"this\"\n    split(separator?: string, limit?: number): string[];\n\n    /**\n     * Return a substring of the current string with whitespace removed from both ends\n     */\n    //% helper=stringTrim\n    trim(): string;\n\n    /**\n     * Converts the string to upper case characters.\n     */\n    //% helper=stringToUpperCase\n    //% help=text/to-upper-case\n    toUpperCase(): string;\n\n    /**\n     * Converts the string to lower case characters.\n     */\n    //% helper=stringToLowerCase\n    //% help=text/to-lower-case\n    toLowerCase(): string;\n\n    [index: number]: string;\n}\n\n/**\n  * Convert a string to a number.\n  * @param s A string to convert into a number. eg: 123\n  */\n//% shim=String_::toNumber\n//% help=text/parse-float\n//% blockId=\"string_parsefloat\" block=\"parse to number %text\" blockNamespace=\"text\"\n//% text.defl=\"123\"\ndeclare function parseFloat(text: string): number;\n\n/**\n * Returns a pseudorandom number between min and max included.\n * If both numbers are integral, the result is integral.\n * @param min the lower inclusive bound, eg: 0\n * @param max the upper inclusive bound, eg: 10\n */\n//% blockId=\"device_random\" block=\"pick random %min|to %limit\"\n//% blockNamespace=\"Math\"\n//% help=math/randint\n//% shim=Math_::randomRange\ndeclare function randint(min: number, max: number): number;\n\ninterface Object { }\ninterface Function {\n  __assignableToFunction: Function;\n}\ninterface IArguments {\n  __assignableToIArguments: IArguments;\n}\ninterface RegExp {\n  __assignableToRegExp: RegExp;\n}\ntype TemplateStringsArray = Array<string>;\n\ntype uint8 = number;\ntype uint16 = number;\ntype uint32 = number;\ntype int8 = number;\ntype int16 = number;\ntype int32 = number;\n\n\ndeclare interface Boolean {\n    /**\n     * Returns a string representation of an object.\n     */\n    //% shim=numops::toString\n    toString(): string;\n}\n\n/**\n * Combine, split, and search text strings.\n*/\n//% blockNamespace=\"text\"\ndeclare namespace String {\n\n    /**\n     * Make a string from the given ASCII character code.\n     */\n    //% help=math/from-char-code\n    //% shim=String_::fromCharCode weight=1\n    //% blockNamespace=\"text\" blockId=\"stringFromCharCode\" block=\"text from char code %code\"\n    function fromCharCode(code: number): string;\n}\n\ndeclare interface Number {\n    /**\n     * Returns a string representation of a number.\n     */\n    //% shim=numops::toString\n    toString(): string;\n}\n\n/**\n * Add, remove, and replace items in lists.\n*/\n//% blockNamespace=\"Arrays\"\ndeclare namespace Array {\n    /**\n     * Check if a given object is an array.\n     */\n    //% shim=Array_::isArray\n    function isArray(obj: any): boolean;\n}\n\ndeclare namespace Object {\n    /**\n     * Return the field names in an object.\n     */\n    //% shim=pxtrt::keysOf\n    function keys(obj: any): string[];\n}\n\n/**\n * More complex operations with numbers.\n*/\ndeclare namespace Math {\n    /**\n     * Returns the value of a base expression taken to a specified power.\n     * @param x The base value of the expression.\n     * @param y The exponent value of the expression.\n     */\n    //% shim=Math_::pow\n    function pow(x: number, y: number): number;\n\n    /**\n     * Returns a pseudorandom number between 0 and 1.\n     */\n    //% shim=Math_::random\n    //% help=math/random\n    function random(): number;\n\n    /**\n     * Returns a pseudorandom number between min and max included.\n     * If both numbers are integral, the result is integral.\n     * @param min the lower inclusive bound, eg: 0\n     * @param max the upper inclusive bound, eg: 10\n     */\n    //% blockId=\"device_random_deprecated\" block=\"pick random %min|to %limit\"\n    //% help=math/random-range deprecated\n    //% shim=Math_::randomRange\n    function randomRange(min: number, max: number): number;\n\n    /**\n     * Returns the natural logarithm (base e) of a number.\n     * @param x A number\n     */\n    //% shim=Math_::log\n    //% help=math\n    function log(x: number): number;\n\n    /**\n     * Returns returns ``e^x``.\n     * @param x A number\n     */\n    //% shim=Math_::exp\n    //% help=math\n    function exp(x: number): number;\n\n    /**\n     * Returns the sine of a number.\n     * @param x An angle in radians\n     */\n    //% shim=Math_::sin\n    //% help=math/trigonometry\n    function sin(x: number): number;\n\n    /**\n     * Returns the cosine of a number.\n     * @param x An angle in radians\n     */\n    //% shim=Math_::cos\n    //% help=math/trigonometry\n    function cos(x: number): number;\n\n    /**\n     * Returns the tangent of a number.\n     * @param x An angle in radians\n     */\n    //% shim=Math_::tan\n    //% help=math/trigonometry\n    function tan(x: number): number;\n\n    /**\n     * Returns the arcsine (in radians) of a number\n     * @param x A number\n     */\n    //% shim=Math_::asin\n    //% help=math/trigonometry\n    function asin(x: number): number;\n\n    /**\n     * Returns the arccosine (in radians) of a number\n     * @param x A number\n     */\n    //% shim=Math_::acos\n    //% help=math/trigonometry\n    function acos(x: number): number;\n\n    /**\n     * Returns the arctangent (in radians) of a number\n     * @param x A number\n     */\n    //% shim=Math_::atan\n    //% help=math/trigonometry\n    function atan(x: number): number;\n\n    /**\n     * Returns the arctangent of the quotient of its arguments.\n     * @param y A number\n     * @param x A number\n     */\n    //% shim=Math_::atan2\n    //% help=math/trigonometry\n    function atan2(y: number, x: number): number;\n\n    /**\n     * Returns the square root of a number.\n     * @param x A numeric expression.\n     */\n    //% shim=Math_::sqrt\n    //% help=math\n    function sqrt(x: number): number;\n\n    /**\n     * Returns the smallest number greater than or equal to its numeric argument.\n     * @param x A numeric expression.\n     */\n    //% shim=Math_::ceil\n      //% help=math\n    function ceil(x: number): number;\n\n    /**\n      * Returns the greatest number less than or equal to its numeric argument.\n      * @param x A numeric expression.\n      */\n    //% shim=Math_::floor\n      //% help=math\n    function floor(x: number): number;\n\n    /**\n      * Returns the number with the decimal part truncated.\n      * @param x A numeric expression.\n      */\n    //% shim=Math_::trunc\n    //% help=math\n    function trunc(x: number): number;\n\n    /**\n      * Returns a supplied numeric expression rounded to the nearest number.\n      * @param x The value to be rounded to the nearest number.\n      */\n    //% shim=Math_::round\n    //% help=math\n    function round(x: number): number;\n\n    /**\n     * Returns the value of integer signed 32 bit multiplication of two numbers.\n     * @param x The first number\n     * @param y The second number\n     */\n    //% shim=Math_::imul\n    //% help=math\n    function imul(x: number, y: number): number;\n\n    /**\n     * Returns the value of integer signed 32 bit division of two numbers.\n     * @param x The first number\n     * @param y The second number\n     */\n    //% shim=Math_::idiv\n    //% help=math\n    function idiv(x: number, y: number): number;\n}\n/*\ndeclare namespace control {\n    //% shim=_control::_onCodeStart\n    //export function _onCodeStart(arg: any): void;\n\n    //% shim=_control::_onCodeStop\n    export function _onCodeStop(arg: any): void;\n}*/",
            "pxt-helpers.ts": "type Action = () => void;\n\n/**\n * Constant representing Not-A-Number.\n */\nconst NaN = 0 / 0\n\n/**\n * Constant representing positive infinity.\n */\nconst Infinity = 1 / 0\n\nfunction isNaN(x: number) {\n    x = +x // convert to number\n    return x !== x\n}\n\nnamespace Number {\n    /**\n     * Check if a given value is of type Number and it is a NaN.\n     */\n    export function isNaN(x: any): boolean {\n        return typeof x == \"number\" && x !== x\n    }\n}\n\n/**\n * A dictionary from string key to string values\n */\ninterface StringMap {\n    [index: string]: string;\n}\n\n/**\n  * Convert a string to an integer.\n  * @param text A string to convert into an integral number. eg: \"123\"\n  * @param radix optional A value between 2 and 36 that specifies the base of the number in text.\n  * If this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal.\n  * All other strings are considered decimal.\n  */\n//% help=text/parse-int\n//% blockId=\"string_parseint\" block=\"parse to integer %text\" blockNamespace=\"text\"\n//% text.defl=\"123\"\n//% blockHidden=1\nfunction parseInt(text: string, radix?: number): number {\n    // roughly based on https://www.ecma-international.org/ecma-262/5.1/#sec-15.1.2.2\n    // with some consideration for avoiding unnecessary slices where easy\n    if (!text || (radix != null && (radix < 2 || radix > 36)))\n        return NaN;\n\n    let start = 0;\n    while (start < text.length && helpers.isWhitespace(text.charCodeAt(start)))\n        ++start;\n\n    if (start === text.length)\n        return NaN;\n\n    const numberOffset = 48; // 0\n    const numCount = 10;\n    const letterOffset = 97; // a\n    const letterCount = 26;\n    const lowerCaseMask = 0x20;\n\n    let sign = 1;\n    switch (text.charAt(start)) {\n        case \"-\":\n            sign = -1;\n            // fallthrough\n        case \"+\":\n            ++start;\n    }\n\n    if ((!radix || radix == 16)\n            && \"0\" === text[start]\n            && (\"x\" === text[start + 1] || \"X\" === text[start + 1])) {\n        radix = 16;\n        start += 2;\n    } else if (!radix) {\n        radix = 10;\n    }\n\n    let output = 0;\n    let hasDigit = false;\n    for (let i = start; i < text.length; ++i) {\n        const code = text.charCodeAt(i) | lowerCaseMask;\n        let val: number = undefined;\n\n        if (code >= numberOffset && code < numberOffset + numCount)\n            val = code - numberOffset;\n        else if (code >= letterOffset && code < letterOffset + letterCount)\n            val = numCount + code - letterOffset;\n\n        if (val == undefined || val >= radix) {\n            if (!hasDigit) {\n                return NaN;\n            }\n            break;\n        }\n        hasDigit = true;\n        output = output * radix + val;\n    }\n\n    return sign * output;\n}\n\nnamespace helpers {\n    export function arrayFill<T>(O: T[], value: T, start?: number, end?: number) {\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill\n        // Steps 3-5.\n        const len = O.length >>> 0;\n\n        // Steps 6-7.\n        const relativeStart = start === undefined ? 0 : start >> 0;\n\n        // Step 8.\n        let k = relativeStart < 0 ?\n            Math.max(len + relativeStart, 0) :\n            Math.min(relativeStart, len);\n\n        // Steps 9-10.\n        const relativeEnd = end === undefined ? len : end >> 0;\n\n        // Step 11.\n        const final = relativeEnd < 0 ?\n            Math.max(len + relativeEnd, 0) :\n            Math.min(relativeEnd, len);\n\n        // Step 12.\n        while (k < final) {\n            O[k] = value;\n            k++;\n        }\n\n        // Step 13.\n        return O;\n    }\n\n    export function arraySplice<T>(arr: T[], start: number, len: number) {\n        if (start < 0) {\n            return;\n        }\n        for (let i = 0; i < len; ++i) {\n            arr.removeAt(start)\n        }\n    }\n\n    export function arrayReverse<T>(arr: T[]): void {\n        let len = arr.length;\n        for (let i = 0; i < len / 2; i++) {\n            swap(arr, i, len - i - 1);\n        }\n    }\n\n    export function arrayShift<T>(arr: T[]): T {\n        return arr.removeAt(0);\n    }\n\n    export function arrayJoin<T>(arr: T[], sep?: string): string {\n        if (sep === undefined || sep === null) {\n            sep = \",\";\n        }\n\n        let r = \"\";\n        let len = arr.length // caching this seems to match V8\n        for (let i = 0; i < len; ++i) {\n            if (i > 0 && sep)\n                r += sep;\n            r += (arr[i] === undefined || arr[i] === null) ? \"\" : arr[i];\n        }\n        return r;\n    }\n\n    /*TODO: Enable this multiple value unshift, after rest is enabled in our compiler.\n        export function arrayUnshift<T>(arr: T[], ...values: T[]) : number {\n            for(let i = values.length; i > 0; --i) {\n                arr.insertAt(0, values[i - 1]);\n            }\n            return arr.length;\n        }\n    */\n    export function arrayUnshift<T>(arr: T[], value: T): number {\n        arr.insertAt(0, value);\n        return arr.length;\n    }\n\n    function swap<T>(arr: T[], i: number, j: number): void {\n        let temp: T = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n\n    function sortHelper<T>(arr: T[], callbackfn?: (value1: T, value2: T) => number): T[] {\n        if (arr.length <= 0 || !callbackfn) {\n            return arr;\n        }\n        let len = arr.length;\n        // simple selection sort.\n        for (let i = 0; i < len - 1; ++i) {\n            for (let j = i + 1; j < len; ++j) {\n                if (callbackfn(arr[i], arr[j]) > 0) {\n                    swap(arr, i, j);\n                }\n            }\n        }\n        return arr;\n    }\n\n    export function arraySort<T>(arr: T[], callbackfn?: (value1: T, value2: T) => number): T[] {\n        if (!callbackfn && arr.length > 1) {\n            callbackfn = (a, b) => {\n                // default is sort as if the element were a string, with null < undefined\n                const aIsUndef = a === undefined;\n                const bIsUndef = b === undefined;\n                if (aIsUndef && bIsUndef) return 0;\n                else if (aIsUndef) return 1;\n                else if (bIsUndef) return -1;\n\n                const aIsNull = a === null;\n                const bIsNull = b === null;\n                if (aIsNull && bIsNull) return 0;\n                else if (aIsNull) return 1;\n                else if (bIsNull) return -1;\n\n                return (a + \"\").compare(b + \"\");\n            }\n        }\n        return sortHelper(arr, callbackfn);\n    }\n\n    export function arrayMap<T, U>(arr: T[], callbackfn: (value: T, index: number) => U): U[] {\n        let res: U[] = []\n        let len = arr.length // caching this seems to match V8\n        for (let i = 0; i < len; ++i) {\n            res.push(callbackfn(arr[i], i))\n        }\n        return res\n    }\n\n    export function arraySome<T>(arr: T[], callbackfn: (value: T, index: number) => boolean): boolean {\n        let len = arr.length // caching this seems to match V8\n        for (let i = 0; i < len; ++i)\n            if (callbackfn(arr[i], i))\n                return true;\n        return false;\n    }\n\n    export function arrayEvery<T>(arr: T[], callbackfn: (value: T, index: number) => boolean): boolean {\n        let len = arr.length // caching this seems to match V8\n        for (let i = 0; i < len; ++i)\n            if (!callbackfn(arr[i], i))\n                return false;\n        return true;\n    }\n\n    export function arrayForEach<T>(arr: T[], callbackfn: (value: T, index: number) => void): void {\n        let len = arr.length // caching this seems to match V8\n        for (let i = 0; i < len; ++i) {\n            callbackfn(arr[i], i);\n        }\n    }\n\n    export function arrayFilter<T>(arr: T[], callbackfn: (value: T, index: number) => boolean): T[] {\n        let res: T[] = []\n        let len = arr.length\n        for (let i = 0; i < len; ++i) {\n            let v = arr[i] // need to cache\n            if (callbackfn(v, i)) res.push(v)\n        }\n        return res\n    }\n\n    export function arrayFind<T>(arr: T[], callbackfn: (value: T, index: number) => boolean): T {\n        let len = arr.length\n        for (let i = 0; i < len; ++i) {\n            let v = arr[i] // need to cache\n            if (callbackfn(v, i)) return v;\n        }\n        return undefined;\n    }\n\n    export function arrayReduce<T, U>(arr: T[], callbackfn: (previousValue: U, currentValue: T, currentIndex: number) => U, initialValue: U): U {\n        let len = arr.length\n        for (let i = 0; i < len; ++i) {\n            initialValue = callbackfn(initialValue, arr[i], i)\n        }\n        return initialValue\n    }\n\n    export function arrayConcat<T>(arr: T[], otherArr: T[]): T[] {\n        let out: T[] = [];\n        for (let value of arr) {\n            out.push(value);\n        }\n        for (let value of otherArr) {\n            out.push(value);\n        }\n        return out;\n    }\n\n    export function arrayPickRandom<T>(arr: T[]): T {\n        return arr[Math.randomRange(0, arr.length - 1)];\n    }\n\n    export function arraySlice<T>(arr: T[], start?: number, end?: number): T[] {\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\n        const res: T[] = [];\n        const len = arr.length;\n\n        if (start === undefined)\n            start = 0;\n        else if (start < 0)\n            start = Math.max(len + start, 0);\n\n        if (start > len)\n            return res;\n\n        if (end === undefined)\n            end = len;\n        else if (end < 0)\n            end = len + end;\n\n        if (end > len)\n            end = len;\n\n        for (let i = start; i < end; ++i) {\n            res.push(arr[i]);\n        }\n        return res;\n    }\n\n    export function stringReplace(s: string, toReplace: string, replacer: string | ((sub: string) => string)) {\n        toReplace = toReplace + \"\";\n        const ind = s.indexOf(toReplace);\n        if (ind == -1)\n            return s;\n\n        const begin = s.slice(0, ind);\n        const end = s.slice(ind + toReplace.length);\n\n        if (typeof replacer == \"string\" || !replacer) {\n            return begin + replacer + end;\n        } else {\n            return begin + replacer(toReplace) + end;\n        }\n    }\n\n    export function stringReplaceAll(s: string, toReplace: string, replacer: string | ((sub: string) => string)) {\n        toReplace = toReplace + \"\";\n        const split = s.split(toReplace);\n        const empty = toReplace.isEmpty();\n\n        let output = (empty ? applyReplace(toReplace, replacer) : \"\");\n\n        if (split.length) {\n            output += split[0];\n        }\n\n        for (let i = 1; i < split.length; ++i) {\n            output += applyReplace(toReplace, replacer) + split[i];\n        }\n\n        if (!s.isEmpty() && empty) {\n            output += applyReplace(toReplace, replacer);\n        }\n\n        return output;\n\n        function applyReplace(r: string, replacer: string | ((sub: string) => string)): string {\n            if (typeof replacer == \"string\" || !replacer) {\n                return replacer as string;\n            } else {\n                return replacer(r);\n            }\n        }\n    }\n\n    //% shim=String_::substr\n    declare function stringSubstrHelper(s: string, start: number, length?: number): string;\n\n    export function stringSubstr(s: string, start: number, length?: number): string {\n        length = length === undefined ? s.length : length || 0;\n        return stringSubstrHelper(s, start, length);\n    }\n\n    export function stringSlice(s: string, start: number, end?: number): string {\n        const len = s.length;\n\n        if (start < 0) {\n            start = Math.max(len + start, 0);\n        }\n\n        if (end === undefined) {\n            end = len;\n        } else if (end === null) {\n            end = 0;\n        }\n\n        if (end < 0) {\n            end = len + end;\n        }\n\n        return stringSubstrHelper(s, start, end - start);\n    }\n\n    // also note this doesn't handle unicode, but neither does JS (there's toLocaleUpperCase())\n    export function stringToUpperCase(s: string): string {\n        let r = \"\"\n        let prev = 0\n        for (let i = 0; i < s.length; i++) {\n            const c = s.charCodeAt(i)\n            if (97 <= c && c <= 122) {\n                r += s.slice(prev, i) + String.fromCharCode(c - 32)\n                prev = i + 1\n            }\n        }\n        r += s.slice(prev)\n        return r\n    }\n\n    // also note this doesn't handle unicode, but neither does JS (there's toLocaleLowerCase())\n    export function stringToLowerCase(s: string): string {\n        let r = \"\"\n        let prev = 0\n        for (let i = 0; i < s.length; i++) {\n            const c = s.charCodeAt(i)\n            if (65 <= c && c <= 90) {\n                r += s.slice(prev, i) + String.fromCharCode(c + 32)\n                prev = i + 1\n            }\n        }\n        r += s.slice(prev)\n        return r\n    }\n\n    export function stringSplit(S: string, separator?: string, limit?: number): string[] {\n        // https://www.ecma-international.org/ecma-262/6.0/#sec-string.prototype.split\n        const A: string[] = [];\n        let lim = 0;\n        if (limit === undefined)\n            lim = (1 << 29) - 1; // spec says 1 << 53, leaving it at 29 for constant folding\n        else if (limit < 0)\n            lim = 0;\n        else\n            lim = limit | 0;\n        const s = S.length;\n        let p = 0;\n        const R = separator;\n        if (lim == 0)\n            return A;\n        if (separator === undefined) {\n            A[0] = S;\n            return A;\n        }\n        if (s == 0) {\n            let z = splitMatch(S, 0, R);\n            if (z > -1) return A;\n            A[0] = S;\n            return A;\n        }\n        let T: string;\n        let q = p;\n        while (q != s) {\n            let e = splitMatch(S, q, R);\n            if (e < 0) q++;\n            else {\n                if (e == p) q++;\n                else {\n                    T = stringSlice(S, p, q);\n                    A.push(T);\n                    if (A.length == lim) return A;\n                    p = e;\n                    q = p;\n                }\n            }\n        }\n        T = stringSlice(S, p, q);\n        A.push(T);\n        return A;\n    }\n\n    function splitMatch(S: string, q: number, R: string): number {\n        const r = R.length;\n        const s = S.length;\n        if (q + r > s) return -1;\n        for (let i = 0; i < r; ++i) {\n            if (S[q + i] != R[i])\n                return -1;\n        }\n        return q + r;\n    }\n\n    export function stringTrim(s: string): string {\n        let start = 0;\n        let end = s.length - 1;\n\n        while (start <= end && isWhitespace(s.charCodeAt(start)))\n            ++start;\n\n        while (end > start && isWhitespace(s.charCodeAt(end)))\n            --end;\n        return s.slice(start, end + 1);\n    }\n\n    export function isWhitespace(c: number): boolean {\n        // https://www.ecma-international.org/ecma-262/6.0/#sec-white-space\n        switch (c) {\n            case 0x0009:  // character tab\n            case 0x000B:  // line tab\n            case 0x000C:  // form feed\n            case 0x0020:  // space\n            case 0x00A0:  // no-break space\n            case 0xFEFF:  // zero width no break space\n            case 0x000A:  // line feed\n            case 0x000D:  // carriage return\n            case 0x2028:  // line separator\n            case 0x2029:  // paragraph separator\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    export function stringEmpty(S: string): boolean {\n        return !S;\n    }\n}\n\nnamespace Math {\n    export function clamp(min: number, max: number, value: number): number {\n        return Math.min(max, Math.max(min, value));\n    }\n\n    /**\n      * Returns the absolute value of a number (the value without regard to whether it is positive or negative).\n      * For example, the absolute value of -5 is the same as the absolute value of 5.\n      * @param x A numeric expression for which the absolute value is needed.\n      */\n    //% blockId=math_op3\n    //% help=math/abs\n    export function abs(x: number): number {\n        return x < 0 ? -x : x;\n    }\n\n    /**\n      * Returns the sign of the x, indicating whether x is positive, negative or zero.\n      * @param x The numeric expression to test\n      */\n    export function sign(x: number): number {\n        if (x == 0) return 0;\n        if (x > 0) return 1;\n        return -1;\n    }\n\n    /**\n      * Returns the larger of two supplied numeric expressions.\n      */\n    //% blockId=math_op2\n    //% help=math/max\n    export function max(a: number, b: number): number {\n        if (a >= b) return a;\n        return b;\n    }\n\n    /**\n      * Returns the smaller of two supplied numeric expressions.\n      */\n    //% blockId=math_op2\n    //% help=math/min\n    export function min(a: number, b: number): number {\n        if (a <= b) return a;\n        return b;\n    }\n\n    /**\n     * Rounds ``x`` to a number with the given number of ``digits``\n     * @param x the number to round\n     * @param digits the number of resulting digits\n     */\n    //%\n    export function roundWithPrecision(x: number, digits: number): number {\n        digits = digits | 0;\n        // invalid digits input\n        if (digits <= 0) return Math.round(x);\n        if (x == 0) return 0;\n        let r = 0;\n        do {\n            const d = Math.pow(10, digits);\n            r = Math.round(x * d) / d;\n            digits++;\n        } while (r == 0 && digits < 21);\n        return r;\n    }\n}\n\n\n//% blockHidden=1\nnamespace __internal {\n    /**\n     * A shim to render a boolean as a down/up toggle\n     */\n    //% shim=TD_ID blockHidden=1\n    //% blockId=toggleDownUp block=\"%down\"\n    //% down.fieldEditor=toggledownup\n    //% down.fieldOptions.decompileLiterals=true\n    export function __downUp(down: boolean): boolean {\n        return down;\n    }\n\n    /**\n     * A shim to render a boolean as a up/down toggle\n     */\n    //% shim=TD_ID blockHidden=1\n    //% blockId=toggleUpDown block=\"%up\"\n    //% up.fieldEditor=toggleupdown\n    //% up.fieldOptions.decompileLiterals=true\n    export function __upDown(up: boolean): boolean {\n        return up;\n    }\n\n    /**\n     * A shim to render a boolean as a high/low toggle\n     */\n    //% shim=TD_ID blockHidden=1\n    //% blockId=toggleHighLow block=\"%high\"\n    //% high.fieldEditor=togglehighlow\n    //% high.fieldOptions.decompileLiterals=true\n    export function __highLow(high: boolean): boolean {\n        return high;\n    }\n\n    /**\n     * A shim to render a boolean as a on/off toggle\n     */\n    //% shim=TD_ID blockHidden=1\n    //% blockId=toggleOnOff block=\"%on\"\n    //% on.fieldEditor=toggleonoff\n    //% on.fieldOptions.decompileLiterals=true\n    export function __onOff(on: boolean): boolean {\n        return on;\n    }\n\n    /**\n     * A shim to render a boolean as a yes/no toggle\n     */\n    //% shim=TD_ID blockHidden=1\n    //% blockId=toggleYesNo block=\"%yes\"\n    //% yes.fieldEditor=toggleyesno\n    //% yes.fieldOptions.decompileLiterals=true\n    export function __yesNo(yes: boolean): boolean {\n        return yes;\n    }\n\n    /**\n     * A shim to render a boolean as a win/lose toggle\n     */\n    //% shim=TD_ID blockHidden=1\n    //% blockId=toggleWinLose block=\"%win\"\n    //% win.fieldEditor=togglewinlose\n    //% win.fieldOptions.decompileLiterals=true\n    export function __winLose(win: boolean): boolean {\n        return win;\n    }\n\n    /**\n     * Get the color wheel field editor\n     * @param color color\n     */\n    //% blockId=colorNumberPicker block=\"%value\"\n    //% blockHidden=true\n    //% shim=TD_ID colorSecondary=\"#FFFFFF\"\n    //% value.fieldEditor=\"colornumber\" value.fieldOptions.decompileLiterals=true\n    //% value.defl='0xff0000'\n    //% value.fieldOptions.colours='[\"#ff0000\",\"#ff8000\",\"#ffff00\",\"#ff9da5\",\"#00ff00\",\"#b09eff\",\"#00ffff\",\"#007fff\",\"#65471f\",\"#0000ff\",\"#7f00ff\",\"#ff0080\",\"#ff00ff\",\"#ffffff\",\"#999999\",\"#000000\"]'\n    //% value.fieldOptions.columns=4 value.fieldOptions.className='rgbColorPicker'\n    export function __colorNumberPicker(value: number) {\n        return value;\n    }\n\n    /**\n     * Get the color wheel field editor\n     * @param value value between 0 to 255 to get a color value, eg: 10\n     */\n    //% blockId=colorWheelPicker block=\"%value\"\n    //% blockHidden=true\n    //% shim=TD_ID colorSecondary=\"#FFFFFF\"\n    //% value.fieldEditor=\"colorwheel\" value.fieldOptions.decompileLiterals=true\n    //% value.fieldOptions.sliderWidth='200'\n    //% value.fieldOptions.min=0 value.fieldOptions.max=255\n    export function __colorWheelPicker(value: number) {\n        return value;\n    }\n\n    /**\n    * Get the color wheel field editor using HSV values\n    * @param value value between 0 to 255 to get a color value, eg: 10\n    */\n    //% blockId=colorWheelHsvPicker block=\"%value\"\n    //% blockHidden=true\n    //% shim=TD_ID colorSecondary=\"#FFFFFF\"\n    //% value.fieldEditor=\"colorwheel\" value.fieldOptions.decompileLiterals=true\n    //% value.fieldOptions.sliderWidth='200'\n    //% value.fieldOptions.min=0 value.fieldOptions.max=255\n    //% value.fieldOptions.channel=hsvfast\n    export function __colorWheelHsvPicker(value: number) {\n        return value;\n    }\n\n    /**\n     * A speed picker\n     * @param speed the speed, eg: 50\n     */\n    //% blockId=speedPicker block=\"%speed\" shim=TD_ID\n    //% speed.fieldEditor=\"speed\" colorSecondary=\"#FFFFFF\"\n    //% weight=0 blockHidden=1 speed.fieldOptions.decompileLiterals=1\n    export function __speedPicker(speed: number): number {\n        return speed;\n    }\n\n    /**\n     * A turn ratio picker\n     * @param turnratio the turn ratio, eg: 0\n     */\n    //% blockId=turnRatioPicker block=\"%turnratio\" shim=TD_ID\n    //% turnratio.fieldEditor=\"turnratio\" colorSecondary=\"#FFFFFF\"\n    //% weight=0 blockHidden=1 turnRatio.fieldOptions.decompileLiterals=1\n    export function __turnRatioPicker(turnratio: number): number {\n        return turnratio;\n    }\n\n    /**\n     * A field editor that displays a protractor\n     */\n    //% blockId=protractorPicker block=\"%angle\"\n    //% shim=TD_ID\n    //% angle.fieldEditor=protractor\n    //% angle.fieldOptions.decompileLiterals=1\n    //% colorSecondary=\"#FFFFFF\"\n    //% blockHidden=1\n    export function __protractor(angle: number) {\n        return angle;\n    }\n\n    /**\n      * Get the time field editor\n      * @param ms time duration in milliseconds, eg: 500, 1000\n      */\n    //% blockId=timePicker block=\"%ms\"\n    //% blockHidden=true shim=TD_ID\n    //% colorSecondary=\"#FFFFFF\"\n    //% ms.fieldEditor=\"numberdropdown\" ms.fieldOptions.decompileLiterals=true\n    //% ms.fieldOptions.data='[[\"100 ms\", 100], [\"200 ms\", 200], [\"500 ms\", 500], [\"1 second\", 1000], [\"2 seconds\", 2000], [\"5 seconds\", 5000]]'\n    export function __timePicker(ms: number): number {\n        return ms;\n    }\n}\n",
            "pxt-python.d.ts": "/// <reference no-default-lib=\"true\"/>\n\ndeclare namespace _py {\n    interface Array {\n        //% py2tsOverride=\"push($0)\"\n        append(value: any): void;\n\n        //% py2tsOverride=\"concat($0)\"\n        extend(other: Array): void;\n\n        //% py2tsOverride=\"insertAt($0, $1)\"\n        insert(index: number, value: any): void;\n\n        //% py2tsOverride=\"removeElement($0)\"\n        remove(value: any): void;\n\n        //% py2tsOverride=\"sort($0?)\"\n        sort(sorter?: (a: any, b: any) => number): void;\n\n        //% py2tsOverride=\"reverse()\"\n        reverse(): void;\n\n        //% py2tsOverride=\"slice()\"\n        copy(): void;\n\n        //% pyHelper=\"py_array_pop\"\n        pop(index?: number): any;\n\n        //% pyHelper=\"py_array_clear\"\n        clear(): void;\n\n        //% pyHelper=\"py_array_index\"\n        index(value: any, start?: number, end?: number): number;\n\n        //% pyHelper=\"py_array_count\"\n        count(value: any): number;\n    }\n\n    interface String {\n        //% pyHelper=\"py_string_capitalize\"\n        capitalize(): string;\n\n        //% pyHelper=\"py_string_casefold\"\n        casefold(): string;\n\n        //% pyHelper=\"py_string_center\"\n        center(width: number, fillChar?: string): string;\n\n        //% pyHelper=\"py_string_count\"\n        count(sub: string, start?: number, end?: number): number;\n\n        //% pyHelper=\"py_string_endswith\"\n        endswith(suffix: string, start?: number, end?: number): boolean;\n\n        //% pyHelper=\"py_string_find\"\n        find(sub: string, start?: number, end?: number): number;\n\n        //% pyHelper=\"py_string_index\"\n        index(sub: string, start?: number, end?: number): number;\n\n        //% pyHelper=\"py_string_isalnum\"\n        isalnum(): boolean;\n\n        //% pyHelper=\"py_string_isalpha\"\n        isalpha(): boolean;\n\n        //% pyHelper=\"py_string_isascii\"\n        isascii(): boolean;\n\n        //% pyHelper=\"py_string_isdigit\"\n        isdigit(): boolean;\n\n        //% pyHelper=\"py_string_isnumeric\"\n        isnumeric(): boolean;\n\n        //% pyHelper=\"py_string_isspace\"\n        isspace(): boolean;\n\n        //% pyHelper=\"py_string_isdecimal\"\n        isdecimal(): boolean;\n\n        //% pyHelper=\"py_string_isidentifier\"\n        isidentifier(): boolean;\n\n        //% pyHelper=\"py_string_islower\"\n        islower(): boolean;\n\n        //% pyHelper=\"py_string_isprintable\"\n        isprintable(): boolean;\n\n        //% pyHelper=\"py_string_istitle\"\n        istitle(): boolean;\n\n        //% pyHelper=\"py_string_isupper\"\n        isupper(): boolean;\n\n        //% pyHelper=\"py_string_join\"\n        join(iterable: any[]): string;\n\n        //% pyHelper=\"py_string_ljust\"\n        ljust(width: number, fillChar?: string): string;\n\n        //% pyHelper=\"py_string_lower\"\n        lower(): string;\n\n        //% pyHelper=\"py_string_lstrip\"\n        lstrip(chars?: string): string;\n\n        //% py2tsOverride=\"replace($0, $1)\"\n        replace(oldString: string, newString: string): string;\n\n        //% pyHelper=\"py_string_rfind\"\n        rfind(sub: string, start?: number, end?: number): number;\n\n        //% pyHelper=\"py_string_rindex\"\n        rindex(sub: string, start?: number, end?: number): number;\n\n        //% pyHelper=\"py_string_rjust\"\n        rjust(width: number, fillChar?: string): string;\n\n        //% pyHelper=\"py_string_rsplit\"\n        rsplit(sep?: string, maxSplit?: number): string[];\n\n        //% pyHelper=\"py_string_rstrip\"\n        rstrip(chars?: string): string;\n\n        //% pyHelper=\"py_string_split\"\n        split(sep?: string, maxsplit?: number): string[];\n\n        //% pyHelper=\"py_string_splitlines\"\n        splitlines(keepends?: boolean): string[];\n\n        //% pyHelper=\"py_string_startswith\"\n        startswith(prefix: string, start?: number, end?: number): boolean;\n\n        //% pyHelper=\"py_string_strip\"\n        strip(chars?: string): string;\n\n        //% pyHelper=\"py_string_swapcase\"\n        swapcase(): string;\n\n        //% pyHelper=\"py_string_title\"\n        title(): string;\n\n        //% pyHelper=\"py_string_upper\"\n        upper(): string;\n\n        //% pyHelper=\"py_string_zfill\"\n        zfill(width: number): string;\n    }\n\n    interface Dict {\n        clear(): void;\n        copy(): void;\n        get(key: string, defaultValue?: any): any;\n        // items(): [string, any][];\n        keys(): string[];\n        pop(key: string, defaultValue?: any): any;\n        // popitem(): [string, any];\n        setdefault(key: string, defaultValue?: any): any;\n        update(other: Dict): void;\n        values(): any[];\n    }\n\n    interface Set {\n        isdisjoint(other: Set): boolean;\n        issubset(other: Set): boolean;\n        issuperset(other: Set): boolean;\n        union(other: Set): Set;\n        intersection(other: Set): Set;\n        difference(other: Set): Set;\n        symmetric_difference(other: Set): Set;\n        copy(): Set;\n        update(other: Set): void;\n        intersection_update(other: Set): void;\n        difference_update(other: Set): void;\n        symmetric_difference_update(other: Set): void;\n        add(elem: any): void;\n        remove(elem: any): void;\n        discard(elem: any): void;\n        pop(): any;\n        clear(): void;\n    }\n}",
            "pxt.cpp": "#include \"pxtbase.h\"\n\nusing namespace std;\n\nnamespace pxt {\n\nAction mkAction(int totallen, RefAction *act) {\n    check(getVTable(act)->classNo == BuiltInType::RefAction, PANIC_INVALID_BINARY_HEADER, 1);\n#ifdef PXT_VM\n    check(act->initialLen <= totallen, PANIC_INVALID_BINARY_HEADER, 13);\n#endif\n\n    if (totallen == 0) {\n        return (TValue)act; // no closure needed\n    }\n\n    void *ptr = gcAllocate(sizeof(RefAction) + totallen * sizeof(void *));\n    RefAction *r = new (ptr) RefAction();\n    r->len = totallen;\n#ifdef PXT_VM\n    r->numArgs = act->numArgs;\n    r->initialLen = act->initialLen;\n    r->flags = 0;\n#endif\n    r->func = act->func;\n    memset(r->fields, 0, r->len * sizeof(void *));\n\n    MEMDBG(\"mkAction: start=%p => %p\", act, r);\n\n    return (Action)r;\n}\n\nRefRecord *mkClassInstance(VTable *vtable) {\n    intcheck(vtable->methods[0] == &RefRecord_destroy, PANIC_SIZE, 3);\n    // intcheck(vtable->methods[1] == &RefRecord_print, PANIC_SIZE, 4);\n\n    void *ptr = gcAllocate(vtable->numbytes);\n    RefRecord *r = new (ptr) RefRecord(vtable);\n    memset(r->fields, 0, vtable->numbytes - sizeof(RefRecord));\n    MEMDBG(\"mkClass: vt=%p => %p\", vtable, r);\n    return r;\n}\n\nTValue RefRecord::ld(int idx) {\n    // intcheck((reflen == 255 ? 0 : reflen) <= idx && idx < len, PANIC_OUT_OF_BOUNDS, 1);\n    return fields[idx];\n}\n\nTValue RefRecord::ldref(int idx) {\n    // DMESG(\"LD %p len=%d reflen=%d idx=%d\", this, len, reflen, idx);\n    // intcheck(0 <= idx && idx < reflen, PANIC_OUT_OF_BOUNDS, 2);\n    return fields[idx];\n}\n\nvoid RefRecord::st(int idx, TValue v) {\n    // intcheck((reflen == 255 ? 0 : reflen) <= idx && idx < len, PANIC_OUT_OF_BOUNDS, 3);\n    fields[idx] = v;\n}\n\nvoid RefRecord::stref(int idx, TValue v) {\n    // DMESG(\"ST %p len=%d reflen=%d idx=%d\", this, len, reflen, idx);\n    // intcheck(0 <= idx && idx < reflen, PANIC_OUT_OF_BOUNDS, 4);\n    fields[idx] = v;\n}\n\nvoid RefObject::destroyVT() {\n    ((RefObjectMethod)getVTable(this)->methods[0])(this);\n}\n\n//%\nvoid deleteRefObject(RefObject *obj) {\n    obj->destroyVT();\n}\n\nvoid RefObject::printVT() {\n    ((RefObjectMethod)getVTable(this)->methods[1])(this);\n}\n\nvoid RefRecord_destroy(RefRecord *) {}\n\nvoid RefRecord_print(RefRecord *r) {\n    DMESG(\"RefRecord %p size=%d bytes\", r, getVTable(r)->numbytes);\n}\n\nvoid Segment::set(unsigned i, TValue value) {\n    if (i < size) {\n        data[i] = value;\n    } else if (i < Segment::MaxSize) {\n        growByMin(i + 1);\n        data[i] = value;\n    } else {\n        return;\n    }\n    if (length <= i) {\n        length = i + 1;\n    }\n\n#ifdef DEBUG_BUILD\n    DMESG(\"In Segment::set\");\n    this->print();\n#endif\n\n    return;\n}\n\nstatic inline int growthFactor(int size) {\n    if (size == 0) {\n        return 4;\n    }\n    if (size < 64) {\n        return size * 2; // Double\n    }\n    if (size < 512) {\n        return size * 5 / 3; // Grow by 1.66 rate\n    }\n    // Grow by constant rate\n    if ((unsigned)size + 256 < Segment::MaxSize)\n        return size + 256;\n    else\n        return Segment::MaxSize;\n}\n\nvoid LLSegment::setLength(unsigned newLen) {\n    if (newLen > Segment::MaxSize)\n        return;\n\n    if (newLen > size) {\n        int newSize = growthFactor(size);\n        if (newSize < (int)newLen)\n            newSize = newLen;\n\n        // this will throw if unable to allocate\n        TValue *tmp = (TValue *)(xmalloc(newSize * sizeof(TValue)));\n\n        // Copy existing data\n        if (size) {\n            memcpy(tmp, data, size * sizeof(TValue));\n        }\n        // fill the rest with default value\n        memset(tmp + size, 0, (newSize - size) * sizeof(TValue));\n\n        // free older segment;\n        xfree(data);\n\n        data = tmp;\n        size = newSize;\n    } else if (newLen < length) {\n        memset(data + newLen, 0, (length - newLen) * sizeof(TValue));\n    }\n\n    length = newLen;\n}\n\nvoid LLSegment::set(unsigned idx, TValue v) {\n    if (idx >= Segment::MaxSize)\n        return;\n    if (idx >= length)\n        setLength(idx + 1);\n    data[idx] = v;\n}\n\nTValue LLSegment::pop() {\n    if (length > 0) {\n        --length;\n        TValue value = data[length];\n        data[length] = 0;\n        return value;\n    }\n    return 0;\n}\n\nvoid LLSegment::destroy() {\n    length = size = 0;\n    xfree(data);\n    data = nullptr;\n}\n\nvoid Segment::growByMin(ramint_t minSize) {\n    ramint_t newSize = max(minSize, (ramint_t)growthFactor(size));\n\n    if (size < newSize) {\n        // this will throw if unable to allocate\n        TValue *tmp = (TValue *)(gcAllocateArray(newSize * sizeof(TValue)));\n\n        // Copy existing data\n        if (size)\n            memcpy(tmp, data, size * sizeof(TValue));\n        // fill the rest with default value\n        memset(tmp + size, 0, (newSize - size) * sizeof(TValue));\n\n        data = tmp;\n        size = newSize;\n\n#ifdef DEBUG_BUILD\n        DMESG(\"growBy - after reallocation\");\n        this->print();\n#endif\n    }\n    // else { no shrinking yet; }\n    return;\n}\n\nvoid Segment::ensure(ramint_t newSize) {\n    if (newSize < size) {\n        return;\n    }\n    growByMin(newSize);\n}\n\nvoid Segment::setLength(unsigned newLength) {\n    if (newLength > size) {\n        ensure(newLength);\n    }\n    length = newLength;\n    return;\n}\n\nTValue Segment::pop() {\n#ifdef DEBUG_BUILD\n    DMESG(\"In Segment::pop\");\n    this->print();\n#endif\n\n    if (length > 0) {\n        --length;\n        TValue value = data[length];\n        data[length] = Segment::DefaultValue;\n        return value;\n    }\n    return Segment::DefaultValue;\n}\n\n// this function removes an element at index i and shifts the rest of the elements to\n// left to fill the gap\nTValue Segment::remove(unsigned i) {\n#ifdef DEBUG_BUILD\n    DMESG(\"In Segment::remove index:%d\", i);\n    this->print();\n#endif\n    if (i < length) {\n        // value to return\n        TValue ret = data[i];\n        if (i + 1 < length) {\n            // Move the rest of the elements to fill in the gap.\n            memmove(data + i, data + i + 1, (length - i - 1) * sizeof(void *));\n        }\n        length--;\n        data[length] = Segment::DefaultValue;\n#ifdef DEBUG_BUILD\n        DMESG(\"After Segment::remove index:%d\", i);\n        this->print();\n#endif\n        return ret;\n    }\n    return Segment::DefaultValue;\n}\n\n// this function inserts element value at index i by shifting the rest of the elements right.\nvoid Segment::insert(unsigned i, TValue value) {\n#ifdef DEBUG_BUILD\n    DMESG(\"In Segment::insert index:%d value:%d\", i, value);\n    this->print();\n#endif\n\n    if (i < length) {\n        ensure(length + 1);\n\n        // Move the rest of the elements to fill in the gap.\n        memmove(data + i + 1, data + i, (length - i) * sizeof(void *));\n\n        data[i] = value;\n        length++;\n    } else {\n        // This is insert beyond the length, just call set which will adjust the length\n        set(i, value);\n    }\n#ifdef DEBUG_BUILD\n    DMESG(\"After Segment::insert index:%d\", i);\n    this->print();\n#endif\n}\n\nvoid Segment::print() {\n    DMESG(\"Segment: %p, length: %d, size: %d\", data, (unsigned)length, (unsigned)size);\n    for (unsigned i = 0; i < size; i++) {\n        DMESG(\"-> %d\", (unsigned)(uintptr_t)data[i]);\n    }\n}\n\nvoid Segment::destroy() {\n#ifdef DEBUG_BUILD\n    DMESG(\"In Segment::destroy\");\n    this->print();\n#endif\n    length = size = 0;\n    data = nullptr;\n}\n\nPXT_VTABLE_CTOR(RefCollection) {}\n\nvoid RefCollection::destroy(RefCollection *t) {\n    t->head.destroy();\n}\n\nvoid RefCollection::print(RefCollection *t) {\n    DMESG(\"RefCollection %p size=%d\", t, t->head.getLength());\n    t->head.print();\n}\n\nPXT_VTABLE(RefAction, ValType::Function)\nRefAction::RefAction() : PXT_VTABLE_INIT(RefAction) {}\n\n// fields[] contain captured locals\nvoid RefAction::destroy(RefAction *t) {}\n\nvoid RefAction::print(RefAction *t) {\n#ifdef PXT_VM\n    DMESG(\"RefAction %p pc=%X size=%d\", t, (uint32_t)t->func, t->len);\n#else\n    DMESG(\"RefAction %p pc=%X size=%d\", t, (const uint8_t *)t->func - (const uint8_t *)bytecode,\n          t->len);\n#endif\n}\n\nPXT_VTABLE_CTOR(RefRefLocal) {\n    v = 0;\n}\n\nvoid RefRefLocal::print(RefRefLocal *t) {\n    DMESG(\"RefRefLocal %p v=%p\", t, (void *)t->v);\n}\n\nvoid RefRefLocal::destroy(RefRefLocal *t) {\n    decr(t->v);\n}\n\nPXT_VTABLE_CTOR(RefMap) {}\n\nvoid RefMap::destroy(RefMap *t) {\n    t->keys.destroy();\n    t->values.destroy();\n}\n\nint RefMap::findIdx(String key) {\n    auto len = keys.getLength();\n    auto data = (String *)keys.getData();\n\n    // fast path\n    for (unsigned i = 0; i < len; ++i) {\n        if (data[i] == key)\n            return i;\n    }\n\n    // slow path\n    auto keylen = key->getUTF8Size();\n    auto keydata = key->getUTF8Data();\n    for (unsigned i = 0; i < len; ++i) {\n        auto s = data[i];\n        if (s->getUTF8Size() == keylen && memcmp(keydata, s->getUTF8Data(), keylen) == 0)\n            return i;\n    }\n\n    return -1;\n}\n\nvoid RefMap::print(RefMap *t) {\n    DMESG(\"RefMap %p size=%d\", t, t->keys.getLength());\n}\n\nvoid debugMemLeaks() {}\n\nvoid error(PXT_PANIC code, int subcode) {\n    DMESG(\"Error: %d [%d]\", code, subcode);\n    target_panic(code);\n}\n\n#ifndef PXT_VM\nuint16_t *bytecode;\n#endif\nTValue *globals;\n\nvoid checkStr(bool cond, const char *msg) {\n    if (!cond) {\n        while (true) {\n            // uBit.display.scroll(msg, 100);\n            // uBit.sleep(100);\n        }\n    }\n}\n\n#ifdef PXT_VM\nint templateHash() {\n    return *(int*)&vmImg->infoHeader->hexHash;\n}\n\nint programHash() {\n    return *(int*)&vmImg->infoHeader->programHash;\n}\n\nint getNumGlobals() {\n    return (int)vmImg->infoHeader->allocGlobals;\n}\n\nString programName() {\n    return mkString((char *)vmImg->infoHeader->name);\n}\n#else\nint templateHash() {\n    return ((int *)bytecode)[4];\n}\n\nint programHash() {\n    return ((int *)bytecode)[6];\n}\n\nint getNumGlobals() {\n    return bytecode[16];\n}\n\nString programName() {\n    return ((String *)bytecode)[15];\n}\n#endif\n\n#ifndef PXT_VM\nvoid variantNotSupported(const char *v) {\n    DMESG(\"variant not supported: %s\", v);\n    target_panic(PANIC_VARIANT_NOT_SUPPORTED);\n}\n\nvoid exec_binary(unsigned *pc) {\n    // XXX re-enable once the calibration code is fixed and [editor/embedded.ts]\n    // properly prepends a call to [internal_main].\n    // ::touch_develop::internal_main();\n\n    // unique group for radio based on source hash\n    // ::touch_develop::micro_bit::radioDefaultGroup = programHash();\n\n    unsigned ver = *pc++;\n    checkStr(ver == 0x4210, \":( Bad runtime version\");\n\n    bytecode = *((uint16_t **)pc++); // the actual bytecode is here\n\n    if (((uint32_t *)bytecode)[0] == 0x923B8E71) {\n        variantNotSupported((const char *)bytecode + 16);\n        return;\n    }\n\n    globals = (TValue *)app_alloc(sizeof(TValue) * getNumGlobals());\n    memset(globals, 0, sizeof(TValue) * getNumGlobals());\n\n    // can be any valid address, best in RAM for speed\n    globals[0] = (TValue)&globals;\n\n    // just compare the first word\n    // TODO\n    checkStr(((uint32_t *)bytecode)[0] == 0x923B8E70 && (unsigned)templateHash() == *pc,\n             \":( Failed partial flash\");\n\n    uintptr_t startptr = (uintptr_t)bytecode;\n\n    startptr += 64; // header\n\n    initPerfCounters();\n\n    initRuntime();\n\n    runAction0((Action)startptr);\n\n    pxt::releaseFiber();\n}\n\nvoid start() {\n    exec_binary((unsigned *)functionsAndBytecode);\n}\n#endif\n\n} // namespace pxt\n\nnamespace Array_ {\n//%\nbool isArray(TValue arr) {\n    auto vt = getAnyVTable(arr);\n    return vt && vt->classNo == BuiltInType::RefCollection;\n}\n} // namespace Array_\n\nnamespace pxtrt {\n//% expose\nRefCollection *keysOf(TValue v) {\n    auto r = NEW_GC(RefCollection);\n    MEMDBG(\"mkColl[keys]: => %p\", r);\n    if (getAnyVTable(v) != &RefMap_vtable)\n        return r;\n    auto rm = (RefMap *)v;\n    auto len = rm->keys.getLength();\n    if (!len)\n        return r;\n    registerGCObj(r);\n    r->setLength(len);\n    auto dst = r->getData();\n    memcpy(dst, rm->keys.getData(), len * sizeof(TValue));\n    unregisterGCObj(r);\n    return r;\n}\n//% expose\nTValue mapDeleteByString(RefMap *map, String key) {\n    if (getAnyVTable((TValue)map) != &RefMap_vtable)\n        soft_panic(PANIC_DELETE_ON_CLASS);\n    int i = map->findIdx(key);\n    if (i >= 0) {\n        map->keys.remove(i);\n        map->values.remove(i);\n    }\n    return TAG_TRUE;\n}\n\n} // namespace pxtrt\n",
            "pxt.h": "#ifndef __PXT_H\n#define __PXT_H\n\n#include \"pxtbase.h\"\n\n#include \"CodalConfig.h\"\n#include \"CodalHeapAllocator.h\"\n#include \"CodalDevice.h\"\n#include \"CodalDmesg.h\"\n#include \"ErrorNo.h\"\n#include \"Timer.h\"\n#include \"Matrix4.h\"\n#include \"CodalCompat.h\"\n#include \"CodalComponent.h\"\n#include \"ManagedType.h\"\n#include \"Event.h\"\n#include \"NotifyEvents.h\"\n#include \"Button.h\"\n#include \"CodalFiber.h\"\n#include \"MessageBus.h\"\n#include \"MultiButton.h\"\n\nusing namespace codal;\n\n// codal::ManagedString compat\n#define MSTR(s) codal::ManagedString((s)->data, (s)->length)\n#define PSTR(s) mkString((s).toCharArray(), (s).length())\n\n#include \"pins.h\"\n\n#if CONFIG_ENABLED(DEVICE_USB)\n#include \"hf2.h\"\n#include \"hf2dbg.h\"\n#if CONFIG_ENABLED(DEVICE_MOUSE)\n#include \"HIDMouse.h\"\n#endif\n#if CONFIG_ENABLED(DEVICE_KEYBOARD)\n#include \"HIDKeyboard.h\"\n#endif\n#if CONFIG_ENABLED(DEVICE_JOYSTICK)\n#include \"HIDJoystick.h\"\n#endif\n#endif\n\n#define PXT_COMM_BASE 0x20002000 // 8k in\n\n// old codal compat\n#ifndef REAL_TIME_FUNC\n#define REAL_TIME_FUNC /* */\n#endif\n\nnamespace pxt {\n\n#if CONFIG_ENABLED(DEVICE_USB)\nextern CodalUSB usb;\nextern HF2 hf2;\n#if CONFIG_ENABLED(DEVICE_MOUSE)\nextern USBHIDMouse mouse;\n#endif\n#if CONFIG_ENABLED(DEVICE_KEYBOARD)\nextern USBHIDKeyboard keyboard;\n#endif\n#if CONFIG_ENABLED(DEVICE_JOYSTICK)\nextern USBHIDJoystick joystick;\n#endif\n#endif\n\n// Utility functions\nextern Event lastEvent;\nextern CODAL_TIMER devTimer;\nextern MessageBus devMessageBus;\nextern codal::CodalDevice device;\n\nvoid set_usb_strings(const char *uf2_info);\nextern void (*logJDFrame)(const uint8_t *data);\nextern void (*sendJDFrame)(const uint8_t *data);\n\nstatic inline void raiseEvent(int src, int val) {\n    Event(src, val);\n}\n\n} // namespace pxt\n\nnamespace pins {\nclass CodalSPIProxy;\nclass CodalI2CProxy;\n} // namespace pins\n\ntypedef pins::CodalI2CProxy* I2C_;\ntypedef pins::CodalSPIProxy* SPI_;\n\nnamespace pxt {\ncodal::LowLevelTimer *allocateTimer();\n\n#ifdef CODAL_I2C\nCODAL_I2C* getI2C(DigitalInOutPin sda, DigitalInOutPin scl);\n#endif\nCODAL_SPI* getSPI(DigitalInOutPin mosi, DigitalInOutPin miso, DigitalInOutPin sck);\n#ifdef CODAL_JACDAC_WIRE_SERIAL\nLowLevelTimer* getJACDACTimer();\n#endif\nclass PressureButton;\nuint32_t readButtonMultiplexer(int bits);\nvoid disableButtonMultiplexer();\n}\n\nnamespace serial {\nclass CodalSerialDeviceProxy;\n}\n\ntypedef serial::CodalSerialDeviceProxy* SerialDevice;\n\nnamespace jacdac {\nclass JDProxyDriver;\n} // namespace network\n\ntypedef jacdac::JDProxyDriver* JacDacDriverStatus;\n\n#define DEVICE_ID_BUTTON_SLIDE 3000\n#define DEVICE_ID_MICROPHONE 3001\n#define DEVICE_ID_FIRST_BUTTON 4000\n#define DEVICE_ID_FIRST_TOUCHBUTTON 4100\n\n#define PXT_INTERNAL_KEY_UP 2050\n#define PXT_INTERNAL_KEY_DOWN 2051\n\n#endif",
            "pxt.json": "{\n    \"name\": \"core\",\n    \"description\": \"The STeaMi core library\",\n    \"dependencies\": {},\n    \"files\": [\n        \"README.md\",\n        \"platform.h\",\n        \"platform.cpp\",\n        \"pxt.cpp\",\n        \"pxt.h\",\n        \"pxtbase.h\",\n        \"pxtcore.h\",\n        \"math.ts\",\n        \"dal.d.ts\",\n        \"enums.d.ts\",\n        \"shims.d.ts\",\n        \"pxt-core.d.ts\",\n        \"core.cpp\",\n        \"pxt-helpers.ts\",\n        \"helpers.ts\",\n        \"pxt-python.d.ts\",\n        \"configkeys.h\",\n        \"gc.cpp\",\n        \"codal.cpp\",\n        \"control.ts\",\n        \"control.cpp\",\n        \"controlgc.cpp\",\n        \"perfcounters.ts\",\n        \"interval.ts\",\n        \"console.ts\",\n        \"gcstats.ts\",\n        \"pins.h\",\n        \"pins.cpp\",\n        \"pins.ts\",\n        \"buffer.cpp\",\n        \"buffer.ts\",\n        \"json.ts\",\n        \"poll.ts\",\n        \"pxtparts.json\",\n        \"advmath.cpp\",\n        \"trig.cpp\",\n        \"fixed.ts\",\n        \"templates.ts\",\n        \"loops.cpp\",\n        \"pause.ts\",\n        \"forever.ts\",\n        \"usb.cpp\",\n        \"board.svg\",\n        \"board.json\",\n        \"config.ts\"\n    ],\n    \"testFiles\": [],\n    \"public\": true,\n    \"targetVersions\": {\n        \"target\": \"0.0.2\",\n        \"pxt\": \"10.0.23\"\n    },\n    \"core\": true,\n    \"dalDTS\": {\n        \"compileServiceVariant\": \"codalsteami\",\n        \"excludePrefix\": [\n            \"JD_\",\n            \"USB_\",\n            \"REQUEST_\",\n            \"LIS3DH_\",\n            \"FXOS8700_\",\n            \"HF2_\",\n            \"PXT_REF_TAG_\",\n            \"MS_\",\n            \"SCSI_\",\n            \"MAG_\",\n            \"MAG3\",\n            \"MPU6\",\n            \"MADCTL\",\n            \"MMA8\"\n        ],\n        \"includeDirs\": [\n            \"libraries/codal-core/inc\",\n            \"libraries/codal-stm32-STEAM32_WB55RG/inc\",\n            \"libraries/codal-stm32-STEAM32_WB55RG/model\",\n            \"pxtapp\"\n        ]\n    },\n    \"yotta\": {\n        \"config\": {\n            \"codal\": {\n                \"component_count\": 64,\n                \"dmesg_buffer_size\": 1024\n            }\n        }\n    },\n    \"partial\": true\n}\n",
            "pxtbase.h": "#ifndef __PXTBASE_H\n#define __PXTBASE_H\n\n#pragma GCC diagnostic ignored \"-Wunused-parameter\"\n#pragma GCC diagnostic ignored \"-Wformat\"\n#pragma GCC diagnostic ignored \"-Warray-bounds\"\n\n// needed for gcc6; not sure why\n#undef min\n#undef max\n\n#define NOLOG(...)                                                                                 \\\n    do {                                                                                           \\\n    } while (0)\n\n#define MEMDBG NOLOG\n//#define MEMDBG DMESG\n#define MEMDBG2 NOLOG\n\n#include \"pxtconfig.h\"\n#include \"configkeys.h\"\n\n#ifndef PXT_UTF8\n#define PXT_UTF8 0\n#endif\n\n#if defined(PXT_VM)\n#include <stdint.h>\n#if UINTPTR_MAX == 0xffffffff\n#define PXT32 1\n#elif UINTPTR_MAX == 0xffffffffffffffff\n#define PXT64 1\n#else\n#error \"UINTPTR_MAX has invalid value\"\n#endif\n#endif\n\n#define intcheck(...) check(__VA_ARGS__)\n//#define intcheck(...) do {} while (0)\n\n#ifdef PXT_USE_FLOAT\n#define NUMBER float\n#else\n#define NUMBER double\n#endif\n\n#include <string.h>\n#include <stdint.h>\n#include <math.h>\n\n#ifdef POKY\nvoid *operator new(size_t size, void *ptr);\nvoid *operator new(size_t size);\n#else\n#include <new>\n#endif\n\n#include \"platform.h\"\n#include \"pxtcore.h\"\n\n#ifndef PXT_REGISTER_RESET\n#define PXT_REGISTER_RESET(fn) ((void)0)\n#endif\n\n#define PXT_REFCNT_FLASH 0xfffe\n\n#define CONCAT_1(a, b) a##b\n#define CONCAT_0(a, b) CONCAT_1(a, b)\n// already provided in some platforms, like mbedos\n#ifndef STATIC_ASSERT\n#define STATIC_ASSERT(e) enum { CONCAT_0(_static_assert_, __LINE__) = 1 / ((e) ? 1 : 0) };\n#endif\n\n#ifndef ramint_t\n// this type limits size of arrays\n#if defined(__linux__) || defined(PXT_VM)\n// TODO fix the inline array accesses to take note of this!\n#define ramint_t uint32_t\n#else\n#define ramint_t uint16_t\n#endif\n#endif\n\n#ifndef PXT_IN_ISR\n#define PXT_IN_ISR() (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk)\n#endif\n\n#ifdef POKY\ninline void *operator new(size_t, void *p) {\n    return p;\n}\ninline void *operator new[](size_t, void *p) {\n    return p;\n}\n#endif\n\nnamespace pxt {\n\ntemplate <typename T> inline const T &max(const T &a, const T &b) {\n    if (a < b)\n        return b;\n    return a;\n}\n\ntemplate <typename T> inline const T &min(const T &a, const T &b) {\n    if (a < b)\n        return a;\n    return b;\n}\n\ntemplate <typename T> inline void swap(T &a, T &b) {\n    T tmp = a;\n    a = b;\n    b = tmp;\n}\n\n//\n// Tagged values (assume 4 bytes for now, Cortex-M0)\n//\nstruct TValueStruct {};\ntypedef TValueStruct *TValue;\n\ntypedef TValue TNumber;\ntypedef TValue Action;\ntypedef TValue ImageLiteral;\n\n// To be implemented by the target\nextern \"C\" void target_panic(int error_code);\nextern \"C\" void target_reset();\nvoid sleep_ms(unsigned ms);\nvoid sleep_us(uint64_t us);\nvoid releaseFiber();\nuint64_t current_time_us();\nint current_time_ms();\nvoid initRuntime();\nvoid initSystemTimer();\nvoid sendSerial(const char *data, int len);\nvoid setSendToUART(void (*f)(const char *, int));\nuint64_t getLongSerialNumber();\nvoid registerWithDal(int id, int event, Action a, int flags = 16); // EVENT_LISTENER_DEFAULT_FLAGS\nvoid runInParallel(Action a);\nvoid runForever(Action a);\nvoid waitForEvent(int id, int event);\n//%\nunsigned afterProgramPage();\n//%\nvoid dumpDmesg();\nuint32_t hash_fnv1(const void *data, unsigned len);\n\n// also defined DMESG macro\n// end\n\n#define TAGGED_SPECIAL(n) (TValue)(void *)((n << 2) | 2)\n#define TAG_FALSE TAGGED_SPECIAL(2) // 10\n#define TAG_TRUE TAGGED_SPECIAL(16) // 66\n#define TAG_UNDEFINED (TValue)0\n#define TAG_NULL TAGGED_SPECIAL(1) // 6\n#define TAG_NAN TAGGED_SPECIAL(3)  // 14\n#define TAG_NUMBER(n) (TNumber)(void *)(((uintptr_t)(uint32_t)(n) << 1) | 1)\n#define TAG_NON_VALUE TAGGED_SPECIAL(4) // 18; doesn't represent any JS value\n\n#ifdef PXT_VM\ninline bool isEncodedDouble(uint64_t v) {\n    return (v >> 48) != 0;\n}\n#endif\n\ninline bool isDouble(TValue v) {\n#ifdef PXT64\n    return ((uintptr_t)v >> 48) != 0;\n#else\n    (void)v;\n    return false;\n#endif\n}\n\ninline bool isPointer(TValue v) {\n    return !isDouble(v) && v != 0 && ((intptr_t)v & 3) == 0;\n}\n\ninline bool isTagged(TValue v) {\n    return (!isDouble(v) && ((intptr_t)v & 3)) || !v;\n}\n\ninline bool isInt(TValue v) {\n    return !isDouble(v) && ((intptr_t)v & 1);\n}\n\ninline bool isSpecial(TValue v) {\n    return !isDouble(v) && ((intptr_t)v & 2);\n}\n\ninline bool bothNumbers(TValue a, TValue b) {\n    return !isDouble(a) && !isDouble(b) && ((intptr_t)a & (intptr_t)b & 1);\n}\n\ninline int numValue(TValue n) {\n    return (int)((intptr_t)n >> 1);\n}\n\ninline bool canBeTagged(int v) {\n    (void)v;\n#ifdef PXT_BOX_DEBUG\n    return false;\n#elif defined(PXT64)\n    return true;\n#else\n    return (v << 1) >> 1 == v;\n#endif\n}\n\n// see https://anniecherkaev.com/the-secret-life-of-nan\n\n#define NanBoxingOffset 0x1000000000000LL\n\ntemplate <typename TO, typename FROM> TO bitwise_cast(FROM in) {\n    STATIC_ASSERT(sizeof(TO) == sizeof(FROM));\n    union {\n        FROM from;\n        TO to;\n    } u;\n    u.from = in;\n    return u.to;\n}\n\ninline double decodeDouble(uint64_t v) {\n    return bitwise_cast<double>(v - NanBoxingOffset);\n}\n\n#ifdef PXT64\nSTATIC_ASSERT(sizeof(void *) == 8);\ninline double doubleVal(TValue v) {\n    return bitwise_cast<double>((uint64_t)v - NanBoxingOffset);\n}\n\ninline TValue tvalueFromDouble(double d) {\n    return (TValue)(bitwise_cast<uint64_t>(d) + NanBoxingOffset);\n}\n#else\nSTATIC_ASSERT(sizeof(void *) == 4);\n#endif\n\n// keep in sym with sim/control.ts\ntypedef enum {\n    PANIC_CODAL_OOM = 20,\n    PANIC_GC_OOM = 21,\n    PANIC_GC_TOO_BIG_ALLOCATION = 22,\n    PANIC_CODAL_HEAP_ERROR = 30,\n    PANIC_CODAL_NULL_DEREFERENCE = 40,\n    PANIC_CODAL_USB_ERROR = 50,\n    PANIC_CODAL_HARDWARE_CONFIGURATION_ERROR = 90,\n\n    PANIC_INVALID_BINARY_HEADER = 901,\n    PANIC_OUT_OF_BOUNDS = 902,\n    PANIC_REF_DELETED = 903,\n    PANIC_SIZE = 904,\n    PANIC_INVALID_VTABLE = 905,\n    PANIC_INTERNAL_ERROR = 906,\n    PANIC_NO_SUCH_CONFIG = 907,\n    PANIC_NO_SUCH_PIN = 908,\n    PANIC_INVALID_ARGUMENT = 909,\n    PANIC_MEMORY_LIMIT_EXCEEDED = 910,\n    PANIC_SCREEN_ERROR = 911,\n    PANIC_MISSING_PROPERTY = 912,\n    PANIC_INVALID_IMAGE = 913,\n    PANIC_CALLED_FROM_ISR = 914,\n    PANIC_HEAP_DUMPED = 915,\n    PANIC_STACK_OVERFLOW = 916,\n    PANIC_BLOCKING_TO_STRING = 917,\n    PANIC_VM_ERROR = 918,\n    PANIC_SETTINGS_CLEARED = 920,\n    PANIC_SETTINGS_OVERLOAD = 921,\n    PANIC_SETTINGS_SECRET_MISSING = 922,\n    PANIC_DELETE_ON_CLASS = 923,\n    PANIC_OUT_OF_TIMERS = 924,\n    PANIC_JACDAC = 925,\n    PANIC_MICROPHONE_MISSING = 926,\n    PANIC_VARIANT_NOT_SUPPORTED = 927,\n\n    PANIC_CAST_FIRST = 980,\n    PANIC_CAST_FROM_UNDEFINED = 980,\n    PANIC_CAST_FROM_BOOLEAN = 981,\n    PANIC_CAST_FROM_NUMBER = 982,\n    PANIC_CAST_FROM_STRING = 983,\n    PANIC_CAST_FROM_OBJECT = 984,\n    PANIC_CAST_FROM_FUNCTION = 985,\n    PANIC_CAST_FROM_NULL = 989,\n\n    PANIC_UNHANDLED_EXCEPTION = 999,\n\n} PXT_PANIC;\n\nextern const uintptr_t functionsAndBytecode[];\nextern TValue *globals;\nextern uint16_t *bytecode;\nclass RefRecord;\n\n// Utility functions\n\ntypedef TValue (*RunActionType)(Action a, TValue arg0, TValue arg1, TValue arg2);\n\n#define asmRunAction3 ((RunActionType)(((uintptr_t *)bytecode)[12]))\n\nstatic inline TValue runAction3(Action a, TValue arg0, TValue arg1, TValue arg2) {\n    return asmRunAction3(a, arg0, arg1, 0);\n}\nstatic inline TValue runAction2(Action a, TValue arg0, TValue arg1) {\n    return asmRunAction3(a, arg0, arg1, 0);\n}\nstatic inline TValue runAction1(Action a, TValue arg0) {\n    return asmRunAction3(a, arg0, 0, 0);\n}\nstatic inline TValue runAction0(Action a) {\n    return asmRunAction3(a, 0, 0, 0);\n}\n\nclass RefAction;\nclass BoxedString;\nstruct VTable;\n\n//%\nAction mkAction(int totallen, RefAction *act);\n//% expose\nint templateHash();\n//% expose\nint programHash();\n//% expose\nBoxedString *programName();\n//% expose\nunsigned programSize();\n//%\nint getNumGlobals();\n//%\nRefRecord *mkClassInstance(VTable *vt);\n//%\nvoid debugMemLeaks();\n//%\nvoid anyPrint(TValue v);\n\n//%\nint getConfig(int key, int defl = -1);\n\n//%\nint toInt(TNumber v);\n//%\nunsigned toUInt(TNumber v);\n//%\nNUMBER toDouble(TNumber v);\n//%\nfloat toFloat(TNumber v);\n//%\nTNumber fromDouble(NUMBER r);\n//%\nTNumber fromFloat(float r);\n\n//%\nTNumber fromInt(int v);\n//%\nTNumber fromUInt(unsigned v);\n//%\nTValue fromBool(bool v);\n//%\nbool eq_bool(TValue a, TValue b);\n//%\nbool eqq_bool(TValue a, TValue b);\n\n//%\nvoid failedCast(TValue v, void *addr = NULL);\n//%\nvoid missingProperty(TValue v);\n\nvoid error(PXT_PANIC code, int subcode = 0);\nvoid exec_binary(unsigned *pc);\nvoid start();\n\nstruct HandlerBinding {\n    HandlerBinding *next;\n    int source;\n    int value;\n    Action action;\n#ifndef PXT_CODAL\n    uint32_t flags;\n    struct Event *pending;\n#endif\n};\nHandlerBinding *findBinding(int source, int value);\nHandlerBinding *nextBinding(HandlerBinding *curr, int source, int value);\nvoid setBinding(int source, int value, Action act);\n\n// Legacy stuff; should no longer be used\n//%\nTValue incr(TValue e);\n//%\nvoid decr(TValue e);\n\ninline TValue incr(TValue e) {\n    return e;\n}\ninline void decr(TValue e) {}\n\nclass RefObject;\n\nstatic inline RefObject *incrRC(RefObject *r) {\n    return r;\n}\nstatic inline void decrRC(RefObject *) {}\n\ninline void *ptrOfLiteral(int offset) {\n    return &bytecode[offset];\n}\n\n// Checks if object is ref-counted, and has a custom PXT vtable in front\n// TODO\ninline bool isRefCounted(TValue e) {\n    return isPointer(e);\n}\n\ninline void check(int cond, PXT_PANIC code, int subcode = 0) {\n    if (!cond)\n        error(code, subcode);\n}\n\ninline void oops(int subcode = 0) {\n    target_panic(800 + subcode);\n}\n\nclass RefObject;\n\ntypedef void (*RefObjectMethod)(RefObject *self);\ntypedef unsigned (*RefObjectSizeMethod)(RefObject *self);\ntypedef void *PVoid;\ntypedef void **PPVoid;\n\ntypedef void *Object_;\n\n#define VTABLE_MAGIC 0xF9\n#define VTABLE_MAGIC2 0xF8\n\nenum class ValType : uint8_t {\n    Undefined,\n    Boolean,\n    Number,\n    String,\n    Object,\n    Function,\n};\n\n// keep in sync with pxt-core (search for the type name)\nenum class BuiltInType : uint16_t {\n    BoxedString = 1,\n    BoxedNumber = 2,\n    BoxedBuffer = 3,\n    RefAction = 4,\n    RefImage = 5,\n    RefCollection = 6,\n    RefRefLocal = 7,\n    RefMap = 8,\n    RefMImage = 9,             // microbit-specific\n    MMap = 10,                 // linux, mostly ev3\n    BoxedString_SkipList = 11, // used by VM bytecode representation only\n    BoxedString_ASCII = 12,    // ditto\n    ZPin = 13,\n    User0 = 16,\n};\n\nstruct VTable {\n    uint16_t numbytes;\n    ValType objectType;\n    uint8_t magic;\n#ifdef PXT_VM\n    uint16_t ifaceHashEntries;\n    BuiltInType lastClassNo;\n#else\n    PVoid *ifaceTable;\n#endif\n    BuiltInType classNo;\n    uint16_t reserved;\n    uint32_t ifaceHashMult;\n\n    // we only use the first few methods here; pxt will generate more\n    PVoid methods[8];\n};\n\n//%\nextern const VTable string_inline_ascii_vt;\n#if PXT_UTF8\n//%\nextern const VTable string_inline_utf8_vt;\n//%\nextern const VTable string_cons_vt;\n//%\nextern const VTable string_skiplist16_vt;\n//%\nextern const VTable string_skiplist16_packed_vt;\n#endif\n//%\nextern const VTable buffer_vt;\n//%\nextern const VTable number_vt;\n//%\nextern const VTable RefAction_vtable;\n\n#ifndef PXT_IS_READONLY\n// assume ARM - ram addresses are 0x2000_0000+; flash is either 0x0+ or 0x0800_0000+\n#define PXT_IS_READONLY(v) (isTagged(v) || !((uintptr_t)v >> 28))\n#endif\n\ninline bool isReadOnly(TValue v) {\n    return PXT_IS_READONLY(v);\n}\n\n// A base abstract class for ref-counted objects.\nclass RefObject {\n  public:\n    const VTable *vtable;\n\n    RefObject(const VTable *vt) {\n#if defined(PXT32) && defined(PXT_VM) && !defined(PXT_ESP32)\n        if ((uint32_t)vt & 0xf0000000)\n            target_panic(PANIC_INVALID_VTABLE);\n#endif\n        vtable = vt;\n    }\n\n    void destroyVT();\n    void printVT();\n\n    inline uintptr_t vt() { return (uintptr_t)vtable; }\n    inline void setVT(uintptr_t v) { vtable = (const VTable *)v; }\n\n    inline void ref() {}\n    inline void unref() {}\n    inline bool isReadOnly() { return pxt::isReadOnly((TValue)this); }\n};\n\nclass Segment {\n  private:\n    TValue *data;\n    ramint_t length;\n    ramint_t size;\n\n    // this just gives max value of ramint_t\n    void growByMin(ramint_t minSize);\n    void ensure(ramint_t newSize);\n\n  public:\n    static constexpr ramint_t MaxSize = (((1U << (8 * sizeof(ramint_t) - 1)) - 1) << 1) + 1;\n    static constexpr TValue DefaultValue = TAG_UNDEFINED; // == NULL\n\n    Segment() : data(nullptr), length(0), size(0) {}\n\n    TValue get(unsigned i) { return i < length ? data[i] : NULL; }\n    void set(unsigned i, TValue value);\n\n    unsigned getLength() { return length; };\n    void setLength(unsigned newLength);\n\n    void push(TValue value) { set(length, value); }\n    TValue pop();\n\n    TValue remove(unsigned i);\n    void insert(unsigned i, TValue value);\n\n    void destroy();\n\n    void print();\n\n    TValue *getData() { return data; }\n};\n\n// Low-Level segment using system malloc\nclass LLSegment {\n  private:\n    TValue *data;\n    ramint_t length;\n    ramint_t size;\n\n  public:\n    LLSegment() : data(nullptr), length(0), size(0) {}\n\n    void set(unsigned idx, TValue v);\n    void push(TValue value) { set(length, value); }\n    TValue pop();\n    void destroy();\n    void setLength(unsigned newLen);\n\n    TValue get(unsigned i) { return i < length ? data[i] : NULL; }\n    unsigned getLength() { return length; };\n    TValue *getData() { return data; }\n};\n\n// A ref-counted collection of either primitive or ref-counted objects (String, Image,\n// user-defined record, another collection)\nclass RefCollection : public RefObject {\n  public:\n    Segment head;\n\n    RefCollection();\n\n    static void destroy(RefCollection *coll);\n    static void scan(RefCollection *coll);\n    static unsigned gcsize(RefCollection *coll);\n    static void print(RefCollection *coll);\n\n    unsigned length() { return head.getLength(); }\n    void setLength(unsigned newLength) { head.setLength(newLength); }\n    TValue getAt(int i) { return head.get(i); }\n    TValue *getData() { return head.getData(); }\n};\n\nclass RefMap : public RefObject {\n  public:\n    Segment keys;\n    Segment values;\n\n    RefMap();\n    static void destroy(RefMap *map);\n    static void scan(RefMap *map);\n    static unsigned gcsize(RefMap *coll);\n    static void print(RefMap *map);\n    int findIdx(BoxedString *key);\n};\n\n// A ref-counted, user-defined JS object.\nclass RefRecord : public RefObject {\n  public:\n    // The object is allocated, so that there is space at the end for the fields.\n    TValue fields[];\n\n    RefRecord(VTable *v) : RefObject(v) {}\n\n    TValue ld(int idx);\n    TValue ldref(int idx);\n    void st(int idx, TValue v);\n    void stref(int idx, TValue v);\n};\n\nstatic inline VTable *getVTable(RefObject *r) {\n    return (VTable *)(r->vt() & ~1);\n}\n\nstatic inline VTable *getAnyVTable(TValue v) {\n    if (!isRefCounted(v))\n        return NULL;\n    auto vt = getVTable((RefObject *)v);\n    if (vt->magic == VTABLE_MAGIC)\n        return vt;\n    return NULL;\n}\n\n// these are needed when constructing vtables for user-defined classes\n//%\nvoid RefRecord_destroy(RefRecord *r);\n//%\nvoid RefRecord_print(RefRecord *r);\n//%\nvoid RefRecord_scan(RefRecord *r);\n//%\nunsigned RefRecord_gcsize(RefRecord *r);\n\ntypedef TValue (*ActionCB)(TValue *captured, TValue arg0, TValue arg1, TValue arg2);\n\n// Ref-counted function pointer.\nclass RefAction : public RefObject {\n  public:\n    uint16_t len;\n    uint16_t numArgs;\n#ifdef PXT_VM\n    uint16_t initialLen;\n    uint16_t flags;\n    uintptr_t func;\n#else\n    ActionCB func; // The function pointer\n#endif\n    // fields[] contain captured locals\n    TValue fields[];\n\n    static void destroy(RefAction *act);\n    static void scan(RefAction *act);\n    static unsigned gcsize(RefAction *coll);\n    static void print(RefAction *act);\n\n    RefAction();\n\n    inline void stCore(int idx, TValue v) {\n        // DMESG(\"ST [%d] = %d \", idx, v); this->print();\n        intcheck(0 <= idx && idx < len, PANIC_OUT_OF_BOUNDS, 10);\n        intcheck(fields[idx] == 0, PANIC_OUT_OF_BOUNDS, 11); // only one assignment permitted\n        fields[idx] = v;\n    }\n};\n\n// These two are used to represent locals written from inside inline functions\nclass RefRefLocal : public RefObject {\n  public:\n    TValue v;\n    static void destroy(RefRefLocal *l);\n    static void scan(RefRefLocal *l);\n    static unsigned gcsize(RefRefLocal *l);\n    static void print(RefRefLocal *l);\n    RefRefLocal();\n};\n\ntypedef int color;\n\n// note: this is hardcoded in PXT (hexfile.ts)\n\nclass BoxedNumber : public RefObject {\n  public:\n    NUMBER num;\n    BoxedNumber() : RefObject(&number_vt) {}\n} __attribute__((packed));\n\nclass BoxedString : public RefObject {\n  public:\n    union {\n        struct {\n            uint16_t length; // ==size\n            char data[0];\n        } ascii;\n#if PXT_UTF8\n        struct {\n            uint16_t size;\n            char data[0];\n        } utf8;\n        struct {\n            BoxedString *left;\n            BoxedString *right;\n        } cons;\n        struct {\n            uint16_t size;   // in bytes\n            uint16_t length; // in characters\n            uint16_t *list;\n        } skip;\n        struct {\n            uint16_t size;   // in bytes\n            uint16_t length; // in characters\n            uint16_t list[0];\n        } skip_pack;\n#endif\n    };\n\n#if PXT_UTF8\n    uintptr_t runMethod(int idx) {\n        return ((uintptr_t(*)(BoxedString *))vtable->methods[idx])(this);\n    }\n    const char *getUTF8Data() { return (const char *)runMethod(4); }\n    uint32_t getUTF8Size() { return (uint32_t)runMethod(5); }\n    // in characters\n    uint32_t getLength() { return (uint32_t)runMethod(6); }\n    const char *getUTF8DataAt(uint32_t pos) {\n        auto meth = ((const char *(*)(BoxedString *, uint32_t))vtable->methods[7]);\n        return meth(this, pos);\n    }\n#else\n    const char *getUTF8Data() { return ascii.data; }\n    uint32_t getUTF8Size() { return ascii.length; }\n    uint32_t getLength() { return ascii.length; }\n    const char *getUTF8DataAt(uint32_t pos) { return pos < ascii.length ? ascii.data + pos : NULL; }\n#endif\n\n    TNumber charCodeAt(int pos);\n\n    BoxedString(const VTable *vt) : RefObject(vt) {}\n};\n\n// cross version compatible way of accessing string data\n#ifndef PXT_STRING_DATA\n#define PXT_STRING_DATA(str) str->getUTF8Data()\n#endif\n\n// cross version compatible way of accessing string length\n#ifndef PXT_STRING_DATA_LENGTH\n#define PXT_STRING_DATA_LENGTH(str) str->getUTF8Size()\n#endif\n\nclass BoxedBuffer : public RefObject {\n  public:\n    // data needs to be word-aligned, so we use 32 bits for length\n    int length;\n    uint8_t data[0];\n    BoxedBuffer() : RefObject(&buffer_vt) {}\n\n    static bool isInstance(TValue v);\n};\n\n// cross version compatible way of access data field\n#ifndef PXT_BUFFER_DATA\n#define PXT_BUFFER_DATA(buffer) buffer->data\n#endif\n\n// cross version compatible way of access data length\n#ifndef PXT_BUFFER_LENGTH\n#define PXT_BUFFER_LENGTH(buffer) buffer->length\n#endif\n\n#ifndef PXT_CREATE_BUFFER\n#define PXT_CREATE_BUFFER(data, len) pxt::mkBuffer(data, len)\n#endif\n\n// Legacy format:\n// the first byte of data indicates the format - currently 0xE1 or 0xE4 to 1 or 4 bit bitmaps\n// second byte indicates width in pixels\n// third byte indicates the height (which should also match the size of the buffer)\n// just like ordinary buffers, these can be layed out in flash\n\n// Current format:\n// 87 BB WW WW HH HH 00 00 DATA\n// that is: 0x87, 0x01 or 0x04 - bpp, width in little endian, height, 0x00, 0x00 followed by data\n// for 4 bpp images, rows are word-aligned (as in legacy)\n\n#define IMAGE_HEADER_MAGIC 0x87\n\nstruct ImageHeader {\n    uint8_t magic;\n    uint8_t bpp;\n    uint16_t width;\n    uint16_t height;\n    uint16_t padding;\n    uint8_t pixels[0];\n};\n\nclass RefImage : public RefObject {\n  public:\n    BoxedBuffer *buffer;\n    uint32_t revision;\n\n    RefImage(BoxedBuffer *buf);\n    RefImage(uint32_t sz);\n\n    void setBuffer(BoxedBuffer *b);\n\n    uint8_t *data() { return buffer->data; }\n    int length() { return (int)buffer->length; }\n\n    ImageHeader *header() { return (ImageHeader *)buffer->data; }\n    int pixLength() { return length() - sizeof(ImageHeader); }\n\n    int width() { return header()->width; }\n    int height() { return header()->height; }\n    int wordHeight();\n    int bpp() { return header()->bpp; }\n\n    bool hasPadding() { return (height() & 0x7) != 0; }\n\n    uint8_t *pix() { return header()->pixels; }\n\n    int byteHeight() {\n        if (bpp() == 1)\n            return (height() + 7) >> 3;\n        else if (bpp() == 4)\n            return ((height() * 4 + 31) >> 5) << 2;\n        else {\n            oops(21);\n            return -1;\n        }\n    }\n\n    uint8_t *pix(int x, int y) {\n        uint8_t *d = &pix()[byteHeight() * x];\n        if (y) {\n            if (bpp() == 1)\n                d += y >> 3;\n            else if (bpp() == 4)\n                d += y >> 1;\n        }\n        return d;\n    }\n\n    uint8_t fillMask(color c);\n    bool inRange(int x, int y);\n    void clamp(int *x, int *y);\n    void makeWritable();\n\n    static void destroy(RefImage *t);\n    static void scan(RefImage *t);\n    static unsigned gcsize(RefImage *t);\n    static void print(RefImage *t);\n};\n\nRefImage *mkImage(int w, int h, int bpp);\n\ntypedef BoxedBuffer *Buffer;\ntypedef BoxedString *String;\ntypedef RefImage *Image_;\n\nuint32_t toRealUTF8(String str, uint8_t *dst);\n\n// keep in sync with github/pxt/pxtsim/libgeneric.ts\nenum class NumberFormat {\n    Int8LE = 1,\n    UInt8LE,\n    Int16LE,\n    UInt16LE,\n    Int32LE,\n    Int8BE,\n    UInt8BE,\n    Int16BE,\n    UInt16BE,\n    Int32BE,\n\n    UInt32LE,\n    UInt32BE,\n    Float32LE,\n    Float64LE,\n    Float32BE,\n    Float64BE,\n};\n\n// this will, unlike mkStringCore, UTF8-canonicalize the data\nString mkString(const char *data, int len = -1);\n// data can be NULL in both cases\nBuffer mkBuffer(const void *data, int len);\nString mkStringCore(const char *data, int len = -1);\n\nTNumber getNumberCore(uint8_t *buf, int size, NumberFormat format);\nvoid setNumberCore(uint8_t *buf, int size, NumberFormat format, TNumber value);\n\nvoid seedRandom(unsigned seed);\nvoid seedAddRandom(unsigned seed);\n// max is inclusive\nunsigned getRandom(unsigned max);\n\nValType valType(TValue v);\n\n// this is equivalent to JS `throw v`; it will leave\n// the current function(s), all the way until the nearest try block and\n// ignore all destructors (think longjmp())\nvoid throwValue(TValue v);\n\nvoid registerGC(TValue *root, int numwords = 1);\nvoid unregisterGC(TValue *root, int numwords = 1);\nvoid registerGCPtr(TValue ptr);\nvoid unregisterGCPtr(TValue ptr);\nstatic inline void registerGCObj(RefObject *ptr) {\n    registerGCPtr((TValue)ptr);\n}\nstatic inline void unregisterGCObj(RefObject *ptr) {\n    unregisterGCPtr((TValue)ptr);\n}\nvoid gc(int flags);\n\nstruct StackSegment {\n    void *top;\n    void *bottom;\n    StackSegment *next;\n};\n\n#define NUM_TRY_FRAME_REGS 3\nstruct TryFrame {\n    TryFrame *parent;\n    uintptr_t registers[NUM_TRY_FRAME_REGS];\n};\n\nstruct ThreadContext {\n    TValue *globals;\n    StackSegment stack;\n    TryFrame *tryFrame;\n    TValue thrownValue;\n#ifdef PXT_GC_THREAD_LIST\n    ThreadContext *next;\n    ThreadContext *prev;\n#endif\n};\n\n#ifdef PXT_GC_THREAD_LIST\nextern ThreadContext *threadContexts;\nvoid *threadAddressFor(ThreadContext *, void *sp);\n#endif\n\nvoid releaseThreadContext(ThreadContext *ctx);\nThreadContext *getThreadContext();\nvoid setThreadContext(ThreadContext *ctx);\n\n#ifndef PXT_GC_THREAD_LIST\nvoid gcProcessStacks(int flags);\n#endif\n\nvoid gcProcess(TValue v);\nvoid gcFreeze();\n\n#ifdef PXT_VM\nvoid gcStartup();\nvoid gcPreStartup();\n#endif\n\nvoid coreReset();\nvoid gcReset();\nvoid systemReset();\n\nvoid doNothing();\n\nvoid *gcAllocate(int numbytes);\nvoid *gcAllocateArray(int numbytes);\nextern \"C\" void *app_alloc(int numbytes);\nextern \"C\" void *app_free(void *ptr);\nextern \"C\" void *app_alloc_at(void *at, int numbytes);\nvoid gcPreAllocateBlock(uint32_t sz);\n\nint redirectSamples(int16_t *dst, int numsamples, int samplerate);\n\n#ifdef PXT64\n#define TOWORDS(bytes) (((bytes) + 7) >> 3)\n#else\n#define TOWORDS(bytes) (((bytes) + 3) >> 2)\n#endif\n\n#ifndef PXT_VM\n#define soft_panic target_panic\n#endif\n\nextern int debugFlags;\n\nenum class PerfCounters {\n    GC,\n};\n\n#ifdef PXT_PROFILE\n#ifndef PERF_NOW\n#error \"missing platform timer support\"\n#endif\n\n#ifndef PERF_NOW_MASK\n#define PERF_NOW_MASK 0xffffffff\n#endif\n\n#ifndef PERF_NOW_SCALE\n#define PERF_NOW_SCALE 1\n#endif\n\nstruct PerfCounter {\n    uint32_t value;\n    uint32_t numstops;\n    uint32_t start;\n};\n\nextern struct PerfCounter *perfCounters;\n\nvoid initPerfCounters();\n//%\nvoid dumpPerfCounters();\n//%\nvoid startPerfCounter(PerfCounters n);\n//%\nvoid stopPerfCounter(PerfCounters n);\n#else\ninline void startPerfCounter(PerfCounters n) {}\ninline void stopPerfCounter(PerfCounters n) {}\ninline void initPerfCounters() {}\ninline void dumpPerfCounters() {}\n#endif\n\n// Handling of built-in string literals (like \"[Object]\", \"true\" etc.).\n\n// This has the same layout as BoxedString, but has statically allocated buffer\ntemplate <size_t N> struct BoxedStringLayout {\n    const void *vtable;\n    uint16_t size;\n    const char data[N];\n};\n\ntemplate <size_t N> constexpr size_t _boxedStringLen(char const (&)[N]) {\n    return N;\n}\n\n// strings defined here as used as (String)name\n#define PXT_DEF_STRING(name, val)                                                                  \\\n    const BoxedStringLayout<_boxedStringLen(val)> name[1] = {                                      \\\n        {&pxt::string_inline_ascii_vt, _boxedStringLen(val) - 1, val}};\n\n// bigger value - less memory, but slower\n// 16/20 keeps s.length and s.charCodeAt(i) at about 200 cycles (for actual unicode strings),\n// which is similar to amortized allocation time\n#define PXT_STRING_SKIP_INCR 16 // needs to be power of 2; needs to be kept in sync with compiler\n#define PXT_STRING_MIN_SKIP                                                                        \\\n    20 // min. size of string to use skip list; static code has its own limit\n\n#define PXT_NUM_SKIP_ENTRIES(p) ((p)->skip.length / PXT_STRING_SKIP_INCR)\n#define PXT_SKIP_DATA_IND(p) ((const char *)(p->skip.list + PXT_NUM_SKIP_ENTRIES(p)))\n#define PXT_SKIP_DATA_PACK(p) ((const char *)(p->skip_pack.list + PXT_NUM_SKIP_ENTRIES(p)))\n\n} // namespace pxt\n\nusing namespace pxt;\n\nnamespace numops {\n//%\nString toString(TValue v);\n//%\nint toBool(TValue v);\n//%\nint toBoolDecr(TValue v);\n} // namespace numops\n\nnamespace pxt {\ninline bool toBoolQuick(TValue v) {\n    if (v == TAG_TRUE)\n        return true;\n    if (v == TAG_FALSE || v == TAG_UNDEFINED || v == TAG_NULL)\n        return false;\n    return numops::toBool(v);\n}\n} // namespace pxt\n\nnamespace pxtrt {\n//%\nRefMap *mkMap();\n//%\nTValue mapGetByString(RefMap *map, String key);\n//%\nint lookupMapKey(String key);\n//%\nTValue mapGet(RefMap *map, unsigned key);\n//% expose\nvoid mapSetByString(RefMap *map, String key, TValue val);\n//%\nvoid mapSet(RefMap *map, unsigned key, TValue val);\n} // namespace pxtrt\n\nnamespace pins {\nBuffer createBuffer(int size);\n}\n\nnamespace String_ {\n//%\nint compare(String a, String b);\n} // namespace String_\n\nnamespace Array_ {\n//%\nRefCollection *mk();\n//%\nint length(RefCollection *c);\n//%\nvoid setLength(RefCollection *c, int newLength);\n//%\nvoid push(RefCollection *c, TValue x);\n//%\nTValue pop(RefCollection *c);\n//%\nTValue getAt(RefCollection *c, int x);\n//%\nvoid setAt(RefCollection *c, int x, TValue y);\n//%\nTValue removeAt(RefCollection *c, int x);\n//%\nvoid insertAt(RefCollection *c, int x, TValue value);\n//%\nint indexOf(RefCollection *c, TValue x, int start);\n//%\nbool removeElement(RefCollection *c, TValue x);\n} // namespace Array_\n\n#define NEW_GC(T, ...) new (gcAllocate(sizeof(T))) T(__VA_ARGS__)\n\n// The ARM Thumb generator in the JavaScript code is parsing\n// the hex file and looks for the magic numbers as present here.\n//\n// Then it fetches function pointer addresses from there.\n//\n// The vtable pointers are there, so that the ::emptyData for various types\n// can be patched with the right vtable.\n//\n#define PXT_SHIMS_BEGIN                                                                            \\\n    namespace pxt {                                                                                \\\n    const uintptr_t functionsAndBytecode[]                                                         \\\n        __attribute__((aligned(0x20))) = {0x08010801, 0x42424242, 0x08010801, 0x8de9d83e,\n\n#define PXT_SHIMS_END                                                                              \\\n    }                                                                                              \\\n    ;                                                                                              \\\n    }\n\n#if !defined(X86_64) && !defined(PXT_VM)\n#pragma GCC diagnostic ignored \"-Wpmf-conversions\"\n#endif\n\n#ifdef PXT_VM\n#define DEF_VTABLE(name, tp, valtype, ...)                                                         \\\n    const VTable name = {sizeof(tp), valtype, VTABLE_MAGIC, 0, BuiltInType::tp, BuiltInType::tp,   \\\n                         0,          0,       {__VA_ARGS__}};\n#define DEF_VTABLE_EXT(name, tp, valtype, ...)                                                     \\\n    const VTable name = {sizeof(tp), valtype, VTABLE_MAGIC2, 0, BuiltInType::tp, BuiltInType::tp,  \\\n                         0,          0,       {__VA_ARGS__}};\n#else\n#define DEF_VTABLE(name, tp, valtype, ...)                                                         \\\n    const VTable name = {sizeof(tp), valtype, VTABLE_MAGIC, 0, BuiltInType::tp,                    \\\n                         0,          0,       {__VA_ARGS__}};\n#define DEF_VTABLE_EXT(name, tp, valtype, ...)                                                     \\\n    const VTable name = {sizeof(tp), valtype, VTABLE_MAGIC2, 0, BuiltInType::tp,                   \\\n                         0,          0,       {__VA_ARGS__}};\n#endif\n\n#define PXT_VTABLE(classname, valtp)                                                               \\\n    DEF_VTABLE(classname##_vtable, classname, valtp, (void *)&classname::destroy,                  \\\n               (void *)&classname::print, (void *)&classname::scan, (void *)&classname::gcsize)\n\n#define PXT_EXT_VTABLE(classname)                                                                  \\\n    static int classname##_gcsize() { return sizeof(classname); }                                  \\\n    DEF_VTABLE_EXT(classname##_vtable, classname, ValType::Object, (void *)&pxt::doNothing,        \\\n                   (void *)&pxt::anyPrint, (void *)&pxt::doNothing, (void *)&classname##_gcsize)\n\n#define PXT_VTABLE_INIT(classname) RefObject(&classname##_vtable)\n\n#define PXT_VTABLE_CTOR(classname)                                                                 \\\n    PXT_VTABLE(classname, ValType::Object)                                                         \\\n    classname::classname() : PXT_VTABLE_INIT(classname)\n\n#define PXT_MAIN                                                                                   \\\n    int main() {                                                                                   \\\n        pxt::start();                                                                              \\\n        return 0;                                                                                  \\\n    }\n\n#define PXT_FNPTR(x) (uintptr_t)(void *)(x)\n\n#define PXT_ABI(...)\n\n#define JOIN(a, b) a##b\n/// Defines getClassName() function to fetch the singleton\n#define SINGLETON(ClassName)                                                                       \\\n    static ClassName *JOIN(inst, ClassName);                                                       \\\n    ClassName *JOIN(get, ClassName)() {                                                            \\\n        if (!JOIN(inst, ClassName))                                                                \\\n            JOIN(inst, ClassName) = new ClassName();                                               \\\n        return JOIN(inst, ClassName);                                                              \\\n    }\n\n/// Defines getClassName() function to fetch the singleton if PIN present\n#define SINGLETON_IF_PIN(ClassName, pin)                                                           \\\n    static ClassName *JOIN(inst, ClassName);                                                       \\\n    ClassName *JOIN(get, ClassName)() {                                                            \\\n        if (!JOIN(inst, ClassName) && LOOKUP_PIN(pin))                                             \\\n            JOIN(inst, ClassName) = new ClassName();                                               \\\n        return JOIN(inst, ClassName);                                                              \\\n    }\n\n#ifdef PXT_VM\n#include \"vm.h\"\n#endif\n\n#endif\n",
            "pxtcore.h": "#ifndef __PXTCORE_H\n#define __PXTCORE_H\n\n#include \"CodalDmesg.h\"\n#include \"CodalHeapAllocator.h\"\n\n#define PXT_CODAL 1\n\n#define itoa(a, b) codal::itoa(a, b)\n\n#define GC_GET_HEAP_SIZE() device_heap_size(0)\n#define GC_STACK_BASE DEVICE_STACK_BASE\n#define xmalloc device_malloc\n#define xfree device_free\n\n// on most devices we allocate the entire heap at once, so large allocs should work\n// if they don't you just get the regular out of memory instead of alloc too large\n#define GC_MAX_ALLOC_SIZE (128 * 1024)\n\n#endif",
            "pxtparts.json": "{\n    \"buttonpair\": {\n        \"simulationBehavior\": \"buttonpair\",\n        \"visual\": {\n            \"builtIn\": \"buttonpair\",\n            \"width\": 75,\n            \"height\": 45,\n            \"pinDistance\": 15,\n            \"pinLocations\": [\n                {\n                    \"x\": 0,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 30,\n                    \"y\": 45\n                },\n                {\n                    \"x\": 45,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 75,\n                    \"y\": 45\n                }\n            ]\n        },\n        \"numberOfPins\": 4,\n        \"pinDefinitions\": [\n            {\n                \"target\": \"P14\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            },\n            {\n                \"target\": \"ground\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            },\n            {\n                \"target\": \"P15\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            },\n            {\n                \"target\": \"ground\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            }\n        ],\n        \"instantiation\": {\n            \"kind\": \"singleton\"\n        },\n        \"assembly\": [\n            {\n                \"part\": true\n            },\n            {\n                \"pinIndices\": [\n                    0,\n                    1\n                ]\n            },\n            {\n                \"pinIndices\": [\n                    2,\n                    3\n                ]\n            }\n        ]\n    },\n    \"microservo\": {\n        \"simulationBehavior\": \"microservo\",\n        \"visual\": {\n            \"builtIn\": \"microservo\",\n            \"width\": 74.85,\n            \"height\": 200,\n            \"pinDistance\": 10,\n            \"pinLocations\": [\n                {\n                    \"x\": 30,\n                    \"y\": 5\n                },\n                {\n                    \"x\": 37,\n                    \"y\": 5\n                },\n                {\n                    \"x\": 45,\n                    \"y\": 5\n                }\n            ]\n        },\n        \"numberOfPins\": 3,\n        \"pinDefinitions\": [\n            {\n                \"target\": {\n                    \"pinInstantiationIdx\": 0\n                },\n                \"style\": \"croc\",\n                \"orientation\": \"+Z\"\n            },\n            {\n                \"target\": \"threeVolt\",\n                \"style\": \"croc\",\n                \"orientation\": \"+Z\"\n            },\n            {\n                \"target\": \"ground\",\n                \"style\": \"croc\",\n                \"orientation\": \"+Z\"\n            }\n        ],\n        \"instantiations\": [\n            {\n                \"kind\": \"function\",\n                \"fullyQualifiedName\": \"pins.servoWritePin,pins.servoSetPulse,PwmOnlyPin.servoWrite,PwmOnlyPin.servoSetPulse,servos.Servo.setAngle,servos.Servo.run,servos.Servo.setPulse\",\n                \"argumentRoles\": [\n                    {\n                        \"pinInstantiationIdx\": 0,\n                        \"partParameter\": \"name\"\n                    }\n                ]\n            }\n        ],\n        \"assembly\": [\n            {\n                \"part\": true,\n                \"pinIndices\": [\n                    2\n                ]\n            },\n            {\n                \"pinIndices\": [\n                    0,\n                    1\n                ]\n            }\n        ]\n    },\n    \"neopixel\": {\n        \"simulationBehavior\": \"neopixel\",\n        \"visual\": {\n            \"builtIn\": \"neopixel\",\n            \"width\": 58,\n            \"height\": 113,\n            \"pinDistance\": 9,\n            \"pinLocations\": [\n                {\n                    \"x\": 10,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 19,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 28,\n                    \"y\": 0\n                }\n            ]\n        },\n        \"numberOfPins\": 3,\n        \"pinDefinitions\": [\n            {\n                \"target\": {\n                    \"pinInstantiationIdx\": 0\n                },\n                \"style\": \"croc\",\n                \"orientation\": \"+Z\"\n            },\n            {\n                \"target\": \"threeVolt\",\n                \"style\": \"croc\",\n                \"orientation\": \"+Z\"\n            },\n            {\n                \"target\": \"ground\",\n                \"style\": \"croc\",\n                \"orientation\": \"+Z\"\n            }\n        ],\n        \"instantiation\": {\n            \"kind\": \"function\",\n            \"fullyQualifiedName\": \"neopixel.create\",\n            \"argumentRoles\": [\n                {\n                    \"pinInstantiationIdx\": 0,\n                    \"partParameter\": \"pin\"\n                },\n                {\n                    \"partParameter\": \"mode\"\n                }\n            ]\n        },\n        \"assembly\": [\n            {\n                \"part\": true,\n                \"pinIndices\": [\n                    2\n                ]\n            },\n            {\n                \"pinIndices\": [\n                    0,\n                    1\n                ]\n            }\n        ]\n    },\n    \"ledmatrix\": {\n        \"visual\": {\n            \"builtIn\": \"ledmatrix\",\n            \"width\": 105,\n            \"height\": 105,\n            \"pinDistance\": 15,\n            \"pinLocations\": [\n                {\n                    \"x\": 0,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 15,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 30,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 45,\n                    \"y\": 0\n                },\n                {\n                    \"x\": 105,\n                    \"y\": 105\n                },\n                {\n                    \"x\": 0,\n                    \"y\": 105\n                },\n                {\n                    \"x\": 15,\n                    \"y\": 105\n                },\n                {\n                    \"x\": 30,\n                    \"y\": 105\n                },\n                {\n                    \"x\": 45,\n                    \"y\": 105\n                },\n                {\n                    \"x\": 60,\n                    \"y\": 0\n                }\n            ]\n        },\n        \"simulationBehavior\": \"ledmatrix\",\n        \"numberOfPins\": 10,\n        \"instantiation\": {\n            \"kind\": \"singleton\"\n        },\n        \"pinDefinitions\": [\n            {\n                \"target\": \"P6\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\",\n                \"colorGroup\": 0\n            },\n            {\n                \"target\": \"P7\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\",\n                \"colorGroup\": 0\n            },\n            {\n                \"target\": \"P8\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\",\n                \"colorGroup\": 0\n            },\n            {\n                \"target\": \"P9\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\",\n                \"colorGroup\": 0\n            },\n            {\n                \"target\": \"P10\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\",\n                \"colorGroup\": 0\n            },\n            {\n                \"target\": \"P12\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\",\n                \"colorGroup\": 1\n            },\n            {\n                \"target\": \"P13\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\",\n                \"colorGroup\": 1\n            },\n            {\n                \"target\": \"P16\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\",\n                \"colorGroup\": 1\n            },\n            {\n                \"target\": \"P19\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\",\n                \"colorGroup\": 1\n            },\n            {\n                \"target\": \"P20\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\",\n                \"colorGroup\": 1\n            }\n        ],\n        \"assembly\": [\n            {\n                \"part\": true\n            },\n            {\n                \"pinIndices\": [\n                    0,\n                    1,\n                    2,\n                    3,\n                    4\n                ]\n            },\n            {\n                \"pinIndices\": [\n                    5,\n                    6,\n                    7,\n                    8,\n                    9\n                ]\n            }\n        ]\n    },\n    \"headphone\": {\n        \"numberOfPins\": 2,\n        \"visual\": {\n            \"image\": \"parts/headphone.svg\",\n            \"width\": 142,\n            \"height\": 180,\n            \"pinDistance\": 20,\n            \"pinLocations\": [\n                {\n                    \"x\": 17,\n                    \"y\": 11\n                },\n                {\n                    \"x\": 55,\n                    \"y\": 50\n                }\n            ]\n        },\n        \"pinDefinitions\": [\n            {\n                \"target\": \"P0\",\n                \"style\": \"croc\",\n                \"orientation\": \"Y\"\n            },\n            {\n                \"target\": \"ground\",\n                \"style\": \"croc\",\n                \"orientation\": \"Y\"\n            }\n        ],\n        \"instantiation\": {\n            \"kind\": \"singleton\"\n        },\n        \"assembly\": [\n            {\n                \"part\": true,\n                \"pinIndices\": [\n                    0\n                ]\n            },\n            {\n                \"pinIndices\": [\n                    1\n                ]\n            }\n        ]\n    },\n    \"speaker\": {\n        \"numberOfPins\": 2,\n        \"visual\": {\n            \"image\": \"parts/speaker.svg\",\n            \"width\": 500,\n            \"height\": 500,\n            \"pinDistance\": 70,\n            \"pinLocations\": [\n                {\n                    \"x\": 180,\n                    \"y\": 135\n                },\n                {\n                    \"x\": 320,\n                    \"y\": 135\n                }\n            ]\n        },\n        \"pinDefinitions\": [\n            {\n                \"target\": \"P0\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            },\n            {\n                \"target\": \"ground\",\n                \"style\": \"male\",\n                \"orientation\": \"-Z\"\n            }\n        ],\n        \"instantiation\": {\n            \"kind\": \"singleton\"\n        },\n        \"assembly\": [\n            {\n                \"part\": true,\n                \"pinIndices\": [\n                    0\n                ]\n            },\n            {\n                \"pinIndices\": [\n                    1\n                ]\n            }\n        ]\n    }\n}",
            "shims.d.ts": "// Auto-generated. Do not edit.\ndeclare namespace control {\n\n    /**\n     * Gets the number of milliseconds elapsed since power on.\n     */\n    //% help=control/millis weight=50\n    //% blockId=control_running_time block=\"millis (ms)\" shim=control::millis\n    function millis(): int32;\n\n    /**\n     * Gets current time in microseconds. Overflows every ~18 minutes.\n     */\n    //% shim=control::micros\n    function micros(): int32;\n\n    /**\n     * Schedules code that run in the background.\n     */\n    //% help=control/in-background blockAllowMultiple=1 afterOnStart=true\n    //% blockId=\"control_in_background\" block=\"run in background\" blockGap=8 shim=control::inBackground\n    function inBackground(a: () => void): void;\n\n    /**\n     * Registers an event handler.\n     */\n    //% weight=20 blockGap=8 blockId=\"control_on_event\" block=\"on event|from\n    //% src=control_event_source_id|with value %value=control_event_value_id\" % help=control/on-event %\n    //% blockExternalInputs=1 flags.defl=0 shim=control::onEvent\n    function onEvent(src: int32, value: int32, handler: () => void, flags?: int32): void;\n\n    /**\n     * Blocks the calling thread until the specified event is raised.\n     */\n    //% help=control/wait-for-event async\n    //% blockId=control_wait_for_event block=\"wait for event|from %src|with value %value\" shim=control::waitForEvent\n    function waitForEvent(src: int32, value: int32): void;\n\n    /**\n     * Announce that an event happened to registered handlers.\n     * @param src ID of the MicroBit Component that generated the event\n     * @param value Component specific code indicating the cause of the event.\n     */\n    //% weight=21 blockGap=12 blockId=\"control_raise_event\"\n    //% help=control/raise-event\n    //% block=\"raise event|from %src|with value %value\" blockExternalInputs=1 shim=control::raiseEvent\n    function raiseEvent(src: int32, value: int32): void;\n\n    /**\n     * Gets the value of the last event executed on the bus\n     */\n    //% blockId=control_event_value\" block=\"event value\"\n    //% help=control/event-value\n    //% weight=18 shim=control::eventValue\n    function eventValue(): int32;\n\n    /**\n     * Gets the timestamp of the last event executed on the bus\n     */\n    //% blockId=control_event_timestamp\" block=\"event timestamp\"\n    //% help=control/event-timestamp\n    //% weight=19 blockGap=8 shim=control::eventTimestamp\n    function eventTimestamp(): int32;\n\n    /**\n     * Determine the version of system software currently running.\n     */\n    //% blockId=\"control_device_dal_version\" block=\"device dal version\"\n    //% help=control/device-dal-version shim=control::deviceDalVersion\n    function deviceDalVersion(): string;\n\n    /**\n     * Allocates the next user notification event\n     */\n    //% help=control/allocate-notify-event shim=control::allocateNotifyEvent\n    function allocateNotifyEvent(): int32;\n\n    /**\n     *\n     */\n    //% shim=control::__log\n    function __log(priority: int32, text: string): void;\n\n    /** Write a message to DMESG debugging buffer. */\n    //% shim=control::dmesg\n    function dmesg(s: string): void;\n\n    /** Write a message and value (pointer) to DMESG debugging buffer. */\n    //% shim=control::dmesgPtr\n    function dmesgPtr(str: string, ptr: Object): void;\n}\ndeclare namespace control {\n\n    /**\n     * Force GC and dump basic information about heap.\n     */\n    //% shim=control::gc\n    function gc(): void;\n\n    /**\n     * Force GC and halt waiting for debugger to do a full heap dump.\n     */\n    //% shim=control::heapDump\n    function heapDump(): void;\n\n    /**\n     * Set flags used when connecting an external debugger.\n     */\n    //% shim=control::setDebugFlags\n    function setDebugFlags(flags: int32): void;\n\n    /**\n     * Record a heap snapshot to debug memory leaks.\n     */\n    //% shim=control::heapSnapshot\n    function heapSnapshot(): void;\n\n    /**\n     * Return true if profiling is enabled in the current build.\n     */\n    //% shim=control::profilingEnabled\n    function profilingEnabled(): boolean;\n}\ndeclare namespace pins {\n\n    /**\n     * Get a pin by configuration id (DAL.CFG_PIN...)\n     */\n    //% shim=pins::pinByCfg\n    function pinByCfg(key: int32): DigitalInOutPin;\n\n    /**\n     * Create a new zero-initialized buffer.\n     * @param size number of bytes in the buffer\n     */\n    //% shim=pins::createBuffer\n    function createBuffer(size: int32): Buffer;\n\n    /**\n     * Get the duration of the last pulse in microseconds. This function should be called from a\n     * ``onPulsed`` handler.\n     */\n    //% help=pins/pulse-duration blockGap=8\n    //% blockId=pins_pulse_duration block=\"pulse duration (µs)\"\n    //% weight=19 shim=pins::pulseDuration\n    function pulseDuration(): int32;\n}\n\n\n\n    //% indexerGet=BufferMethods::getByte indexerSet=BufferMethods::setByte\ndeclare interface Buffer {\n    /**\n     * Reads an unsigned byte at a particular location\n     */\n    //% shim=BufferMethods::getUint8\n    getUint8(off: int32): int32;\n\n    /**\n     * Returns false when the buffer can be written to.\n     */\n    //% shim=BufferMethods::isReadOnly\n    isReadOnly(): boolean;\n\n    /**\n     * Writes an unsigned byte at a particular location\n     */\n    //% shim=BufferMethods::setUint8\n    setUint8(off: int32, v: int32): void;\n\n    /**\n     * Write a number in specified format in the buffer.\n     */\n    //% shim=BufferMethods::setNumber\n    setNumber(format: NumberFormat, offset: int32, value: number): void;\n\n    /**\n     * Read a number in specified format from the buffer.\n     */\n    //% shim=BufferMethods::getNumber\n    getNumber(format: NumberFormat, offset: int32): number;\n\n    /** Returns the length of a Buffer object. */\n    //% property shim=BufferMethods::length\n    length: int32;\n\n    /**\n     * Fill (a fragment) of the buffer with given value.\n     */\n    //% offset.defl=0 length.defl=-1 shim=BufferMethods::fill\n    fill(value: int32, offset?: int32, length?: int32): void;\n\n    /**\n     * Return a copy of a fragment of a buffer.\n     */\n    //% offset.defl=0 length.defl=-1 shim=BufferMethods::slice\n    slice(offset?: int32, length?: int32): Buffer;\n\n    /**\n     * Shift buffer left in place, with zero padding.\n     * @param offset number of bytes to shift; use negative value to shift right\n     * @param start start offset in buffer. Default is 0.\n     * @param length number of elements in buffer. If negative, length is set as the buffer length minus\n     * start. eg: -1\n     */\n    //% start.defl=0 length.defl=-1 shim=BufferMethods::shift\n    shift(offset: int32, start?: int32, length?: int32): void;\n\n    /**\n     * Convert a buffer to string assuming UTF8 encoding\n     */\n    //% shim=BufferMethods::toString\n    toString(): string;\n\n    /**\n     * Convert a buffer to its hexadecimal representation.\n     */\n    //% shim=BufferMethods::toHex\n    toHex(): string;\n\n    /**\n     * Rotate buffer left in place.\n     * @param offset number of bytes to shift; use negative value to shift right\n     * @param start start offset in buffer. Default is 0.\n     * @param length number of elements in buffer. If negative, length is set as the buffer length minus\n     * start. eg: -1\n     */\n    //% start.defl=0 length.defl=-1 shim=BufferMethods::rotate\n    rotate(offset: int32, start?: int32, length?: int32): void;\n\n    /**\n     * Write contents of `src` at `dstOffset` in current buffer.\n     */\n    //% shim=BufferMethods::write\n    write(dstOffset: int32, src: Buffer): void;\n\n    /**\n     * Compute k-bit FNV-1 non-cryptographic hash of the buffer.\n     */\n    //% shim=BufferMethods::hash\n    hash(bits: int32): uint32;\n}\ndeclare namespace control {\n\n    /**\n     * Create a new zero-initialized buffer.\n     * @param size number of bytes in the buffer\n     */\n    //% deprecated=1 shim=control::createBuffer\n    function createBuffer(size: int32): Buffer;\n\n    /**\n     * Create a new buffer with UTF8-encoded string\n     * @param str the string to put in the buffer\n     */\n    //% deprecated=1 shim=control::createBufferFromUTF8\n    function createBufferFromUTF8(str: string): Buffer;\n}\ndeclare namespace loops {\n\n    /**\n     * Repeats the code forever in the background. On each iteration, allows other codes to run.\n     * @param body code to execute\n     */\n    //% help=loops/forever weight=100 afterOnStart=true deprecated=true\n    //% blockId=forever_deprecated block=\"forever\" blockAllowMultiple=1 shim=loops::forever\n    function forever(a: () => void): void;\n\n    /**\n     * Pause for the specified time in milliseconds\n     * @param ms how long to pause for, eg: 100, 200, 500, 1000, 2000\n     */\n    //% help=loops/pause weight=99 deprecated=true\n    //% async block=\"pause %pause=timePicker|ms\"\n    //% blockId=device_pause_deprecated shim=loops::pause\n    function pause(ms: int32): void;\n}\ndeclare namespace control {\n\n    /**\n     * Determines if the USB has been enumerated.\n     */\n    //% shim=control::isUSBInitialized\n    function isUSBInitialized(): boolean;\n}\n\n// Auto-generated. Do not edit. Really.\n",
            "templates.ts": "/**\n * Tagged hex literal converter\n */\n//% shim=@hex\nfunction hex(lits: any, ...args: any[]): Buffer { return null }\n",
            "trig.cpp": "#include \"pxtbase.h\"\n#include <limits.h>\n#include <stdlib.h>\n\nusing namespace std;\n\nnamespace Math_ {\n\n#define SINGLE(op) return fromDouble(::op(toDouble(x)));\n\n//%\nTNumber atan2(TNumber y, TNumber x) {\n    return fromDouble(::atan2(toDouble(y), toDouble(x)));\n}\n\n//%\nTNumber tan(TNumber x){SINGLE(tan)}\n\n//%\nTNumber sin(TNumber x){SINGLE(sin)}\n\n//%\nTNumber cos(TNumber x){SINGLE(cos)}\n\n//%\nTNumber atan(TNumber x){SINGLE(atan)}\n\n//%\nTNumber asin(TNumber x){SINGLE(asin)}\n\n//%\nTNumber acos(TNumber x){SINGLE(acos)}\n\n//%\nTNumber sqrt(TNumber x){SINGLE(sqrt)}\n\n}",
            "usb.cpp": "#include \"pxt.h\"\n\n#if CONFIG_ENABLED(DEVICE_USB)\n#include \"uf2format.h\"\n\nnamespace pxt {\nCodalUSB usb;\n\n// share the buffer; we will crash anyway if someone talks to us over both at the same time\nHF2_Buffer hf2buf;\nHF2 hf2(hf2buf);\n#ifdef HF2_HID\nHF2 hf2hid(hf2buf);\n#endif\nDummyIface dummyIface;\n\n#if CONFIG_ENABLED(DEVICE_MOUSE)\nUSBHIDMouse mouse;\n#endif\n#if CONFIG_ENABLED(DEVICE_KEYBOARD)\nUSBHIDKeyboard keyboard;\n#endif\n#if CONFIG_ENABLED(DEVICE_JOYSTICK)\nUSBHIDJoystick joystick;\n#endif\n\nstatic const DeviceDescriptor device_desc = {\n    0x12,   // bLength\n    0x01,   // bDescriptorType\n    0x0210, // bcdUSBL\n\n    // Class etc specified per-interface\n    0x00, 0x00, 0x00,\n\n    0x40, // bMaxPacketSize0\n    USB_DEFAULT_VID, USB_DEFAULT_PID,\n    0x4202, // bcdDevice - leave unchanged for the HF2 to work\n    0x01,   // iManufacturer\n    0x02,   // iProduct\n    0x03,   // SerialNumber\n    0x01    // bNumConfigs\n};\n\nstatic void start_usb() {\n    // start USB with a delay, so that user code can add new interfaces if needed\n    // (eg USB HID keyboard, or MSC)\n    fiber_sleep(500);\n    usb.start();\n}\n\nvoid platform_usb_init() __attribute__((weak));\nvoid platform_usb_init() {}\n\nvoid set_usb_strings(const char *uf2_info) {\n    static const char *string_descriptors[3];\n    static char serial[12];\n    itoa(target_get_serial() & 0x7fffffff, serial);\n\n    auto model = strstr(uf2_info, \"Model: \");\n    if (model) {\n        model += 7;\n        auto end = model;\n        while (*end && *end != '\\n' && *end != '\\r')\n            end++;\n        auto len = end - model;\n        auto dev = (char *)app_alloc(len + 10);\n        memcpy(dev, model, len);\n        strcpy(dev + len, \" (app)\");\n        // try to split into manufacturer and\n        auto sep = strstr(dev, \" / \");\n        if (sep) {\n            *sep = '\\0';\n            string_descriptors[0] = dev;\n            string_descriptors[1] = sep + 3;\n        } else {\n            string_descriptors[0] = dev;\n            string_descriptors[1] = dev;\n        }\n    } else {\n        string_descriptors[0] = \"Unknown Corp.\";\n        string_descriptors[1] = \"PXT Device (app)\";\n    }\n\n    string_descriptors[2] = serial;\n    usb.stringDescriptors = string_descriptors;\n}\n\nvoid usb_init() {\n    usb.deviceDescriptor = &device_desc;\n    set_usb_strings(UF2_INFO_TXT);\n\n    platform_usb_init();\n\n    usb.add(hf2);\n\n#ifdef HF2_HID\n    hf2hid.useHID = true;\n    usb.add(hf2hid);\n#else\n    // the WINUSB descriptors don't seem to work if there's only one interface\n    // so we add a dummy interface\n    usb.add(dummyIface);\n#endif\n\n#if CONFIG_ENABLED(DEVICE_MOUSE)\n    usb.add(mouse);\n#endif\n#if CONFIG_ENABLED(DEVICE_KEYBOARD)\n    usb.add(keyboard);\n#endif\n#if CONFIG_ENABLED(DEVICE_JOYSTICK)\n    usb.add(joystick);\n#endif\n\n    create_fiber(start_usb);\n}\n\n} // namespace pxt\n\n#else\nnamespace pxt {\nvoid usb_init() {}\n} // namespace pxt\n#endif\n\nnamespace control {\n/**\n * Determines if the USB has been enumerated.\n */\n//%\nbool isUSBInitialized() {\n#if CONFIG_ENABLED(DEVICE_USB)\n    return pxt::usb.isInitialised();\n#else\n    return false;\n#endif\n}\n} // namespace control\n\nnamespace pxt {\nstatic void (*pSendToUART)(const char *data, int len) = NULL;\nvoid setSendToUART(void (*f)(const char *, int)) {\n    pSendToUART = f;\n}\n\nvoid sendSerial(const char *data, int len) {\n#if CONFIG_ENABLED(DEVICE_USB)\n    hf2.sendSerial(data, len);\n#if HF2_HID\n    hf2hid.sendSerial(data, len);\n#endif\n#endif\n    if (pSendToUART)\n        pSendToUART(data, len);\n}\n\nvoid dumpDmesg() {\n    sendSerial(\"\\nDMESG:\\n\", 8);\n    sendSerial(codalLogStore.buffer, codalLogStore.ptr);\n    sendSerial(\"\\n\\n\", 2);\n}\n\nvoid (*logJDFrame)(const uint8_t *data);\nvoid (*sendJDFrame)(const uint8_t *data);\n\n} // namespace pxt"
        }
    },
    "apiInfo": {
        "libs/core": {
            "apis": {
                "byQName": {
                    "Math": {
                        "kind": 5,
                        "retType": "",
                        "attributes": {
                            "jsDoc": "More complex operations with numbers."
                        }
                    },
                    "Math.E": {
                        "kind": 4,
                        "retType": "number"
                    },
                    "Math.LN2": {
                        "kind": 4,
                        "retType": "number"
                    },
                    "Math.LN10": {
                        "kind": 4,
                        "retType": "number"
                    },
                    "Math.LOG2E": {
                        "kind": 4,
                        "retType": "number"
                    },
                    "Math.LOG10E": {
                        "kind": 4,
                        "retType": "number"
                    },
                    "Math.PI": {
                        "kind": 4,
                        "retType": "number"
                    },
                    "Math.SQRT1_2": {
                        "kind": 4,
                        "retType": "number"
                    },
                    "Math.SQRT2": {
                        "kind": 4,
                        "retType": "number"
                    },
                    "Math.map": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "paramDefl": {
                                "fromHigh": "1023",
                                "toHigh": "4"
                            },
                            "help": "math/map",
                            "weight": 10,
                            "blockGap": "8",
                            "blockId": "math_map",
                            "block": "map %value|from low %fromLow|high %fromHigh|to low %toLow|high %toHigh",
                            "inlineInputMode": "inline",
                            "paramHelp": {
                                "value": "value to map in ranges",
                                "fromLow": "the lower bound of the value's current range",
                                "fromHigh": "the upper bound of the value's current range, eg: 1023",
                                "toLow": "the lower bound of the value's target range",
                                "toHigh": "the upper bound of the value's target range, eg: 4"
                            },
                            "jsDoc": "Re-maps a number from one range to another. That is, a value of ``from low`` would get mapped to ``to low``, a value of ``from high`` to ``to high``, values in-between to values in-between, etc.",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "label",
                                        "text": "map ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "value",
                                        "ref": false
                                    },
                                    {
                                        "kind": "break"
                                    },
                                    {
                                        "kind": "label",
                                        "text": "from low ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "fromLow",
                                        "ref": false
                                    },
                                    {
                                        "kind": "break"
                                    },
                                    {
                                        "kind": "label",
                                        "text": "high ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "fromHigh",
                                        "ref": false
                                    },
                                    {
                                        "kind": "break"
                                    },
                                    {
                                        "kind": "label",
                                        "text": "to low ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "toLow",
                                        "ref": false
                                    },
                                    {
                                        "kind": "break"
                                    },
                                    {
                                        "kind": "label",
                                        "text": "high ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "toHigh",
                                        "ref": false
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "value",
                                        "ref": false
                                    },
                                    {
                                        "kind": "param",
                                        "name": "fromLow",
                                        "ref": false
                                    },
                                    {
                                        "kind": "param",
                                        "name": "fromHigh",
                                        "ref": false
                                    },
                                    {
                                        "kind": "param",
                                        "name": "toLow",
                                        "ref": false
                                    },
                                    {
                                        "kind": "param",
                                        "name": "toHigh",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "parameters": [
                            {
                                "name": "value",
                                "description": "value to map in ranges"
                            },
                            {
                                "name": "fromLow",
                                "description": "the lower bound of the value's current range"
                            },
                            {
                                "name": "fromHigh",
                                "description": "the upper bound of the value's current range, eg: 1023",
                                "default": "1023"
                            },
                            {
                                "name": "toLow",
                                "description": "the lower bound of the value's target range"
                            },
                            {
                                "name": "toHigh",
                                "description": "the upper bound of the value's target range, eg: 4",
                                "default": "4"
                            }
                        ]
                    },
                    "Math.constrain": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "help": "math/constrain",
                            "weight": 11,
                            "blockGap": "8",
                            "blockId": "math_constrain_value",
                            "block": "constrain %value|between %low|and %high",
                            "paramHelp": {
                                "x": "the number to constrain, all data types",
                                "y": "the lower end of the range, all data types",
                                "z": "the upper end of the range, all data types"
                            },
                            "jsDoc": "Constrains a number to be within a range",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "label",
                                        "text": "constrain ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "value",
                                        "ref": false
                                    },
                                    {
                                        "kind": "break"
                                    },
                                    {
                                        "kind": "label",
                                        "text": "between ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "low",
                                        "ref": false
                                    },
                                    {
                                        "kind": "break"
                                    },
                                    {
                                        "kind": "label",
                                        "text": "and ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "high",
                                        "ref": false
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "value",
                                        "ref": false
                                    },
                                    {
                                        "kind": "param",
                                        "name": "low",
                                        "ref": false
                                    },
                                    {
                                        "kind": "param",
                                        "name": "high",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "parameters": [
                            {
                                "name": "value"
                            },
                            {
                                "name": "low"
                            },
                            {
                                "name": "high"
                            }
                        ]
                    },
                    "Math.isin": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "help": "math/isin",
                            "weight": 11,
                            "advanced": true,
                            "blockGap": "8",
                            "paramHelp": {
                                "theta": "input angle from 0-255"
                            },
                            "jsDoc": "Returns the sine of an input angle. This is an 8-bit approximation."
                        },
                        "parameters": [
                            {
                                "name": "theta",
                                "description": "input angle from 0-255"
                            }
                        ]
                    },
                    "Math.icos": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "help": "math/icos",
                            "weight": 10,
                            "advanced": true,
                            "blockGap": "8",
                            "paramHelp": {
                                "theta": "input angle from 0-255"
                            },
                            "jsDoc": "Returns the cosine of an input angle. This is an 8-bit approximation."
                        },
                        "parameters": [
                            {
                                "name": "theta",
                                "description": "input angle from 0-255"
                            }
                        ]
                    },
                    "Number": {
                        "kind": 5,
                        "retType": "",
                        "extendsTypes": ["Number"]
                    },
                    "Number.EPSILON": {
                        "kind": 4,
                        "retType": "number"
                    },
                    "DAL": {
                        "kind": 6,
                        "retType": "DAL",
                        "extendsTypes": ["DAL", "Number"]
                    },
                    "NumberFormat": {
                        "kind": 6,
                        "retType": "NumberFormat",
                        "extendsTypes": ["NumberFormat", "Number"]
                    },
                    "NumberFormat.Int8LE": {
                        "retType": "NumberFormat.Int8LE",
                        "extendsTypes": ["NumberFormat.Int8LE", "Number"],
                        "pyQName": "NumberFormat.INT8_LE"
                    },
                    "NumberFormat.UInt8LE": {
                        "retType": "NumberFormat.UInt8LE",
                        "extendsTypes": ["NumberFormat.UInt8LE", "Number"],
                        "pyQName": "NumberFormat.UINT8_LE"
                    },
                    "NumberFormat.Int16LE": {
                        "retType": "NumberFormat.Int16LE",
                        "extendsTypes": ["NumberFormat.Int16LE", "Number"],
                        "pyQName": "NumberFormat.INT16_LE"
                    },
                    "NumberFormat.UInt16LE": {
                        "retType": "NumberFormat.UInt16LE",
                        "extendsTypes": ["NumberFormat.UInt16LE", "Number"],
                        "pyQName": "NumberFormat.UINT16_LE"
                    },
                    "NumberFormat.Int32LE": {
                        "retType": "NumberFormat.Int32LE",
                        "extendsTypes": ["NumberFormat.Int32LE", "Number"],
                        "pyQName": "NumberFormat.INT32_LE"
                    },
                    "NumberFormat.Int8BE": {
                        "retType": "NumberFormat.Int8BE",
                        "extendsTypes": ["NumberFormat.Int8BE", "Number"],
                        "pyQName": "NumberFormat.INT8_BE"
                    },
                    "NumberFormat.UInt8BE": {
                        "retType": "NumberFormat.UInt8BE",
                        "extendsTypes": ["NumberFormat.UInt8BE", "Number"],
                        "pyQName": "NumberFormat.UINT8_BE"
                    },
                    "NumberFormat.Int16BE": {
                        "retType": "NumberFormat.Int16BE",
                        "extendsTypes": ["NumberFormat.Int16BE", "Number"],
                        "pyQName": "NumberFormat.INT16_BE"
                    },
                    "NumberFormat.UInt16BE": {
                        "retType": "NumberFormat.UInt16BE",
                        "extendsTypes": ["NumberFormat.UInt16BE", "Number"],
                        "pyQName": "NumberFormat.UINT16_BE"
                    },
                    "NumberFormat.Int32BE": {
                        "retType": "NumberFormat.Int32BE",
                        "extendsTypes": ["NumberFormat.Int32BE", "Number"],
                        "pyQName": "NumberFormat.INT32_BE"
                    },
                    "NumberFormat.UInt32LE": {
                        "retType": "NumberFormat.UInt32LE",
                        "extendsTypes": ["NumberFormat.UInt32LE", "Number"],
                        "pyQName": "NumberFormat.UINT32_LE"
                    },
                    "NumberFormat.UInt32BE": {
                        "retType": "NumberFormat.UInt32BE",
                        "extendsTypes": ["NumberFormat.UInt32BE", "Number"],
                        "pyQName": "NumberFormat.UINT32_BE"
                    },
                    "NumberFormat.Float32LE": {
                        "retType": "NumberFormat.Float32LE",
                        "extendsTypes": ["NumberFormat.Float32LE", "Number"],
                        "pyQName": "NumberFormat.FLOAT32_LE"
                    },
                    "NumberFormat.Float64LE": {
                        "retType": "NumberFormat.Float64LE",
                        "extendsTypes": ["NumberFormat.Float64LE", "Number"],
                        "pyQName": "NumberFormat.FLOAT64_LE"
                    },
                    "NumberFormat.Float32BE": {
                        "retType": "NumberFormat.Float32BE",
                        "extendsTypes": ["NumberFormat.Float32BE", "Number"],
                        "pyQName": "NumberFormat.FLOAT32_BE"
                    },
                    "NumberFormat.Float64BE": {
                        "retType": "NumberFormat.Float64BE",
                        "extendsTypes": ["NumberFormat.Float64BE", "Number"],
                        "pyQName": "NumberFormat.FLOAT64_BE"
                    },
                    "PerfCounters": {
                        "kind": 6,
                        "retType": "PerfCounters",
                        "extendsTypes": ["PerfCounters", "Number"]
                    },
                    "PerfCounters.GC": {
                        "retType": "PerfCounters",
                        "extendsTypes": ["PerfCounters.GC", "Number"]
                    },
                    "EventFlags": {
                        "kind": 6,
                        "retType": "EventFlags",
                        "extendsTypes": ["EventFlags", "Number"]
                    },
                    "EventFlags.QueueIfBusy": {
                        "retType": "EventFlags.QueueIfBusy",
                        "extendsTypes": ["EventFlags.QueueIfBusy", "Number"],
                        "pyQName": "EventFlags.QUEUE_IF_BUSY"
                    },
                    "EventFlags.DropIfBusy": {
                        "retType": "EventFlags.DropIfBusy",
                        "extendsTypes": ["EventFlags.DropIfBusy", "Number"],
                        "pyQName": "EventFlags.DROP_IF_BUSY"
                    },
                    "EventFlags.Reentrant": {
                        "retType": "EventFlags.Reentrant",
                        "extendsTypes": ["EventFlags.Reentrant", "Number"],
                        "pyQName": "EventFlags.REENTRANT"
                    },
                    "control": {
                        "kind": 5,
                        "retType": "",
                        "attributes": {
                            "weight": 90,
                            "color": "#FF5722",
                            "icon": "",
                            "advanced": true,
                            "jsDoc": "Program controls and events."
                        }
                    },
                    "control.millis": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "help": "control/millis",
                            "weight": 50,
                            "blockId": "control_running_time",
                            "block": "millis (ms)",
                            "jsDoc": "Gets the number of milliseconds elapsed since power on.",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "label",
                                        "text": "millis (ms)",
                                        "style": []
                                    }
                                ],
                                "parameters": []
                            }
                        },
                        "parameters": []
                    },
                    "control.micros": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "jsDoc": "Gets current time in microseconds. Overflows every ~18 minutes."
                        },
                        "parameters": []
                    },
                    "control.inBackground": {
                        "kind": -3,
                        "attributes": {
                            "help": "control/in-background",
                            "blockAllowMultiple": "1",
                            "afterOnStart": true,
                            "blockId": "control_in_background",
                            "block": "run in background",
                            "blockGap": "8",
                            "jsDoc": "Schedules code that run in the background.",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "label",
                                        "text": "run in background",
                                        "style": []
                                    }
                                ],
                                "parameters": []
                            }
                        },
                        "parameters": [
                            {
                                "name": "a",
                                "type": "() => void",
                                "handlerParameters": []
                            }
                        ],
                        "pyQName": "control.in_background"
                    },
                    "control.onEvent": {
                        "kind": -3,
                        "attributes": {
                            "paramDefl": {
                                "flags": "0"
                            },
                            "weight": 20,
                            "blockGap": "8",
                            "blockId": "control_on_event",
                            "block": "\"on",
                            "event": "true",
                            "src": "control_event_source_id|with",
                            "value": "true",
                            "blockExternalInputs": "1",
                            "explicitDefaults": ["flags"],
                            "inlineInputMode": "external",
                            "jsDoc": "Registers an event handler.",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "label",
                                        "text": "\"on",
                                        "style": []
                                    }
                                ],
                                "parameters": []
                            }
                        },
                        "parameters": [
                            {
                                "name": "src"
                            },
                            {
                                "name": "value"
                            },
                            {
                                "name": "handler",
                                "type": "() => void",
                                "handlerParameters": []
                            },
                            {
                                "name": "flags",
                                "initializer": "0",
                                "default": "0"
                            }
                        ],
                        "pyQName": "control.on_event"
                    },
                    "control.waitForEvent": {
                        "kind": -3,
                        "attributes": {
                            "callingConvention": 1,
                            "help": "control/wait-for-event",
                            "async": "true",
                            "blockId": "control_wait_for_event",
                            "block": "wait for event|from %src|with value %value",
                            "jsDoc": "Blocks the calling thread until the specified event is raised.",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "label",
                                        "text": "wait for event",
                                        "style": []
                                    },
                                    {
                                        "kind": "break"
                                    },
                                    {
                                        "kind": "label",
                                        "text": "from ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "src",
                                        "ref": false
                                    },
                                    {
                                        "kind": "break"
                                    },
                                    {
                                        "kind": "label",
                                        "text": "with value ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "value",
                                        "ref": false
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "src",
                                        "ref": false
                                    },
                                    {
                                        "kind": "param",
                                        "name": "value",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "parameters": [
                            {
                                "name": "src"
                            },
                            {
                                "name": "value"
                            }
                        ],
                        "pyQName": "control.wait_for_event"
                    },
                    "control.raiseEvent": {
                        "kind": -3,
                        "attributes": {
                            "weight": 21,
                            "blockGap": "12",
                            "blockId": "control_raise_event",
                            "help": "control/raise-event",
                            "block": "raise event|from %src|with value %value",
                            "blockExternalInputs": "1",
                            "inlineInputMode": "external",
                            "paramHelp": {
                                "src": "ID of the MicroBit Component that generated the event",
                                "value": "Component specific code indicating the cause of the event."
                            },
                            "jsDoc": "Announce that an event happened to registered handlers.",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "label",
                                        "text": "raise event",
                                        "style": []
                                    },
                                    {
                                        "kind": "break"
                                    },
                                    {
                                        "kind": "label",
                                        "text": "from ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "src",
                                        "ref": false
                                    },
                                    {
                                        "kind": "break"
                                    },
                                    {
                                        "kind": "label",
                                        "text": "with value ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "value",
                                        "ref": false
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "src",
                                        "ref": false
                                    },
                                    {
                                        "kind": "param",
                                        "name": "value",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "parameters": [
                            {
                                "name": "src",
                                "description": "ID of the MicroBit Component that generated the event"
                            },
                            {
                                "name": "value",
                                "description": "Component specific code indicating the cause of the event."
                            }
                        ],
                        "pyQName": "control.raise_event"
                    },
                    "control.eventValue": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "blockId": "control_event_value\"",
                            "block": "event value",
                            "help": "control/event-value",
                            "weight": 18,
                            "jsDoc": "Gets the value of the last event executed on the bus",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "label",
                                        "text": "event value",
                                        "style": []
                                    }
                                ],
                                "parameters": []
                            }
                        },
                        "parameters": [],
                        "pyQName": "control.event_value"
                    },
                    "control.eventTimestamp": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "blockId": "control_event_timestamp\"",
                            "block": "event timestamp",
                            "help": "control/event-timestamp",
                            "weight": 19,
                            "blockGap": "8",
                            "jsDoc": "Gets the timestamp of the last event executed on the bus",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "label",
                                        "text": "event timestamp",
                                        "style": []
                                    }
                                ],
                                "parameters": []
                            }
                        },
                        "parameters": [],
                        "pyQName": "control.event_timestamp"
                    },
                    "control.deviceDalVersion": {
                        "kind": -3,
                        "retType": "string",
                        "attributes": {
                            "blockId": "control_device_dal_version",
                            "block": "device dal version",
                            "help": "control/device-dal-version",
                            "jsDoc": "Determine the version of system software currently running.",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "label",
                                        "text": "device dal version",
                                        "style": []
                                    }
                                ],
                                "parameters": []
                            }
                        },
                        "parameters": [],
                        "pyQName": "control.device_dal_version"
                    },
                    "control.allocateNotifyEvent": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "help": "control/allocate-notify-event",
                            "jsDoc": "Allocates the next user notification event"
                        },
                        "parameters": [],
                        "pyQName": "control.allocate_notify_event"
                    },
                    "control.__log": {
                        "kind": -3,
                        "parameters": [
                            {
                                "name": "priority"
                            },
                            {
                                "name": "text",
                                "type": "string"
                            }
                        ]
                    },
                    "control.dmesg": {
                        "kind": -3,
                        "attributes": {
                            "jsDoc": "Write a message to DMESG debugging buffer."
                        },
                        "parameters": [
                            {
                                "name": "s",
                                "type": "string"
                            }
                        ]
                    },
                    "control.dmesgPtr": {
                        "kind": -3,
                        "attributes": {
                            "jsDoc": "Write a message and value (pointer) to DMESG debugging buffer."
                        },
                        "parameters": [
                            {
                                "name": "str",
                                "type": "string"
                            },
                            {
                                "name": "ptr",
                                "type": "Object"
                            }
                        ],
                        "pyQName": "control.dmesg_ptr"
                    },
                    "control.gc": {
                        "kind": -3,
                        "attributes": {
                            "jsDoc": "Force GC and dump basic information about heap."
                        },
                        "parameters": []
                    },
                    "control.heapDump": {
                        "kind": -3,
                        "attributes": {
                            "jsDoc": "Force GC and halt waiting for debugger to do a full heap dump."
                        },
                        "parameters": [],
                        "pyQName": "control.heap_dump"
                    },
                    "control.setDebugFlags": {
                        "kind": -3,
                        "attributes": {
                            "jsDoc": "Set flags used when connecting an external debugger."
                        },
                        "parameters": [
                            {
                                "name": "flags"
                            }
                        ],
                        "pyQName": "control.set_debug_flags"
                    },
                    "control.heapSnapshot": {
                        "kind": -3,
                        "attributes": {
                            "jsDoc": "Record a heap snapshot to debug memory leaks."
                        },
                        "parameters": [],
                        "pyQName": "control.heap_snapshot"
                    },
                    "control.profilingEnabled": {
                        "kind": -3,
                        "retType": "boolean",
                        "attributes": {
                            "jsDoc": "Return true if profiling is enabled in the current build."
                        },
                        "parameters": [],
                        "pyQName": "control.profiling_enabled"
                    },
                    "pins": {
                        "kind": 5,
                        "retType": "",
                        "attributes": {
                            "color": "#A80000",
                            "weight": 85,
                            "icon": "",
                            "advanced": true,
                            "groups": ["other", "Servo", "i2c"],
                            "jsDoc": "Control currents in Pins for analog/digital signals, servos, i2c, ..."
                        }
                    },
                    "pins.pinByCfg": {
                        "kind": -3,
                        "retType": "DigitalInOutPin",
                        "attributes": {
                            "jsDoc": "Get a pin by configuration id (DAL.CFG_PIN...)"
                        },
                        "parameters": [
                            {
                                "name": "key"
                            }
                        ],
                        "pyQName": "pins.pin_by_cfg"
                    },
                    "pins.createBuffer": {
                        "kind": -3,
                        "retType": "Buffer",
                        "attributes": {
                            "paramHelp": {
                                "size": "number of bytes in the buffer"
                            },
                            "jsDoc": "Create a new zero-initialized buffer."
                        },
                        "parameters": [
                            {
                                "name": "size",
                                "description": "number of bytes in the buffer"
                            }
                        ],
                        "pyQName": "bytearray"
                    },
                    "pins.pulseDuration": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "help": "pins/pulse-duration",
                            "blockGap": "8",
                            "blockId": "pins_pulse_duration",
                            "block": "pulse duration (µs)",
                            "weight": 19,
                            "jsDoc": "Get the duration of the last pulse in microseconds. This function should be called from a\n``onPulsed`` handler.",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "label",
                                        "text": "pulse duration (µs)",
                                        "style": []
                                    }
                                ],
                                "parameters": []
                            }
                        },
                        "parameters": [],
                        "pyQName": "pins.pulse_duration"
                    },
                    "Buffer": {
                        "kind": 5,
                        "retType": ""
                    },
                    "Buffer.getUint8": {
                        "kind": -1,
                        "retType": "number",
                        "attributes": {
                            "jsDoc": "Reads an unsigned byte at a particular location"
                        },
                        "parameters": [
                            {
                                "name": "off"
                            }
                        ],
                        "isInstance": true,
                        "pyQName": "Buffer.get_uint8"
                    },
                    "Buffer.isReadOnly": {
                        "kind": -1,
                        "retType": "boolean",
                        "attributes": {
                            "jsDoc": "Returns false when the buffer can be written to."
                        },
                        "parameters": [],
                        "isInstance": true,
                        "pyQName": "Buffer.is_read_only"
                    },
                    "Buffer.setUint8": {
                        "kind": -1,
                        "attributes": {
                            "jsDoc": "Writes an unsigned byte at a particular location"
                        },
                        "parameters": [
                            {
                                "name": "off"
                            },
                            {
                                "name": "v"
                            }
                        ],
                        "isInstance": true,
                        "pyQName": "Buffer.set_uint8"
                    },
                    "Buffer.setNumber": {
                        "kind": -1,
                        "attributes": {
                            "jsDoc": "Write a number in specified format in the buffer."
                        },
                        "parameters": [
                            {
                                "name": "format",
                                "type": "NumberFormat",
                                "isEnum": true
                            },
                            {
                                "name": "offset"
                            },
                            {
                                "name": "value"
                            }
                        ],
                        "isInstance": true,
                        "pyQName": "Buffer.set_number"
                    },
                    "Buffer.getNumber": {
                        "kind": -1,
                        "retType": "number",
                        "attributes": {
                            "jsDoc": "Read a number in specified format from the buffer."
                        },
                        "parameters": [
                            {
                                "name": "format",
                                "type": "NumberFormat",
                                "isEnum": true
                            },
                            {
                                "name": "offset"
                            }
                        ],
                        "isInstance": true,
                        "pyQName": "Buffer.get_number"
                    },
                    "Buffer.length": {
                        "kind": 2,
                        "retType": "number",
                        "attributes": {
                            "property": "true",
                            "jsDoc": "Returns the length of a Buffer object."
                        },
                        "isInstance": true
                    },
                    "Buffer.fill": {
                        "kind": -1,
                        "attributes": {
                            "paramDefl": {
                                "offset": "0",
                                "length": "-1"
                            },
                            "explicitDefaults": ["offset", "length"],
                            "jsDoc": "Fill (a fragment) of the buffer with given value."
                        },
                        "parameters": [
                            {
                                "name": "value"
                            },
                            {
                                "name": "offset",
                                "initializer": "0",
                                "default": "0"
                            },
                            {
                                "name": "length",
                                "initializer": "-1",
                                "default": "-1"
                            }
                        ],
                        "isInstance": true
                    },
                    "Buffer.slice": {
                        "kind": -1,
                        "retType": "Buffer",
                        "attributes": {
                            "paramDefl": {
                                "offset": "0",
                                "length": "-1"
                            },
                            "explicitDefaults": ["offset", "length"],
                            "jsDoc": "Return a copy of a fragment of a buffer."
                        },
                        "parameters": [
                            {
                                "name": "offset",
                                "initializer": "0",
                                "default": "0"
                            },
                            {
                                "name": "length",
                                "initializer": "-1",
                                "default": "-1"
                            }
                        ],
                        "isInstance": true
                    },
                    "Buffer.shift": {
                        "kind": -1,
                        "attributes": {
                            "paramDefl": {
                                "start": "0",
                                "length": "-1"
                            },
                            "explicitDefaults": ["start", "length"],
                            "paramHelp": {
                                "offset": "number of bytes to shift; use negative value to shift right",
                                "start": "start offset in buffer. Default is 0.",
                                "length": "number of elements in buffer. If negative, length is set as the buffer length minus"
                            },
                            "jsDoc": "Shift buffer left in place, with zero padding.\n\n\n\nstart. eg: -1"
                        },
                        "parameters": [
                            {
                                "name": "offset",
                                "description": "number of bytes to shift; use negative value to shift right"
                            },
                            {
                                "name": "start",
                                "description": "start offset in buffer. Default is 0.",
                                "initializer": "0",
                                "default": "0"
                            },
                            {
                                "name": "length",
                                "description": "number of elements in buffer. If negative, length is set as the buffer length minus",
                                "initializer": "-1",
                                "default": "-1"
                            }
                        ],
                        "isInstance": true
                    },
                    "Buffer.toString": {
                        "kind": -1,
                        "retType": "string",
                        "attributes": {
                            "jsDoc": "Convert a buffer to string assuming UTF8 encoding"
                        },
                        "parameters": [],
                        "isInstance": true,
                        "pyQName": "Buffer.to_string"
                    },
                    "Buffer.toHex": {
                        "kind": -1,
                        "retType": "string",
                        "attributes": {
                            "jsDoc": "Convert a buffer to its hexadecimal representation."
                        },
                        "parameters": [],
                        "isInstance": true,
                        "pyQName": "Buffer.to_hex"
                    },
                    "Buffer.rotate": {
                        "kind": -1,
                        "attributes": {
                            "paramDefl": {
                                "start": "0",
                                "length": "-1"
                            },
                            "explicitDefaults": ["start", "length"],
                            "paramHelp": {
                                "offset": "number of bytes to shift; use negative value to shift right",
                                "start": "start offset in buffer. Default is 0.",
                                "length": "number of elements in buffer. If negative, length is set as the buffer length minus"
                            },
                            "jsDoc": "Rotate buffer left in place.\n\n\n\nstart. eg: -1"
                        },
                        "parameters": [
                            {
                                "name": "offset",
                                "description": "number of bytes to shift; use negative value to shift right"
                            },
                            {
                                "name": "start",
                                "description": "start offset in buffer. Default is 0.",
                                "initializer": "0",
                                "default": "0"
                            },
                            {
                                "name": "length",
                                "description": "number of elements in buffer. If negative, length is set as the buffer length minus",
                                "initializer": "-1",
                                "default": "-1"
                            }
                        ],
                        "isInstance": true
                    },
                    "Buffer.write": {
                        "kind": -1,
                        "attributes": {
                            "jsDoc": "Write contents of `src` at `dstOffset` in current buffer."
                        },
                        "parameters": [
                            {
                                "name": "dstOffset"
                            },
                            {
                                "name": "src",
                                "type": "Buffer"
                            }
                        ],
                        "isInstance": true
                    },
                    "Buffer.hash": {
                        "kind": -1,
                        "retType": "number",
                        "attributes": {
                            "jsDoc": "Compute k-bit FNV-1 non-cryptographic hash of the buffer."
                        },
                        "parameters": [
                            {
                                "name": "bits"
                            }
                        ],
                        "isInstance": true
                    },
                    "control.createBuffer": {
                        "kind": -3,
                        "retType": "Buffer",
                        "attributes": {
                            "deprecated": "1",
                            "paramHelp": {
                                "size": "number of bytes in the buffer"
                            },
                            "jsDoc": "Create a new zero-initialized buffer."
                        },
                        "parameters": [
                            {
                                "name": "size",
                                "description": "number of bytes in the buffer"
                            }
                        ],
                        "pyQName": "bytearray"
                    },
                    "control.createBufferFromUTF8": {
                        "kind": -3,
                        "retType": "Buffer",
                        "attributes": {
                            "deprecated": "1",
                            "paramHelp": {
                                "str": "the string to put in the buffer"
                            },
                            "jsDoc": "Create a new buffer with UTF8-encoded string"
                        },
                        "parameters": [
                            {
                                "name": "str",
                                "description": "the string to put in the buffer",
                                "type": "string"
                            }
                        ],
                        "pyQName": "control.create_buffer_from_utf8"
                    },
                    "loops": {
                        "kind": 5,
                        "retType": ""
                    },
                    "loops.forever": {
                        "kind": -3,
                        "attributes": {
                            "help": "loops/forever",
                            "weight": 100,
                            "afterOnStart": true,
                            "deprecated": "true",
                            "blockId": "forever_deprecated",
                            "block": "forever",
                            "blockAllowMultiple": "1",
                            "paramHelp": {
                                "body": "code to execute"
                            },
                            "jsDoc": "Repeats the code forever in the background. On each iteration, allows other codes to run.",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "label",
                                        "text": "forever",
                                        "style": []
                                    }
                                ],
                                "parameters": []
                            }
                        },
                        "parameters": [
                            {
                                "name": "a",
                                "type": "() => void",
                                "handlerParameters": []
                            }
                        ]
                    },
                    "loops.pause": {
                        "kind": -3,
                        "attributes": {
                            "paramDefl": {
                                "ms": "100"
                            },
                            "callingConvention": 1,
                            "help": "loops/pause",
                            "weight": 99,
                            "deprecated": "true",
                            "async": "true",
                            "block": "pause %pause=timePicker|ms",
                            "blockId": "device_pause_deprecated",
                            "paramHelp": {
                                "ms": "how long to pause for, eg: 100, 200, 500, 1000, 2000"
                            },
                            "jsDoc": "Pause for the specified time in milliseconds",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "label",
                                        "text": "pause ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "pause",
                                        "shadowBlockId": "timePicker",
                                        "ref": false
                                    },
                                    {
                                        "kind": "break"
                                    },
                                    {
                                        "kind": "label",
                                        "text": "ms",
                                        "style": []
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "pause",
                                        "shadowBlockId": "timePicker",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "parameters": [
                            {
                                "name": "ms",
                                "description": "how long to pause for, eg: 100, 200, 500, 1000, 2000",
                                "default": "100"
                            }
                        ]
                    },
                    "control.isUSBInitialized": {
                        "kind": -3,
                        "retType": "boolean",
                        "attributes": {
                            "jsDoc": "Determines if the USB has been enumerated."
                        },
                        "parameters": [],
                        "pyQName": "control.is_usb_initialized"
                    },
                    "Array": {
                        "kind": 5,
                        "retType": "",
                        "attributes": {
                            "blockNamespace": "Arrays",
                            "jsDoc": "Add, remove, and replace items in lists."
                        }
                    },
                    "Array.length": {
                        "kind": 2,
                        "retType": "number",
                        "attributes": {
                            "weight": 84,
                            "blockId": "lists_length",
                            "block": "length of %VALUE",
                            "blockBuiltin": "true",
                            "blockNamespace": "arrays",
                            "jsDoc": "Get or set the length of an array. This number is one more than the index of the last element the array.",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "label",
                                        "text": "length of ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "VALUE",
                                        "ref": false
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "VALUE",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "isInstance": true
                    },
                    "Array.push": {
                        "kind": -1,
                        "attributes": {
                            "help": "arrays/push",
                            "weight": 50,
                            "blockId": "array_push",
                            "block": "%list| add value %value| to end",
                            "blockNamespace": "arrays",
                            "group": "Modify",
                            "paramHelp": {
                                "items": "New elements of the Array."
                            },
                            "jsDoc": "Append a new element to an array.",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "param",
                                        "name": "list",
                                        "ref": false
                                    },
                                    {
                                        "kind": "break"
                                    },
                                    {
                                        "kind": "label",
                                        "text": " add value ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "value",
                                        "ref": false
                                    },
                                    {
                                        "kind": "break"
                                    },
                                    {
                                        "kind": "label",
                                        "text": " to end",
                                        "style": []
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "list",
                                        "ref": false
                                    },
                                    {
                                        "kind": "param",
                                        "name": "value",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "parameters": [
                            {
                                "name": "item",
                                "type": "T"
                            }
                        ],
                        "isInstance": true,
                        "pyQName": "Array.append"
                    },
                    "Array.concat": {
                        "kind": -1,
                        "retType": "T[]",
                        "attributes": {
                            "helper": "arrayConcat",
                            "weight": 40,
                            "paramHelp": {
                                "arr": "The other array that is being concatenated with"
                            },
                            "jsDoc": "Concatenates the values with another array."
                        },
                        "parameters": [
                            {
                                "name": "arr",
                                "description": "The other array that is being concatenated with",
                                "type": "T[]"
                            }
                        ],
                        "isInstance": true
                    },
                    "Array.pop": {
                        "kind": -1,
                        "retType": "T",
                        "attributes": {
                            "help": "arrays/pop",
                            "weight": 45,
                            "blockId": "array_pop",
                            "block": "get and remove last value from %list",
                            "blockNamespace": "arrays",
                            "group": "Read",
                            "jsDoc": "Remove the last element from an array and return it.",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "label",
                                        "text": "get and remove last value from ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "list",
                                        "ref": false
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "list",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "parameters": [],
                        "isInstance": true
                    },
                    "Array.reverse": {
                        "kind": -1,
                        "attributes": {
                            "help": "arrays/reverse",
                            "helper": "arrayReverse",
                            "weight": 10,
                            "blockId": "array_reverse",
                            "block": "reverse %list",
                            "blockNamespace": "arrays",
                            "group": "Operations",
                            "jsDoc": "Reverse the elements in an array. The first array element becomes the last, and the last array element becomes the first.",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "label",
                                        "text": "reverse ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "list",
                                        "ref": false
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "list",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "parameters": [],
                        "isInstance": true
                    },
                    "Array.shift": {
                        "kind": -1,
                        "retType": "T",
                        "attributes": {
                            "help": "arrays/shift",
                            "helper": "arrayShift",
                            "weight": 30,
                            "blockId": "array_shift",
                            "block": "get and remove first value from %list",
                            "blockNamespace": "arrays",
                            "group": "Read",
                            "jsDoc": "Remove the first element from an array and return it. This method changes the length of the array.",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "label",
                                        "text": "get and remove first value from ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "list",
                                        "ref": false
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "list",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "parameters": [],
                        "isInstance": true
                    },
                    "Array.unshift": {
                        "kind": -1,
                        "retType": "number",
                        "attributes": {
                            "help": "arrays/unshift",
                            "helper": "arrayUnshift",
                            "weight": 25,
                            "blockId": "array_unshift",
                            "block": "%list| insert %value| at beginning",
                            "blockNamespace": "arrays",
                            "group": "Modify",
                            "paramHelp": {
                                "element": "to insert at the start of the Array."
                            },
                            "jsDoc": "Add one element to the beginning of an array and return the new length of the array.",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "param",
                                        "name": "list",
                                        "ref": false
                                    },
                                    {
                                        "kind": "break"
                                    },
                                    {
                                        "kind": "label",
                                        "text": " insert ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "value",
                                        "ref": false
                                    },
                                    {
                                        "kind": "break"
                                    },
                                    {
                                        "kind": "label",
                                        "text": " at beginning",
                                        "style": []
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "list",
                                        "ref": false
                                    },
                                    {
                                        "kind": "param",
                                        "name": "value",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "parameters": [
                            {
                                "name": "value",
                                "type": "T"
                            }
                        ],
                        "isInstance": true
                    },
                    "Array.slice": {
                        "kind": -1,
                        "retType": "T[]",
                        "attributes": {
                            "paramDefl": {
                                "start": "0",
                                "end": "0"
                            },
                            "help": "arrays/slice",
                            "helper": "arraySlice",
                            "weight": 41,
                            "blockNamespace": "arrays",
                            "paramHelp": {
                                "start": "The beginning of the specified portion of the array. eg: 0",
                                "end": "The end of the specified portion of the array. eg: 0"
                            },
                            "jsDoc": "Return a section of an array."
                        },
                        "parameters": [
                            {
                                "name": "start",
                                "description": "The beginning of the specified portion of the array. eg: 0",
                                "initializer": "undefined",
                                "default": "0"
                            },
                            {
                                "name": "end",
                                "description": "The end of the specified portion of the array. eg: 0",
                                "initializer": "undefined",
                                "default": "0"
                            }
                        ],
                        "isInstance": true
                    },
                    "Array.splice": {
                        "kind": -1,
                        "attributes": {
                            "paramDefl": {
                                "start": "0",
                                "deleteCount": "0"
                            },
                            "helper": "arraySplice",
                            "weight": 40,
                            "paramHelp": {
                                "start": "The zero-based location in the array from which to start removing elements. eg: 0",
                                "deleteCount": "The number of elements to remove. eg: 0"
                            },
                            "jsDoc": "Remove elements from an array."
                        },
                        "parameters": [
                            {
                                "name": "start",
                                "description": "The zero-based location in the array from which to start removing elements. eg: 0",
                                "default": "0"
                            },
                            {
                                "name": "deleteCount",
                                "description": "The number of elements to remove. eg: 0",
                                "default": "0"
                            }
                        ],
                        "isInstance": true
                    },
                    "Array.join": {
                        "kind": -1,
                        "retType": "string",
                        "attributes": {
                            "helper": "arrayJoin",
                            "weight": 40,
                            "paramHelp": {
                                "sep": "the string separator"
                            },
                            "jsDoc": "joins all elements of an array into a string and returns this string."
                        },
                        "parameters": [
                            {
                                "name": "sep",
                                "description": "the string separator",
                                "type": "string",
                                "initializer": "undefined"
                            }
                        ],
                        "isInstance": true
                    },
                    "Array.some": {
                        "kind": -1,
                        "retType": "boolean",
                        "attributes": {
                            "helper": "arraySome",
                            "weight": 40,
                            "paramHelp": {
                                "callbackfn": "A function that accepts up to two arguments. The some method calls the callbackfn function one time for each element in the array."
                            },
                            "jsDoc": "Tests whether at least one element in the array passes the test implemented by the provided function."
                        },
                        "parameters": [
                            {
                                "name": "callbackfn",
                                "description": "A function that accepts up to two arguments. The some method calls the callbackfn function one time for each element in the array.",
                                "type": "(value: T, index: number) => boolean",
                                "handlerParameters": [
                                    {
                                        "name": "value",
                                        "type": "T"
                                    },
                                    {
                                        "name": "index",
                                        "type": "number"
                                    }
                                ]
                            }
                        ],
                        "isInstance": true
                    },
                    "Array.every": {
                        "kind": -1,
                        "retType": "boolean",
                        "attributes": {
                            "helper": "arrayEvery",
                            "weight": 40,
                            "paramHelp": {
                                "callbackfn": "A function that accepts up to two arguments. The every method calls the callbackfn function one time for each element in the array."
                            },
                            "jsDoc": "Tests whether all elements in the array pass the test implemented by the provided function."
                        },
                        "parameters": [
                            {
                                "name": "callbackfn",
                                "description": "A function that accepts up to two arguments. The every method calls the callbackfn function one time for each element in the array.",
                                "type": "(value: T, index: number) => boolean",
                                "handlerParameters": [
                                    {
                                        "name": "value",
                                        "type": "T"
                                    },
                                    {
                                        "name": "index",
                                        "type": "number"
                                    }
                                ]
                            }
                        ],
                        "isInstance": true
                    },
                    "Array.sort": {
                        "kind": -1,
                        "retType": "T[]",
                        "attributes": {
                            "helper": "arraySort",
                            "weight": 40,
                            "paramHelp": {
                                "specifies": "a function that defines the sort order. If omitted, the array is sorted according to the prmitive type"
                            },
                            "jsDoc": "Sort the elements of an array in place and returns the array. The sort is not necessarily stable."
                        },
                        "parameters": [
                            {
                                "name": "callbackfn",
                                "type": "(value1: T, value2: T) => number",
                                "initializer": "undefined",
                                "handlerParameters": [
                                    {
                                        "name": "value1",
                                        "type": "T"
                                    },
                                    {
                                        "name": "value2",
                                        "type": "T"
                                    }
                                ]
                            }
                        ],
                        "isInstance": true
                    },
                    "Array.map": {
                        "kind": -1,
                        "retType": "U[]",
                        "attributes": {
                            "helper": "arrayMap",
                            "weight": 40,
                            "paramHelp": {
                                "callbackfn": "A function that accepts up to two arguments. The map method calls the callbackfn function one time for each element in the array."
                            },
                            "jsDoc": "Call a defined callback function on each element of an array, and return an array containing the results."
                        },
                        "parameters": [
                            {
                                "name": "callbackfn",
                                "description": "A function that accepts up to two arguments. The map method calls the callbackfn function one time for each element in the array.",
                                "type": "(value: T, index: number) => U",
                                "handlerParameters": [
                                    {
                                        "name": "value",
                                        "type": "T"
                                    },
                                    {
                                        "name": "index",
                                        "type": "number"
                                    }
                                ]
                            }
                        ],
                        "isInstance": true
                    },
                    "Array.forEach": {
                        "kind": -1,
                        "attributes": {
                            "helper": "arrayForEach",
                            "weight": 40,
                            "paramHelp": {
                                "callbackfn": "A function that accepts up to two arguments. The forEach method calls the callbackfn function one time for each element in the array."
                            },
                            "jsDoc": "Call a defined callback function on each element of an array."
                        },
                        "parameters": [
                            {
                                "name": "callbackfn",
                                "description": "A function that accepts up to two arguments. The forEach method calls the callbackfn function one time for each element in the array.",
                                "type": "(value: T, index: number) => void",
                                "handlerParameters": [
                                    {
                                        "name": "value",
                                        "type": "T"
                                    },
                                    {
                                        "name": "index",
                                        "type": "number"
                                    }
                                ]
                            }
                        ],
                        "isInstance": true,
                        "pyQName": "Array.for_each"
                    },
                    "Array.filter": {
                        "kind": -1,
                        "retType": "T[]",
                        "attributes": {
                            "helper": "arrayFilter",
                            "weight": 40,
                            "paramHelp": {
                                "callbackfn": "A function that accepts up to two arguments. The filter method calls the callbackfn function one time for each element in the array."
                            },
                            "jsDoc": "Return the elements of an array that meet the condition specified in a callback function."
                        },
                        "parameters": [
                            {
                                "name": "callbackfn",
                                "description": "A function that accepts up to two arguments. The filter method calls the callbackfn function one time for each element in the array.",
                                "type": "(value: T, index: number) => boolean",
                                "handlerParameters": [
                                    {
                                        "name": "value",
                                        "type": "T"
                                    },
                                    {
                                        "name": "index",
                                        "type": "number"
                                    }
                                ]
                            }
                        ],
                        "isInstance": true
                    },
                    "Array.fill": {
                        "kind": -1,
                        "retType": "T[]",
                        "attributes": {
                            "helper": "arrayFill",
                            "weight": 39,
                            "jsDoc": "Fills all the elements of an array from a start index to an end index with a static value. The end index is not included."
                        },
                        "parameters": [
                            {
                                "name": "value",
                                "type": "T"
                            },
                            {
                                "name": "start",
                                "initializer": "undefined"
                            },
                            {
                                "name": "end",
                                "initializer": "undefined"
                            }
                        ],
                        "isInstance": true
                    },
                    "Array.find": {
                        "kind": -1,
                        "retType": "T",
                        "attributes": {
                            "helper": "arrayFind",
                            "weight": 40,
                            "paramHelp": {
                                "callbackfn": ""
                            },
                            "jsDoc": "Returns the value of the first element in the array that satisfies the provided testing function. Otherwise undefined is returned."
                        },
                        "parameters": [
                            {
                                "name": "callbackfn",
                                "type": "(value: T, index: number) => boolean",
                                "handlerParameters": [
                                    {
                                        "name": "value",
                                        "type": "T"
                                    },
                                    {
                                        "name": "index",
                                        "type": "number"
                                    }
                                ]
                            }
                        ],
                        "isInstance": true
                    },
                    "Array.reduce": {
                        "kind": -1,
                        "retType": "U",
                        "attributes": {
                            "helper": "arrayReduce",
                            "weight": 40,
                            "paramHelp": {
                                "callbackfn": "A function that accepts up to three arguments. The reduce method calls the callbackfn function one time for each element in the array.",
                                "initialValue": "Initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value."
                            },
                            "jsDoc": "Call the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function."
                        },
                        "parameters": [
                            {
                                "name": "callbackfn",
                                "description": "A function that accepts up to three arguments. The reduce method calls the callbackfn function one time for each element in the array.",
                                "type": "(previousValue: U, currentValue: T, currentIndex: number) => U",
                                "handlerParameters": [
                                    {
                                        "name": "previousValue",
                                        "type": "U"
                                    },
                                    {
                                        "name": "currentValue",
                                        "type": "T"
                                    },
                                    {
                                        "name": "currentIndex",
                                        "type": "number"
                                    }
                                ]
                            },
                            {
                                "name": "initialValue",
                                "description": "Initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
                                "type": "U"
                            }
                        ],
                        "isInstance": true
                    },
                    "Array.removeElement": {
                        "kind": -1,
                        "retType": "boolean",
                        "attributes": {
                            "weight": 48,
                            "jsDoc": "Remove the first occurence of an object. Returns true if removed."
                        },
                        "parameters": [
                            {
                                "name": "element",
                                "type": "T"
                            }
                        ],
                        "isInstance": true,
                        "pyQName": "Array.remove_element"
                    },
                    "Array.removeAt": {
                        "kind": -1,
                        "retType": "T",
                        "attributes": {
                            "help": "arrays/remove-at",
                            "weight": 47,
                            "blockId": "array_removeat",
                            "block": "%list| get and remove value at %index",
                            "blockNamespace": "arrays",
                            "group": "Read",
                            "jsDoc": "Remove the element at a certain index.",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "param",
                                        "name": "list",
                                        "ref": false
                                    },
                                    {
                                        "kind": "break"
                                    },
                                    {
                                        "kind": "label",
                                        "text": " get and remove value at ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "index",
                                        "ref": false
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "list",
                                        "ref": false
                                    },
                                    {
                                        "kind": "param",
                                        "name": "index",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "parameters": [
                            {
                                "name": "index"
                            }
                        ],
                        "isInstance": true,
                        "pyQName": "Array.remove_at"
                    },
                    "Array.insertAt": {
                        "kind": -1,
                        "attributes": {
                            "paramDefl": {
                                "index": "0",
                                "the": "0"
                            },
                            "help": "arrays/insert-at",
                            "weight": 20,
                            "blockId": "array_insertAt",
                            "block": "%list| insert at %index| value %value",
                            "blockNamespace": "arrays",
                            "group": "Modify",
                            "paramHelp": {
                                "index": "the zero-based position in the list to insert the value, eg: 0",
                                "the": "value to insert, eg: 0"
                            },
                            "jsDoc": "Insert the value at a particular index, increases length by 1",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "param",
                                        "name": "list",
                                        "ref": false
                                    },
                                    {
                                        "kind": "break"
                                    },
                                    {
                                        "kind": "label",
                                        "text": " insert at ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "index",
                                        "ref": false
                                    },
                                    {
                                        "kind": "break"
                                    },
                                    {
                                        "kind": "label",
                                        "text": " value ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "value",
                                        "ref": false
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "list",
                                        "ref": false
                                    },
                                    {
                                        "kind": "param",
                                        "name": "index",
                                        "ref": false
                                    },
                                    {
                                        "kind": "param",
                                        "name": "value",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "parameters": [
                            {
                                "name": "index",
                                "description": "the zero-based position in the list to insert the value, eg: 0",
                                "default": "0"
                            },
                            {
                                "name": "value",
                                "type": "T"
                            }
                        ],
                        "isInstance": true,
                        "pyQName": "Array.insert_at"
                    },
                    "Array.indexOf": {
                        "kind": -1,
                        "retType": "number",
                        "attributes": {
                            "help": "arrays/index-of",
                            "weight": 40,
                            "blockId": "array_indexof",
                            "block": "%list| find index of %value",
                            "blockNamespace": "arrays",
                            "group": "Operations",
                            "paramHelp": {
                                "item": "The value to locate in the array.",
                                "fromIndex": "The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0."
                            },
                            "jsDoc": "Return the index of the first occurrence of a value in an array.",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "param",
                                        "name": "list",
                                        "ref": false
                                    },
                                    {
                                        "kind": "break"
                                    },
                                    {
                                        "kind": "label",
                                        "text": " find index of ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "value",
                                        "ref": false
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "list",
                                        "ref": false
                                    },
                                    {
                                        "kind": "param",
                                        "name": "value",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "parameters": [
                            {
                                "name": "item",
                                "description": "The value to locate in the array.",
                                "type": "T"
                            },
                            {
                                "name": "fromIndex",
                                "description": "The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",
                                "initializer": "undefined"
                            }
                        ],
                        "isInstance": true,
                        "pyQName": "Array.index"
                    },
                    "Array.get": {
                        "kind": -1,
                        "retType": "T",
                        "attributes": {
                            "paramDefl": {
                                "index": "0"
                            },
                            "help": "arrays/get",
                            "weight": 85,
                            "paramHelp": {
                                "index": "the zero-based position in the list of the item, eg: 0"
                            },
                            "jsDoc": "Get the value at a particular index"
                        },
                        "parameters": [
                            {
                                "name": "index",
                                "description": "the zero-based position in the list of the item, eg: 0",
                                "default": "0"
                            }
                        ],
                        "isInstance": true
                    },
                    "Array.set": {
                        "kind": -1,
                        "attributes": {
                            "paramDefl": {
                                "index": "0",
                                "value": "0"
                            },
                            "help": "arrays/set",
                            "weight": 84,
                            "paramHelp": {
                                "index": "the zero-based position in the list to store the value, eg: 0",
                                "value": "the value to insert, eg: 0"
                            },
                            "jsDoc": "Store a value at a particular index"
                        },
                        "parameters": [
                            {
                                "name": "index",
                                "description": "the zero-based position in the list to store the value, eg: 0",
                                "default": "0"
                            },
                            {
                                "name": "value",
                                "description": "the value to insert, eg: 0",
                                "type": "T",
                                "default": "0"
                            }
                        ],
                        "isInstance": true
                    },
                    "Array._pickRandom": {
                        "kind": -1,
                        "retType": "T",
                        "attributes": {
                            "help": "arrays/pick-random",
                            "helper": "arrayPickRandom",
                            "weight": 25,
                            "blockId": "array_pickRandom",
                            "block": "get random value from %list",
                            "blockNamespace": "arrays",
                            "group": "Read",
                            "jsDoc": "Return a random value from the array",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "label",
                                        "text": "get random value from ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "list",
                                        "ref": false
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "list",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "parameters": [],
                        "isInstance": true,
                        "pyQName": "Array._pick_random"
                    },
                    "Array._unshiftStatement": {
                        "kind": -1,
                        "attributes": {
                            "help": "arrays/unshift",
                            "helper": "arrayUnshift",
                            "weight": 24,
                            "blockId": "array_unshift_statement",
                            "block": "%list| insert %value| at beginning",
                            "blockNamespace": "arrays",
                            "blockAliasFor": "Array.unshift",
                            "group": "Modify",
                            "paramHelp": {
                                "element": "to insert at the start of the Array."
                            },
                            "jsDoc": "Add one element to the beginning of an array and return the new length of the array.",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "param",
                                        "name": "list",
                                        "ref": false
                                    },
                                    {
                                        "kind": "break"
                                    },
                                    {
                                        "kind": "label",
                                        "text": " insert ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "value",
                                        "ref": false
                                    },
                                    {
                                        "kind": "break"
                                    },
                                    {
                                        "kind": "label",
                                        "text": " at beginning",
                                        "style": []
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "list",
                                        "ref": false
                                    },
                                    {
                                        "kind": "param",
                                        "name": "value",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "parameters": [
                            {
                                "name": "value",
                                "type": "T"
                            }
                        ],
                        "isInstance": true,
                        "pyQName": "Array._unshift_statement"
                    },
                    "Array._popStatement": {
                        "kind": -1,
                        "attributes": {
                            "help": "arrays/pop",
                            "weight": 44,
                            "blockId": "array_pop_statement",
                            "block": "remove last value from %list",
                            "blockNamespace": "arrays",
                            "blockAliasFor": "Array.pop",
                            "group": "Modify",
                            "jsDoc": "Remove the last element from an array and return it.",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "label",
                                        "text": "remove last value from ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "list",
                                        "ref": false
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "list",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "parameters": [],
                        "isInstance": true,
                        "pyQName": "Array._pop_statement"
                    },
                    "Array._shiftStatement": {
                        "kind": -1,
                        "attributes": {
                            "help": "arrays/shift",
                            "helper": "arrayShift",
                            "weight": 29,
                            "blockId": "array_shift_statement",
                            "block": "remove first value from %list",
                            "blockNamespace": "arrays",
                            "blockAliasFor": "Array.shift",
                            "group": "Modify",
                            "jsDoc": "Remove the first element from an array and return it. This method changes the length of the array.",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "label",
                                        "text": "remove first value from ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "list",
                                        "ref": false
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "list",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "parameters": [],
                        "isInstance": true,
                        "pyQName": "Array._shift_statement"
                    },
                    "Array._removeAtStatement": {
                        "kind": -1,
                        "attributes": {
                            "help": "arrays/remove-at",
                            "weight": 14,
                            "blockId": "array_removeat_statement",
                            "block": "%list| remove value at %index",
                            "blockNamespace": "arrays",
                            "blockAliasFor": "Array.removeAt",
                            "group": "Modify",
                            "jsDoc": "Remove the element at a certain index.",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "param",
                                        "name": "list",
                                        "ref": false
                                    },
                                    {
                                        "kind": "break"
                                    },
                                    {
                                        "kind": "label",
                                        "text": " remove value at ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "index",
                                        "ref": false
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "list",
                                        "ref": false
                                    },
                                    {
                                        "kind": "param",
                                        "name": "index",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "parameters": [
                            {
                                "name": "index"
                            }
                        ],
                        "isInstance": true,
                        "pyQName": "Array._remove_at_statement"
                    },
                    "String": {
                        "kind": 5,
                        "retType": "",
                        "attributes": {
                            "blockNamespace": "text",
                            "jsDoc": "Combine, split, and search text strings."
                        }
                    },
                    "String.concat": {
                        "kind": -1,
                        "retType": "string",
                        "attributes": {
                            "weight": 49,
                            "blockId": "string_concat",
                            "blockNamespace": "text",
                            "paramHelp": {
                                "other": "The string to append to the end of the string."
                            },
                            "jsDoc": "Returns a string that contains the concatenation of two or more strings."
                        },
                        "parameters": [
                            {
                                "name": "other",
                                "description": "The string to append to the end of the string.",
                                "type": "string"
                            }
                        ],
                        "isInstance": true
                    },
                    "String.charAt": {
                        "kind": -1,
                        "retType": "string",
                        "attributes": {
                            "paramDefl": {
                                "this": "this"
                            },
                            "weight": 48,
                            "help": "text/char-at",
                            "blockId": "string_get",
                            "block": "char from %this=text|at %pos",
                            "blockNamespace": "text",
                            "explicitDefaults": ["this"],
                            "paramHelp": {
                                "index": "The zero-based index of the desired character."
                            },
                            "jsDoc": "Return the character at the specified index.",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "label",
                                        "text": "char from ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "this",
                                        "shadowBlockId": "text",
                                        "ref": false
                                    },
                                    {
                                        "kind": "break"
                                    },
                                    {
                                        "kind": "label",
                                        "text": "at ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "pos",
                                        "ref": false
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "this",
                                        "shadowBlockId": "text",
                                        "ref": false
                                    },
                                    {
                                        "kind": "param",
                                        "name": "pos",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "parameters": [
                            {
                                "name": "index",
                                "description": "The zero-based index of the desired character."
                            }
                        ],
                        "isInstance": true,
                        "pyQName": "String.char_at"
                    },
                    "String.length": {
                        "kind": 2,
                        "retType": "number",
                        "attributes": {
                            "property": "true",
                            "weight": 47,
                            "blockId": "text_length",
                            "block": "length of %VALUE",
                            "blockBuiltin": "true",
                            "blockNamespace": "text",
                            "jsDoc": "Returns the length of a String object.",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "label",
                                        "text": "length of ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "VALUE",
                                        "ref": false
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "VALUE",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "isInstance": true
                    },
                    "String.charCodeAt": {
                        "kind": -1,
                        "retType": "number",
                        "attributes": {
                            "paramHelp": {
                                "index": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
                            },
                            "jsDoc": "Return the Unicode value of the character at the specified location."
                        },
                        "parameters": [
                            {
                                "name": "index",
                                "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
                            }
                        ],
                        "isInstance": true,
                        "pyQName": "String.char_code_at"
                    },
                    "String.compare": {
                        "kind": -1,
                        "retType": "number",
                        "attributes": {
                            "paramDefl": {
                                "this": "this"
                            },
                            "help": "text/compare",
                            "blockId": "string_compare",
                            "block": "compare %this=text| to %that",
                            "blockNamespace": "text",
                            "explicitDefaults": ["this"],
                            "paramHelp": {
                                "that": "String to compare to target string"
                            },
                            "jsDoc": "See how the order of characters in two strings is different (in ASCII encoding).",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "label",
                                        "text": "compare ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "this",
                                        "shadowBlockId": "text",
                                        "ref": false
                                    },
                                    {
                                        "kind": "break"
                                    },
                                    {
                                        "kind": "label",
                                        "text": " to ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "that",
                                        "ref": false
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "this",
                                        "shadowBlockId": "text",
                                        "ref": false
                                    },
                                    {
                                        "kind": "param",
                                        "name": "that",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "parameters": [
                            {
                                "name": "that",
                                "description": "String to compare to target string",
                                "type": "string"
                            }
                        ],
                        "isInstance": true
                    },
                    "String.substr": {
                        "kind": -1,
                        "retType": "string",
                        "attributes": {
                            "paramDefl": {
                                "this": "this",
                                "start": "0",
                                "length": "10"
                            },
                            "helper": "stringSubstr",
                            "help": "text/substr",
                            "blockId": "string_substr",
                            "block": "substring of %this=text|from %start|of length %length",
                            "blockNamespace": "text",
                            "explicitDefaults": ["this"],
                            "paramHelp": {
                                "start": "first character index; can be negative from counting from the end, eg:0",
                                "length": "number of characters to extract, eg: 10"
                            },
                            "jsDoc": "Return a substring of the current string.",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "label",
                                        "text": "substring of ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "this",
                                        "shadowBlockId": "text",
                                        "ref": false
                                    },
                                    {
                                        "kind": "break"
                                    },
                                    {
                                        "kind": "label",
                                        "text": "from ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "start",
                                        "ref": false
                                    },
                                    {
                                        "kind": "break"
                                    },
                                    {
                                        "kind": "label",
                                        "text": "of length ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "length",
                                        "ref": false
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "this",
                                        "shadowBlockId": "text",
                                        "ref": false
                                    },
                                    {
                                        "kind": "param",
                                        "name": "start",
                                        "ref": false
                                    },
                                    {
                                        "kind": "param",
                                        "name": "length",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "parameters": [
                            {
                                "name": "start",
                                "description": "first character index; can be negative from counting from the end, eg:0",
                                "default": "0"
                            },
                            {
                                "name": "length",
                                "description": "number of characters to extract, eg: 10",
                                "initializer": "undefined",
                                "default": "10"
                            }
                        ],
                        "isInstance": true
                    },
                    "String.replace": {
                        "kind": -1,
                        "retType": "string",
                        "attributes": {
                            "helper": "stringReplace",
                            "paramHelp": {
                                "toReplace": "the substring to replace in the current string",
                                "replacer": "either the string that replaces toReplace in the current string,"
                            },
                            "jsDoc": "Return the current string with the first occurence of toReplace\nreplaced with the replacer\n\n\nor a function that accepts the substring and returns the replacement string."
                        },
                        "parameters": [
                            {
                                "name": "toReplace",
                                "description": "the substring to replace in the current string",
                                "type": "string"
                            },
                            {
                                "name": "replacer",
                                "description": "either the string that replaces toReplace in the current string,",
                                "type": "string | ((sub: string) => string)"
                            }
                        ],
                        "isInstance": true
                    },
                    "String.replaceAll": {
                        "kind": -1,
                        "retType": "string",
                        "attributes": {
                            "helper": "stringReplaceAll",
                            "paramHelp": {
                                "toReplace": "the substring to replace in the current string",
                                "replacer": "either the string that replaces toReplace in the current string,"
                            },
                            "jsDoc": "Return the current string with each occurence of toReplace\nreplaced with the replacer\n\n\nor a function that accepts the substring and returns the replacement string."
                        },
                        "parameters": [
                            {
                                "name": "toReplace",
                                "description": "the substring to replace in the current string",
                                "type": "string"
                            },
                            {
                                "name": "replacer",
                                "description": "either the string that replaces toReplace in the current string,",
                                "type": "string | ((sub: string) => string)"
                            }
                        ],
                        "isInstance": true,
                        "pyQName": "String.replace_all"
                    },
                    "String.slice": {
                        "kind": -1,
                        "retType": "string",
                        "attributes": {
                            "paramDefl": {
                                "start": "0"
                            },
                            "helper": "stringSlice",
                            "paramHelp": {
                                "start": "first character index; can be negative from counting from the end, eg:0",
                                "end": "one-past-last character index"
                            },
                            "jsDoc": "Return a substring of the current string."
                        },
                        "parameters": [
                            {
                                "name": "start",
                                "description": "first character index; can be negative from counting from the end, eg:0",
                                "default": "0"
                            },
                            {
                                "name": "end",
                                "description": "one-past-last character index",
                                "initializer": "undefined"
                            }
                        ],
                        "isInstance": true
                    },
                    "String.isEmpty": {
                        "kind": -1,
                        "retType": "boolean",
                        "attributes": {
                            "paramDefl": {
                                "this": "this"
                            },
                            "helper": "stringEmpty",
                            "help": "text/is-empty",
                            "blockId": "string_isempty",
                            "blockNamespace": "text",
                            "block": "%this=text| is empty",
                            "explicitDefaults": ["this"],
                            "jsDoc": "Returns a value indicating if the string is empty",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "param",
                                        "name": "this",
                                        "shadowBlockId": "text",
                                        "ref": false
                                    },
                                    {
                                        "kind": "break"
                                    },
                                    {
                                        "kind": "label",
                                        "text": " is empty",
                                        "style": []
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "this",
                                        "shadowBlockId": "text",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "parameters": [],
                        "isInstance": true,
                        "pyQName": "String.is_empty"
                    },
                    "String.indexOf": {
                        "kind": -1,
                        "retType": "number",
                        "attributes": {
                            "paramDefl": {
                                "this": "this"
                            },
                            "help": "text/index-of",
                            "blockId": "string_indexof",
                            "blockNamespace": "text",
                            "block": "%this=text|find index of %searchValue",
                            "explicitDefaults": ["this"],
                            "paramHelp": {
                                "searchValue": "the text to find",
                                "start": "optional start index for the search"
                            },
                            "jsDoc": "Returns the position of the first occurrence of a specified value in a string.",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "param",
                                        "name": "this",
                                        "shadowBlockId": "text",
                                        "ref": false
                                    },
                                    {
                                        "kind": "break"
                                    },
                                    {
                                        "kind": "label",
                                        "text": "find index of ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "searchValue",
                                        "ref": false
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "this",
                                        "shadowBlockId": "text",
                                        "ref": false
                                    },
                                    {
                                        "kind": "param",
                                        "name": "searchValue",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "parameters": [
                            {
                                "name": "searchValue",
                                "description": "the text to find",
                                "type": "string"
                            },
                            {
                                "name": "start",
                                "description": "optional start index for the search",
                                "initializer": "undefined"
                            }
                        ],
                        "isInstance": true,
                        "pyQName": "String.index_of"
                    },
                    "String.includes": {
                        "kind": -1,
                        "retType": "boolean",
                        "attributes": {
                            "paramDefl": {
                                "this": "this"
                            },
                            "help": "text/includes",
                            "blockId": "string_includes",
                            "blockNamespace": "text",
                            "block": "%this=text|includes %searchValue",
                            "explicitDefaults": ["this"],
                            "paramHelp": {
                                "searchValue": "the text to find",
                                "start": "optional start index for the search"
                            },
                            "jsDoc": "Determines whether a string contains the characters of a specified string.",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "param",
                                        "name": "this",
                                        "shadowBlockId": "text",
                                        "ref": false
                                    },
                                    {
                                        "kind": "break"
                                    },
                                    {
                                        "kind": "label",
                                        "text": "includes ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "searchValue",
                                        "ref": false
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "this",
                                        "shadowBlockId": "text",
                                        "ref": false
                                    },
                                    {
                                        "kind": "param",
                                        "name": "searchValue",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "parameters": [
                            {
                                "name": "searchValue",
                                "description": "the text to find",
                                "type": "string"
                            },
                            {
                                "name": "start",
                                "description": "optional start index for the search",
                                "initializer": "undefined"
                            }
                        ],
                        "isInstance": true
                    },
                    "String.split": {
                        "kind": -1,
                        "retType": "string[]",
                        "attributes": {
                            "paramDefl": {
                                "this": "this"
                            },
                            "helper": "stringSplit",
                            "help": "text/split",
                            "blockId": "string_split",
                            "blockNamespace": "text",
                            "block": "split %this=text|at %separator",
                            "explicitDefaults": ["this"],
                            "paramHelp": {
                                "separator": "@param limit"
                            },
                            "jsDoc": "Splits the string according to the separators",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "label",
                                        "text": "split ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "this",
                                        "shadowBlockId": "text",
                                        "ref": false
                                    },
                                    {
                                        "kind": "break"
                                    },
                                    {
                                        "kind": "label",
                                        "text": "at ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "separator",
                                        "ref": false
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "this",
                                        "shadowBlockId": "text",
                                        "ref": false
                                    },
                                    {
                                        "kind": "param",
                                        "name": "separator",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "parameters": [
                            {
                                "name": "separator",
                                "description": "@param limit",
                                "type": "string",
                                "initializer": "undefined"
                            },
                            {
                                "name": "limit",
                                "initializer": "undefined"
                            }
                        ],
                        "isInstance": true
                    },
                    "String.trim": {
                        "kind": -1,
                        "retType": "string",
                        "attributes": {
                            "helper": "stringTrim",
                            "jsDoc": "Return a substring of the current string with whitespace removed from both ends"
                        },
                        "parameters": [],
                        "isInstance": true
                    },
                    "String.toUpperCase": {
                        "kind": -1,
                        "retType": "string",
                        "attributes": {
                            "helper": "stringToUpperCase",
                            "help": "text/to-upper-case",
                            "jsDoc": "Converts the string to upper case characters."
                        },
                        "parameters": [],
                        "isInstance": true,
                        "pyQName": "String.to_upper_case"
                    },
                    "String.toLowerCase": {
                        "kind": -1,
                        "retType": "string",
                        "attributes": {
                            "helper": "stringToLowerCase",
                            "help": "text/to-lower-case",
                            "jsDoc": "Converts the string to lower case characters."
                        },
                        "parameters": [],
                        "isInstance": true,
                        "pyQName": "String.to_lower_case"
                    },
                    "parseFloat": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "paramDefl": {
                                "text": "123",
                                "s": "123"
                            },
                            "help": "text/parse-float",
                            "blockId": "string_parsefloat",
                            "block": "parse to number %text",
                            "blockNamespace": "text",
                            "explicitDefaults": ["text"],
                            "paramHelp": {
                                "s": "A string to convert into a number. eg: 123"
                            },
                            "jsDoc": "Convert a string to a number.",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "label",
                                        "text": "parse to number ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "text",
                                        "ref": false
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "text",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "parameters": [
                            {
                                "name": "text",
                                "type": "string",
                                "initializer": "123",
                                "default": "123"
                            }
                        ],
                        "pyQName": "parse_float"
                    },
                    "randint": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "paramDefl": {
                                "min": "0",
                                "max": "10"
                            },
                            "blockId": "device_random",
                            "block": "pick random %min|to %limit",
                            "blockNamespace": "Math",
                            "help": "math/randint",
                            "paramHelp": {
                                "min": "the lower inclusive bound, eg: 0",
                                "max": "the upper inclusive bound, eg: 10"
                            },
                            "jsDoc": "Returns a pseudorandom number between min and max included.\nIf both numbers are integral, the result is integral.",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "label",
                                        "text": "pick random ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "min",
                                        "ref": false
                                    },
                                    {
                                        "kind": "break"
                                    },
                                    {
                                        "kind": "label",
                                        "text": "to ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "limit",
                                        "ref": false
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "min",
                                        "ref": false
                                    },
                                    {
                                        "kind": "param",
                                        "name": "limit",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "parameters": [
                            {
                                "name": "min",
                                "description": "the lower inclusive bound, eg: 0",
                                "default": "0"
                            },
                            {
                                "name": "max",
                                "description": "the upper inclusive bound, eg: 10",
                                "default": "10"
                            }
                        ]
                    },
                    "Object": {
                        "kind": 5,
                        "retType": ""
                    },
                    "Function": {
                        "kind": 9,
                        "retType": "Function",
                        "extendsTypes": []
                    },
                    "Function.__assignableToFunction": {
                        "kind": 2,
                        "retType": "Function",
                        "isInstance": true
                    },
                    "IArguments": {
                        "kind": 9,
                        "retType": "IArguments",
                        "extendsTypes": []
                    },
                    "IArguments.__assignableToIArguments": {
                        "kind": 2,
                        "retType": "IArguments",
                        "isInstance": true
                    },
                    "RegExp": {
                        "kind": 9,
                        "retType": "RegExp",
                        "extendsTypes": []
                    },
                    "RegExp.__assignableToRegExp": {
                        "kind": 2,
                        "retType": "RegExp",
                        "isInstance": true
                    },
                    "Boolean": {
                        "kind": 9,
                        "retType": "Boolean",
                        "extendsTypes": []
                    },
                    "Boolean.toString": {
                        "kind": -1,
                        "retType": "string",
                        "attributes": {
                            "jsDoc": "Returns a string representation of an object."
                        },
                        "parameters": [],
                        "isInstance": true,
                        "pyQName": "Boolean.to_string"
                    },
                    "String@type": {
                        "kind": 9,
                        "retType": "String",
                        "attributes": {
                            "blockNamespace": "text",
                            "jsDoc": "Combine, split, and search text strings."
                        },
                        "extendsTypes": [],
                        "pyQName": "String"
                    },
                    "String.fromCharCode": {
                        "kind": -3,
                        "retType": "string",
                        "attributes": {
                            "help": "math/from-char-code",
                            "weight": 1,
                            "blockNamespace": "text",
                            "blockId": "stringFromCharCode",
                            "block": "text from char code %code",
                            "jsDoc": "Make a string from the given ASCII character code.",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "label",
                                        "text": "text from char code ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "code",
                                        "ref": false
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "code",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "parameters": [
                            {
                                "name": "code"
                            }
                        ],
                        "pyQName": "String.from_char_code"
                    },
                    "Number@type": {
                        "kind": 9,
                        "retType": "Number",
                        "extendsTypes": [],
                        "pyQName": "Number"
                    },
                    "Number.toString": {
                        "kind": -1,
                        "retType": "string",
                        "attributes": {
                            "jsDoc": "Returns a string representation of a number."
                        },
                        "parameters": [],
                        "isInstance": true,
                        "pyQName": "Number.to_string"
                    },
                    "Array@type": {
                        "kind": 9,
                        "retType": "T[]",
                        "attributes": {
                            "blockNamespace": "Arrays",
                            "jsDoc": "Add, remove, and replace items in lists."
                        },
                        "extendsTypes": [],
                        "pyQName": "Array"
                    },
                    "Array.isArray": {
                        "kind": -3,
                        "retType": "boolean",
                        "attributes": {
                            "jsDoc": "Check if a given object is an array."
                        },
                        "parameters": [
                            {
                                "name": "obj",
                                "type": "any"
                            }
                        ],
                        "pyQName": "Array.is_array"
                    },
                    "Object@type": {
                        "kind": 9,
                        "retType": "Object",
                        "extendsTypes": [],
                        "pyQName": "Object"
                    },
                    "Object.keys": {
                        "kind": -3,
                        "retType": "string[]",
                        "attributes": {
                            "jsDoc": "Return the field names in an object."
                        },
                        "parameters": [
                            {
                                "name": "obj",
                                "type": "any"
                            }
                        ]
                    },
                    "Math.pow": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "paramHelp": {
                                "x": "The base value of the expression.",
                                "y": "The exponent value of the expression."
                            },
                            "jsDoc": "Returns the value of a base expression taken to a specified power."
                        },
                        "parameters": [
                            {
                                "name": "x",
                                "description": "The base value of the expression."
                            },
                            {
                                "name": "y",
                                "description": "The exponent value of the expression."
                            }
                        ]
                    },
                    "Math.random": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "help": "math/random",
                            "jsDoc": "Returns a pseudorandom number between 0 and 1."
                        },
                        "parameters": []
                    },
                    "Math.randomRange": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "paramDefl": {
                                "min": "0",
                                "max": "10"
                            },
                            "blockId": "device_random_deprecated",
                            "block": "pick random %min|to %limit",
                            "help": "math/random-range",
                            "deprecated": "true",
                            "paramHelp": {
                                "min": "the lower inclusive bound, eg: 0",
                                "max": "the upper inclusive bound, eg: 10"
                            },
                            "jsDoc": "Returns a pseudorandom number between min and max included.\nIf both numbers are integral, the result is integral.",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "label",
                                        "text": "pick random ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "min",
                                        "ref": false
                                    },
                                    {
                                        "kind": "break"
                                    },
                                    {
                                        "kind": "label",
                                        "text": "to ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "limit",
                                        "ref": false
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "min",
                                        "ref": false
                                    },
                                    {
                                        "kind": "param",
                                        "name": "limit",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "parameters": [
                            {
                                "name": "min",
                                "description": "the lower inclusive bound, eg: 0",
                                "default": "0"
                            },
                            {
                                "name": "max",
                                "description": "the upper inclusive bound, eg: 10",
                                "default": "10"
                            }
                        ],
                        "pyQName": "Math.random_range"
                    },
                    "Math.log": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "help": "math",
                            "paramHelp": {
                                "x": "A number"
                            },
                            "jsDoc": "Returns the natural logarithm (base e) of a number."
                        },
                        "parameters": [
                            {
                                "name": "x",
                                "description": "A number"
                            }
                        ]
                    },
                    "Math.exp": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "help": "math",
                            "paramHelp": {
                                "x": "A number"
                            },
                            "jsDoc": "Returns returns ``e^x``."
                        },
                        "parameters": [
                            {
                                "name": "x",
                                "description": "A number"
                            }
                        ]
                    },
                    "Math.sin": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "help": "math/trigonometry",
                            "paramHelp": {
                                "x": "An angle in radians"
                            },
                            "jsDoc": "Returns the sine of a number."
                        },
                        "parameters": [
                            {
                                "name": "x",
                                "description": "An angle in radians"
                            }
                        ]
                    },
                    "Math.cos": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "help": "math/trigonometry",
                            "paramHelp": {
                                "x": "An angle in radians"
                            },
                            "jsDoc": "Returns the cosine of a number."
                        },
                        "parameters": [
                            {
                                "name": "x",
                                "description": "An angle in radians"
                            }
                        ]
                    },
                    "Math.tan": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "help": "math/trigonometry",
                            "paramHelp": {
                                "x": "An angle in radians"
                            },
                            "jsDoc": "Returns the tangent of a number."
                        },
                        "parameters": [
                            {
                                "name": "x",
                                "description": "An angle in radians"
                            }
                        ]
                    },
                    "Math.asin": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "help": "math/trigonometry",
                            "paramHelp": {
                                "x": "A number"
                            },
                            "jsDoc": "Returns the arcsine (in radians) of a number"
                        },
                        "parameters": [
                            {
                                "name": "x",
                                "description": "A number"
                            }
                        ]
                    },
                    "Math.acos": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "help": "math/trigonometry",
                            "paramHelp": {
                                "x": "A number"
                            },
                            "jsDoc": "Returns the arccosine (in radians) of a number"
                        },
                        "parameters": [
                            {
                                "name": "x",
                                "description": "A number"
                            }
                        ]
                    },
                    "Math.atan": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "help": "math/trigonometry",
                            "paramHelp": {
                                "x": "A number"
                            },
                            "jsDoc": "Returns the arctangent (in radians) of a number"
                        },
                        "parameters": [
                            {
                                "name": "x",
                                "description": "A number"
                            }
                        ]
                    },
                    "Math.atan2": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "help": "math/trigonometry",
                            "paramHelp": {
                                "y": "A number",
                                "x": "A number"
                            },
                            "jsDoc": "Returns the arctangent of the quotient of its arguments."
                        },
                        "parameters": [
                            {
                                "name": "y",
                                "description": "A number"
                            },
                            {
                                "name": "x",
                                "description": "A number"
                            }
                        ]
                    },
                    "Math.sqrt": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "help": "math",
                            "paramHelp": {
                                "x": "A numeric expression."
                            },
                            "jsDoc": "Returns the square root of a number."
                        },
                        "parameters": [
                            {
                                "name": "x",
                                "description": "A numeric expression."
                            }
                        ]
                    },
                    "Math.ceil": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "help": "math",
                            "paramHelp": {
                                "x": "A numeric expression."
                            },
                            "jsDoc": "Returns the smallest number greater than or equal to its numeric argument."
                        },
                        "parameters": [
                            {
                                "name": "x",
                                "description": "A numeric expression."
                            }
                        ]
                    },
                    "Math.floor": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "help": "math",
                            "paramHelp": {
                                "x": "A numeric expression."
                            },
                            "jsDoc": "Returns the greatest number less than or equal to its numeric argument."
                        },
                        "parameters": [
                            {
                                "name": "x",
                                "description": "A numeric expression."
                            }
                        ]
                    },
                    "Math.trunc": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "help": "math",
                            "paramHelp": {
                                "x": "A numeric expression."
                            },
                            "jsDoc": "Returns the number with the decimal part truncated."
                        },
                        "parameters": [
                            {
                                "name": "x",
                                "description": "A numeric expression."
                            }
                        ],
                        "pyQName": "int"
                    },
                    "Math.round": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "help": "math",
                            "paramHelp": {
                                "x": "The value to be rounded to the nearest number."
                            },
                            "jsDoc": "Returns a supplied numeric expression rounded to the nearest number."
                        },
                        "parameters": [
                            {
                                "name": "x",
                                "description": "The value to be rounded to the nearest number."
                            }
                        ]
                    },
                    "Math.imul": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "help": "math",
                            "paramHelp": {
                                "x": "The first number",
                                "y": "The second number"
                            },
                            "jsDoc": "Returns the value of integer signed 32 bit multiplication of two numbers."
                        },
                        "parameters": [
                            {
                                "name": "x",
                                "description": "The first number"
                            },
                            {
                                "name": "y",
                                "description": "The second number"
                            }
                        ]
                    },
                    "Math.idiv": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "help": "math",
                            "paramHelp": {
                                "x": "The first number",
                                "y": "The second number"
                            },
                            "jsDoc": "Returns the value of integer signed 32 bit division of two numbers."
                        },
                        "parameters": [
                            {
                                "name": "x",
                                "description": "The first number"
                            },
                            {
                                "name": "y",
                                "description": "The second number"
                            }
                        ]
                    },
                    "NaN": {
                        "kind": 4,
                        "retType": "number",
                        "attributes": {
                            "jsDoc": "Constant representing Not-A-Number."
                        },
                        "pyQName": "na_n"
                    },
                    "Infinity": {
                        "kind": 4,
                        "retType": "number",
                        "attributes": {
                            "jsDoc": "Constant representing positive infinity."
                        },
                        "pyQName": "infinity"
                    },
                    "isNaN": {
                        "kind": -3,
                        "retType": "boolean",
                        "parameters": [
                            {
                                "name": "x"
                            }
                        ],
                        "pyQName": "is_na_n"
                    },
                    "Number.isNaN": {
                        "kind": -3,
                        "retType": "boolean",
                        "attributes": {
                            "jsDoc": "Check if a given value is of type Number and it is a NaN."
                        },
                        "parameters": [
                            {
                                "name": "x",
                                "type": "any"
                            }
                        ],
                        "pyQName": "Number.is_na_n"
                    },
                    "StringMap": {
                        "kind": 9,
                        "retType": "StringMap",
                        "attributes": {
                            "jsDoc": "A dictionary from string key to string values"
                        },
                        "extendsTypes": []
                    },
                    "parseInt": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "paramDefl": {
                                "text": "123"
                            },
                            "help": "text/parse-int",
                            "blockId": "string_parseint",
                            "block": "parse to integer %text",
                            "blockNamespace": "text",
                            "explicitDefaults": ["text"],
                            "blockHidden": true,
                            "paramHelp": {
                                "text": "A string to convert into an integral number. eg: \"123\"",
                                "radix": "optional A value between 2 and 36 that specifies the base of the number in text."
                            },
                            "jsDoc": "Convert a string to an integer.\n\n\nIf this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal.\nAll other strings are considered decimal.",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "label",
                                        "text": "parse to integer ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "text",
                                        "ref": false
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "text",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "parameters": [
                            {
                                "name": "text",
                                "description": "A string to convert into an integral number. eg: \"123\"",
                                "type": "string",
                                "initializer": "123",
                                "default": "123"
                            },
                            {
                                "name": "radix",
                                "description": "optional A value between 2 and 36 that specifies the base of the number in text.",
                                "initializer": "undefined"
                            }
                        ],
                        "pyQName": "int"
                    },
                    "helpers": {
                        "kind": 5,
                        "retType": ""
                    },
                    "helpers.arrayFill": {
                        "kind": -3,
                        "retType": "T[]",
                        "parameters": [
                            {
                                "name": "O",
                                "type": "T[]"
                            },
                            {
                                "name": "value",
                                "type": "T"
                            },
                            {
                                "name": "start",
                                "initializer": "undefined"
                            },
                            {
                                "name": "end",
                                "initializer": "undefined"
                            }
                        ],
                        "pyQName": "helpers.array_fill"
                    },
                    "helpers.arraySplice": {
                        "kind": -3,
                        "parameters": [
                            {
                                "name": "arr",
                                "type": "T[]"
                            },
                            {
                                "name": "start"
                            },
                            {
                                "name": "len"
                            }
                        ],
                        "pyQName": "helpers.array_splice"
                    },
                    "helpers.arrayReverse": {
                        "kind": -3,
                        "parameters": [
                            {
                                "name": "arr",
                                "type": "T[]"
                            }
                        ],
                        "pyQName": "helpers.array_reverse"
                    },
                    "helpers.arrayShift": {
                        "kind": -3,
                        "retType": "T",
                        "parameters": [
                            {
                                "name": "arr",
                                "type": "T[]"
                            }
                        ],
                        "pyQName": "helpers.array_shift"
                    },
                    "helpers.arrayJoin": {
                        "kind": -3,
                        "retType": "string",
                        "parameters": [
                            {
                                "name": "arr",
                                "type": "T[]"
                            },
                            {
                                "name": "sep",
                                "type": "string",
                                "initializer": "undefined"
                            }
                        ],
                        "pyQName": "helpers.array_join"
                    },
                    "helpers.arrayUnshift": {
                        "kind": -3,
                        "retType": "number",
                        "parameters": [
                            {
                                "name": "arr",
                                "type": "T[]"
                            },
                            {
                                "name": "value",
                                "type": "T"
                            }
                        ],
                        "pyQName": "helpers.array_unshift"
                    },
                    "helpers.arraySort": {
                        "kind": -3,
                        "retType": "T[]",
                        "parameters": [
                            {
                                "name": "arr",
                                "type": "T[]"
                            },
                            {
                                "name": "callbackfn",
                                "type": "(value1: T, value2: T) => number",
                                "initializer": "undefined",
                                "handlerParameters": [
                                    {
                                        "name": "value1",
                                        "type": "T"
                                    },
                                    {
                                        "name": "value2",
                                        "type": "T"
                                    }
                                ]
                            }
                        ],
                        "pyQName": "helpers.array_sort"
                    },
                    "helpers.arrayMap": {
                        "kind": -3,
                        "retType": "U[]",
                        "parameters": [
                            {
                                "name": "arr",
                                "type": "T[]"
                            },
                            {
                                "name": "callbackfn",
                                "type": "(value: T, index: number) => U",
                                "handlerParameters": [
                                    {
                                        "name": "value",
                                        "type": "T"
                                    },
                                    {
                                        "name": "index",
                                        "type": "number"
                                    }
                                ]
                            }
                        ],
                        "pyQName": "helpers.array_map"
                    },
                    "helpers.arraySome": {
                        "kind": -3,
                        "retType": "boolean",
                        "parameters": [
                            {
                                "name": "arr",
                                "type": "T[]"
                            },
                            {
                                "name": "callbackfn",
                                "type": "(value: T, index: number) => boolean",
                                "handlerParameters": [
                                    {
                                        "name": "value",
                                        "type": "T"
                                    },
                                    {
                                        "name": "index",
                                        "type": "number"
                                    }
                                ]
                            }
                        ],
                        "pyQName": "helpers.array_some"
                    },
                    "helpers.arrayEvery": {
                        "kind": -3,
                        "retType": "boolean",
                        "parameters": [
                            {
                                "name": "arr",
                                "type": "T[]"
                            },
                            {
                                "name": "callbackfn",
                                "type": "(value: T, index: number) => boolean",
                                "handlerParameters": [
                                    {
                                        "name": "value",
                                        "type": "T"
                                    },
                                    {
                                        "name": "index",
                                        "type": "number"
                                    }
                                ]
                            }
                        ],
                        "pyQName": "helpers.array_every"
                    },
                    "helpers.arrayForEach": {
                        "kind": -3,
                        "parameters": [
                            {
                                "name": "arr",
                                "type": "T[]"
                            },
                            {
                                "name": "callbackfn",
                                "type": "(value: T, index: number) => void",
                                "handlerParameters": [
                                    {
                                        "name": "value",
                                        "type": "T"
                                    },
                                    {
                                        "name": "index",
                                        "type": "number"
                                    }
                                ]
                            }
                        ],
                        "pyQName": "helpers.array_for_each"
                    },
                    "helpers.arrayFilter": {
                        "kind": -3,
                        "retType": "T[]",
                        "parameters": [
                            {
                                "name": "arr",
                                "type": "T[]"
                            },
                            {
                                "name": "callbackfn",
                                "type": "(value: T, index: number) => boolean",
                                "handlerParameters": [
                                    {
                                        "name": "value",
                                        "type": "T"
                                    },
                                    {
                                        "name": "index",
                                        "type": "number"
                                    }
                                ]
                            }
                        ],
                        "pyQName": "helpers.array_filter"
                    },
                    "helpers.arrayFind": {
                        "kind": -3,
                        "retType": "T",
                        "parameters": [
                            {
                                "name": "arr",
                                "type": "T[]"
                            },
                            {
                                "name": "callbackfn",
                                "type": "(value: T, index: number) => boolean",
                                "handlerParameters": [
                                    {
                                        "name": "value",
                                        "type": "T"
                                    },
                                    {
                                        "name": "index",
                                        "type": "number"
                                    }
                                ]
                            }
                        ],
                        "pyQName": "helpers.array_find"
                    },
                    "helpers.arrayReduce": {
                        "kind": -3,
                        "retType": "U",
                        "parameters": [
                            {
                                "name": "arr",
                                "type": "T[]"
                            },
                            {
                                "name": "callbackfn",
                                "type": "(previousValue: U, currentValue: T, currentIndex: number) => U",
                                "handlerParameters": [
                                    {
                                        "name": "previousValue",
                                        "type": "U"
                                    },
                                    {
                                        "name": "currentValue",
                                        "type": "T"
                                    },
                                    {
                                        "name": "currentIndex",
                                        "type": "number"
                                    }
                                ]
                            },
                            {
                                "name": "initialValue",
                                "type": "U"
                            }
                        ],
                        "pyQName": "helpers.array_reduce"
                    },
                    "helpers.arrayConcat": {
                        "kind": -3,
                        "retType": "T[]",
                        "parameters": [
                            {
                                "name": "arr",
                                "type": "T[]"
                            },
                            {
                                "name": "otherArr",
                                "type": "T[]"
                            }
                        ],
                        "pyQName": "helpers.array_concat"
                    },
                    "helpers.arrayPickRandom": {
                        "kind": -3,
                        "retType": "T",
                        "parameters": [
                            {
                                "name": "arr",
                                "type": "T[]"
                            }
                        ],
                        "pyQName": "helpers.array_pick_random"
                    },
                    "helpers.arraySlice": {
                        "kind": -3,
                        "retType": "T[]",
                        "parameters": [
                            {
                                "name": "arr",
                                "type": "T[]"
                            },
                            {
                                "name": "start",
                                "initializer": "undefined"
                            },
                            {
                                "name": "end",
                                "initializer": "undefined"
                            }
                        ],
                        "pyQName": "helpers.array_slice"
                    },
                    "helpers.stringReplace": {
                        "kind": -3,
                        "retType": "string",
                        "parameters": [
                            {
                                "name": "s",
                                "type": "string"
                            },
                            {
                                "name": "toReplace",
                                "type": "string"
                            },
                            {
                                "name": "replacer",
                                "type": "string | ((sub: string) => string)"
                            }
                        ],
                        "pyQName": "helpers.string_replace"
                    },
                    "helpers.stringReplaceAll": {
                        "kind": -3,
                        "retType": "string",
                        "parameters": [
                            {
                                "name": "s",
                                "type": "string"
                            },
                            {
                                "name": "toReplace",
                                "type": "string"
                            },
                            {
                                "name": "replacer",
                                "type": "string | ((sub: string) => string)"
                            }
                        ],
                        "pyQName": "helpers.string_replace_all"
                    },
                    "helpers.stringSubstr": {
                        "kind": -3,
                        "retType": "string",
                        "parameters": [
                            {
                                "name": "s",
                                "type": "string"
                            },
                            {
                                "name": "start"
                            },
                            {
                                "name": "length",
                                "initializer": "undefined"
                            }
                        ],
                        "pyQName": "helpers.string_substr"
                    },
                    "helpers.stringSlice": {
                        "kind": -3,
                        "retType": "string",
                        "parameters": [
                            {
                                "name": "s",
                                "type": "string"
                            },
                            {
                                "name": "start"
                            },
                            {
                                "name": "end",
                                "initializer": "undefined"
                            }
                        ],
                        "pyQName": "helpers.string_slice"
                    },
                    "helpers.stringToUpperCase": {
                        "kind": -3,
                        "retType": "string",
                        "parameters": [
                            {
                                "name": "s",
                                "type": "string"
                            }
                        ],
                        "pyQName": "helpers.string_to_upper_case"
                    },
                    "helpers.stringToLowerCase": {
                        "kind": -3,
                        "retType": "string",
                        "parameters": [
                            {
                                "name": "s",
                                "type": "string"
                            }
                        ],
                        "pyQName": "helpers.string_to_lower_case"
                    },
                    "helpers.stringSplit": {
                        "kind": -3,
                        "retType": "string[]",
                        "parameters": [
                            {
                                "name": "S",
                                "type": "string"
                            },
                            {
                                "name": "separator",
                                "type": "string",
                                "initializer": "undefined"
                            },
                            {
                                "name": "limit",
                                "initializer": "undefined"
                            }
                        ],
                        "pyQName": "helpers.string_split"
                    },
                    "helpers.stringTrim": {
                        "kind": -3,
                        "retType": "string",
                        "parameters": [
                            {
                                "name": "s",
                                "type": "string"
                            }
                        ],
                        "pyQName": "helpers.string_trim"
                    },
                    "helpers.isWhitespace": {
                        "kind": -3,
                        "retType": "boolean",
                        "parameters": [
                            {
                                "name": "c"
                            }
                        ],
                        "pyQName": "helpers.is_whitespace"
                    },
                    "helpers.stringEmpty": {
                        "kind": -3,
                        "retType": "boolean",
                        "parameters": [
                            {
                                "name": "S",
                                "type": "string"
                            }
                        ],
                        "pyQName": "helpers.string_empty"
                    },
                    "Math.clamp": {
                        "kind": -3,
                        "retType": "number",
                        "parameters": [
                            {
                                "name": "min"
                            },
                            {
                                "name": "max"
                            },
                            {
                                "name": "value"
                            }
                        ]
                    },
                    "Math.abs": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "blockId": "math_op3",
                            "help": "math/abs",
                            "paramHelp": {
                                "x": "A numeric expression for which the absolute value is needed."
                            },
                            "jsDoc": "Returns the absolute value of a number (the value without regard to whether it is positive or negative).\nFor example, the absolute value of -5 is the same as the absolute value of 5."
                        },
                        "parameters": [
                            {
                                "name": "x",
                                "description": "A numeric expression for which the absolute value is needed."
                            }
                        ],
                        "pyQName": "abs"
                    },
                    "Math.sign": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "paramHelp": {
                                "x": "The numeric expression to test"
                            },
                            "jsDoc": "Returns the sign of the x, indicating whether x is positive, negative or zero."
                        },
                        "parameters": [
                            {
                                "name": "x",
                                "description": "The numeric expression to test"
                            }
                        ]
                    },
                    "Math.max": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "blockId": "math_op2",
                            "help": "math/max",
                            "jsDoc": "Returns the larger of two supplied numeric expressions."
                        },
                        "parameters": [
                            {
                                "name": "a"
                            },
                            {
                                "name": "b"
                            }
                        ],
                        "pyQName": "max"
                    },
                    "Math.min": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "blockId": "math_op2",
                            "help": "math/min",
                            "jsDoc": "Returns the smaller of two supplied numeric expressions."
                        },
                        "parameters": [
                            {
                                "name": "a"
                            },
                            {
                                "name": "b"
                            }
                        ],
                        "pyQName": "min"
                    },
                    "Math.roundWithPrecision": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "paramHelp": {
                                "x": "the number to round",
                                "digits": "the number of resulting digits"
                            },
                            "jsDoc": "Rounds ``x`` to a number with the given number of ``digits``"
                        },
                        "parameters": [
                            {
                                "name": "x",
                                "description": "the number to round"
                            },
                            {
                                "name": "digits",
                                "description": "the number of resulting digits"
                            }
                        ],
                        "pyQName": "Math.round_with_precision"
                    },
                    "__internal": {
                        "kind": 5,
                        "retType": "",
                        "attributes": {
                            "blockHidden": true
                        }
                    },
                    "__internal.__downUp": {
                        "kind": -3,
                        "retType": "boolean",
                        "attributes": {
                            "shim": "TD_ID",
                            "blockHidden": true,
                            "blockId": "toggleDownUp",
                            "block": "%down",
                            "paramFieldEditor": {
                                "down": "toggledownup"
                            },
                            "paramFieldEditorOptions": {
                                "down": {
                                    "decompileLiterals": "true"
                                }
                            },
                            "jsDoc": "A shim to render a boolean as a down/up toggle",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "param",
                                        "name": "down",
                                        "ref": false
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "down",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "parameters": [
                            {
                                "name": "down",
                                "type": "boolean"
                            }
                        ]
                    },
                    "__internal.__upDown": {
                        "kind": -3,
                        "retType": "boolean",
                        "attributes": {
                            "shim": "TD_ID",
                            "blockHidden": true,
                            "blockId": "toggleUpDown",
                            "block": "%up",
                            "paramFieldEditor": {
                                "up": "toggleupdown"
                            },
                            "paramFieldEditorOptions": {
                                "up": {
                                    "decompileLiterals": "true"
                                }
                            },
                            "jsDoc": "A shim to render a boolean as a up/down toggle",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "param",
                                        "name": "up",
                                        "ref": false
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "up",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "parameters": [
                            {
                                "name": "up",
                                "type": "boolean"
                            }
                        ]
                    },
                    "__internal.__highLow": {
                        "kind": -3,
                        "retType": "boolean",
                        "attributes": {
                            "shim": "TD_ID",
                            "blockHidden": true,
                            "blockId": "toggleHighLow",
                            "block": "%high",
                            "paramFieldEditor": {
                                "high": "togglehighlow"
                            },
                            "paramFieldEditorOptions": {
                                "high": {
                                    "decompileLiterals": "true"
                                }
                            },
                            "jsDoc": "A shim to render a boolean as a high/low toggle",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "param",
                                        "name": "high",
                                        "ref": false
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "high",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "parameters": [
                            {
                                "name": "high",
                                "type": "boolean"
                            }
                        ]
                    },
                    "__internal.__onOff": {
                        "kind": -3,
                        "retType": "boolean",
                        "attributes": {
                            "shim": "TD_ID",
                            "blockHidden": true,
                            "blockId": "toggleOnOff",
                            "block": "%on",
                            "paramFieldEditor": {
                                "on": "toggleonoff"
                            },
                            "paramFieldEditorOptions": {
                                "on": {
                                    "decompileLiterals": "true"
                                }
                            },
                            "jsDoc": "A shim to render a boolean as a on/off toggle",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "param",
                                        "name": "on",
                                        "ref": false
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "on",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "parameters": [
                            {
                                "name": "on",
                                "type": "boolean"
                            }
                        ]
                    },
                    "__internal.__yesNo": {
                        "kind": -3,
                        "retType": "boolean",
                        "attributes": {
                            "shim": "TD_ID",
                            "blockHidden": true,
                            "blockId": "toggleYesNo",
                            "block": "%yes",
                            "paramFieldEditor": {
                                "yes": "toggleyesno"
                            },
                            "paramFieldEditorOptions": {
                                "yes": {
                                    "decompileLiterals": "true"
                                }
                            },
                            "jsDoc": "A shim to render a boolean as a yes/no toggle",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "param",
                                        "name": "yes",
                                        "ref": false
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "yes",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "parameters": [
                            {
                                "name": "yes",
                                "type": "boolean"
                            }
                        ]
                    },
                    "__internal.__winLose": {
                        "kind": -3,
                        "retType": "boolean",
                        "attributes": {
                            "shim": "TD_ID",
                            "blockHidden": true,
                            "blockId": "toggleWinLose",
                            "block": "%win",
                            "paramFieldEditor": {
                                "win": "togglewinlose"
                            },
                            "paramFieldEditorOptions": {
                                "win": {
                                    "decompileLiterals": "true"
                                }
                            },
                            "jsDoc": "A shim to render a boolean as a win/lose toggle",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "param",
                                        "name": "win",
                                        "ref": false
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "win",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "parameters": [
                            {
                                "name": "win",
                                "type": "boolean"
                            }
                        ]
                    },
                    "__internal.__colorNumberPicker": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "paramDefl": {
                                "value": "0xff0000"
                            },
                            "blockId": "colorNumberPicker",
                            "block": "%value",
                            "blockHidden": true,
                            "shim": "TD_ID",
                            "colorSecondary": "#FFFFFF",
                            "paramFieldEditor": {
                                "value": "colornumber"
                            },
                            "paramFieldEditorOptions": {
                                "value": {
                                    "decompileLiterals": "true",
                                    "colours": "[\"#ff0000\",\"#ff8000\",\"#ffff00\",\"#ff9da5\",\"#00ff00\",\"#b09eff\",\"#00ffff\",\"#007fff\",\"#65471f\",\"#0000ff\",\"#7f00ff\",\"#ff0080\",\"#ff00ff\",\"#ffffff\",\"#999999\",\"#000000\"]",
                                    "columns": "4",
                                    "className": "rgbColorPicker"
                                }
                            },
                            "explicitDefaults": ["value"],
                            "paramHelp": {
                                "color": "color"
                            },
                            "jsDoc": "Get the color wheel field editor",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "param",
                                        "name": "value",
                                        "ref": false
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "value",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "parameters": [
                            {
                                "name": "value",
                                "initializer": "0xff0000",
                                "default": "0xff0000"
                            }
                        ]
                    },
                    "__internal.__colorWheelPicker": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "paramDefl": {
                                "value": "10"
                            },
                            "blockId": "colorWheelPicker",
                            "block": "%value",
                            "blockHidden": true,
                            "shim": "TD_ID",
                            "colorSecondary": "#FFFFFF",
                            "paramFieldEditor": {
                                "value": "colorwheel"
                            },
                            "paramFieldEditorOptions": {
                                "value": {
                                    "decompileLiterals": "true",
                                    "sliderWidth": "200",
                                    "min": "0",
                                    "max": "255"
                                }
                            },
                            "paramHelp": {
                                "value": "value between 0 to 255 to get a color value, eg: 10"
                            },
                            "jsDoc": "Get the color wheel field editor",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "param",
                                        "name": "value",
                                        "ref": false
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "value",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "parameters": [
                            {
                                "name": "value",
                                "description": "value between 0 to 255 to get a color value, eg: 10",
                                "default": "10"
                            }
                        ]
                    },
                    "__internal.__colorWheelHsvPicker": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "paramDefl": {
                                "value": "10"
                            },
                            "blockId": "colorWheelHsvPicker",
                            "block": "%value",
                            "blockHidden": true,
                            "shim": "TD_ID",
                            "colorSecondary": "#FFFFFF",
                            "paramFieldEditor": {
                                "value": "colorwheel"
                            },
                            "paramFieldEditorOptions": {
                                "value": {
                                    "decompileLiterals": "true",
                                    "sliderWidth": "200",
                                    "min": "0",
                                    "max": "255",
                                    "channel": "hsvfast"
                                }
                            },
                            "paramHelp": {
                                "value": "value between 0 to 255 to get a color value, eg: 10"
                            },
                            "jsDoc": "Get the color wheel field editor using HSV values",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "param",
                                        "name": "value",
                                        "ref": false
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "value",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "parameters": [
                            {
                                "name": "value",
                                "description": "value between 0 to 255 to get a color value, eg: 10",
                                "default": "10"
                            }
                        ]
                    },
                    "__internal.__speedPicker": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "paramDefl": {
                                "speed": "50"
                            },
                            "blockId": "speedPicker",
                            "block": "%speed",
                            "shim": "TD_ID",
                            "paramFieldEditor": {
                                "speed": "speed"
                            },
                            "colorSecondary": "#FFFFFF",
                            "weight": 0,
                            "blockHidden": true,
                            "paramFieldEditorOptions": {
                                "speed": {
                                    "decompileLiterals": "1"
                                }
                            },
                            "paramHelp": {
                                "speed": "the speed, eg: 50"
                            },
                            "jsDoc": "A speed picker",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "param",
                                        "name": "speed",
                                        "ref": false
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "speed",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "parameters": [
                            {
                                "name": "speed",
                                "description": "the speed, eg: 50",
                                "default": "50"
                            }
                        ]
                    },
                    "__internal.__turnRatioPicker": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "paramDefl": {
                                "turnratio": "0"
                            },
                            "blockId": "turnRatioPicker",
                            "block": "%turnratio",
                            "shim": "TD_ID",
                            "paramFieldEditor": {
                                "turnratio": "turnratio"
                            },
                            "colorSecondary": "#FFFFFF",
                            "weight": 0,
                            "blockHidden": true,
                            "paramFieldEditorOptions": {
                                "turnRatio": {
                                    "decompileLiterals": "1"
                                }
                            },
                            "paramHelp": {
                                "turnratio": "the turn ratio, eg: 0"
                            },
                            "jsDoc": "A turn ratio picker",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "param",
                                        "name": "turnratio",
                                        "ref": false
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "turnratio",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "parameters": [
                            {
                                "name": "turnratio",
                                "description": "the turn ratio, eg: 0",
                                "default": "0"
                            }
                        ]
                    },
                    "__internal.__protractor": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "blockId": "protractorPicker",
                            "block": "%angle",
                            "shim": "TD_ID",
                            "paramFieldEditor": {
                                "angle": "protractor"
                            },
                            "paramFieldEditorOptions": {
                                "angle": {
                                    "decompileLiterals": "1"
                                }
                            },
                            "colorSecondary": "#FFFFFF",
                            "blockHidden": true,
                            "jsDoc": "A field editor that displays a protractor",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "param",
                                        "name": "angle",
                                        "ref": false
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "angle",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "parameters": [
                            {
                                "name": "angle"
                            }
                        ]
                    },
                    "__internal.__timePicker": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "paramDefl": {
                                "ms": "500"
                            },
                            "blockId": "timePicker",
                            "block": "%ms",
                            "blockHidden": true,
                            "shim": "TD_ID",
                            "colorSecondary": "#FFFFFF",
                            "paramFieldEditor": {
                                "ms": "numberdropdown"
                            },
                            "paramFieldEditorOptions": {
                                "ms": {
                                    "decompileLiterals": "true",
                                    "data": "[[\"100 ms\", 100], [\"200 ms\", 200], [\"500 ms\", 500], [\"1 second\", 1000], [\"2 seconds\", 2000], [\"5 seconds\", 5000]]"
                                }
                            },
                            "paramHelp": {
                                "ms": "time duration in milliseconds, eg: 500, 1000"
                            },
                            "jsDoc": "Get the time field editor",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "param",
                                        "name": "ms",
                                        "ref": false
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "ms",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "parameters": [
                            {
                                "name": "ms",
                                "description": "time duration in milliseconds, eg: 500, 1000",
                                "default": "500"
                            }
                        ]
                    },
                    "Math.randomBoolean": {
                        "kind": -3,
                        "retType": "boolean",
                        "attributes": {
                            "blockId": "logic_random",
                            "block": "pick random true or false",
                            "help": "math/random-boolean",
                            "weight": 0,
                            "jsDoc": "Generates a `true` or `false` value randomly, just like flipping a coin.",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "label",
                                        "text": "pick random true or false",
                                        "style": []
                                    }
                                ],
                                "parameters": []
                            }
                        },
                        "parameters": [],
                        "pyQName": "Math.random_boolean"
                    },
                    "_py": {
                        "kind": 5,
                        "retType": ""
                    },
                    "_py.Array": {
                        "kind": 9,
                        "retType": "_py.Array",
                        "extendsTypes": []
                    },
                    "_py.Array.append": {
                        "kind": -1,
                        "attributes": {
                            "py2tsOverride": "push($0)"
                        },
                        "parameters": [
                            {
                                "name": "value",
                                "type": "any"
                            }
                        ],
                        "isInstance": true
                    },
                    "_py.Array.extend": {
                        "kind": -1,
                        "attributes": {
                            "py2tsOverride": "concat($0)"
                        },
                        "parameters": [
                            {
                                "name": "other",
                                "type": "_py.Array"
                            }
                        ],
                        "isInstance": true
                    },
                    "_py.Array.insert": {
                        "kind": -1,
                        "attributes": {
                            "py2tsOverride": "insertAt($0, $1)"
                        },
                        "parameters": [
                            {
                                "name": "index"
                            },
                            {
                                "name": "value",
                                "type": "any"
                            }
                        ],
                        "isInstance": true
                    },
                    "_py.Array.remove": {
                        "kind": -1,
                        "attributes": {
                            "py2tsOverride": "removeElement($0)"
                        },
                        "parameters": [
                            {
                                "name": "value",
                                "type": "any"
                            }
                        ],
                        "isInstance": true
                    },
                    "_py.Array.sort": {
                        "kind": -1,
                        "attributes": {
                            "py2tsOverride": "sort($0?)"
                        },
                        "parameters": [
                            {
                                "name": "sorter",
                                "type": "(a: any, b: any) => number",
                                "initializer": "undefined",
                                "handlerParameters": [
                                    {
                                        "name": "a",
                                        "type": "any"
                                    },
                                    {
                                        "name": "b",
                                        "type": "any"
                                    }
                                ]
                            }
                        ],
                        "isInstance": true
                    },
                    "_py.Array.reverse": {
                        "kind": -1,
                        "attributes": {
                            "py2tsOverride": "reverse()"
                        },
                        "parameters": [],
                        "isInstance": true
                    },
                    "_py.Array.copy": {
                        "kind": -1,
                        "attributes": {
                            "py2tsOverride": "slice()"
                        },
                        "parameters": [],
                        "isInstance": true
                    },
                    "_py.Array.pop": {
                        "kind": -1,
                        "retType": "any",
                        "attributes": {
                            "pyHelper": "py_array_pop"
                        },
                        "parameters": [
                            {
                                "name": "index",
                                "initializer": "undefined"
                            }
                        ],
                        "isInstance": true
                    },
                    "_py.Array.clear": {
                        "kind": -1,
                        "attributes": {
                            "pyHelper": "py_array_clear"
                        },
                        "parameters": [],
                        "isInstance": true
                    },
                    "_py.Array.index": {
                        "kind": -1,
                        "retType": "number",
                        "attributes": {
                            "pyHelper": "py_array_index"
                        },
                        "parameters": [
                            {
                                "name": "value",
                                "type": "any"
                            },
                            {
                                "name": "start",
                                "initializer": "undefined"
                            },
                            {
                                "name": "end",
                                "initializer": "undefined"
                            }
                        ],
                        "isInstance": true
                    },
                    "_py.Array.count": {
                        "kind": -1,
                        "retType": "number",
                        "attributes": {
                            "pyHelper": "py_array_count"
                        },
                        "parameters": [
                            {
                                "name": "value",
                                "type": "any"
                            }
                        ],
                        "isInstance": true
                    },
                    "_py.String": {
                        "kind": 9,
                        "retType": "_py.String",
                        "extendsTypes": []
                    },
                    "_py.String.capitalize": {
                        "kind": -1,
                        "retType": "string",
                        "attributes": {
                            "pyHelper": "py_string_capitalize"
                        },
                        "parameters": [],
                        "isInstance": true
                    },
                    "_py.String.casefold": {
                        "kind": -1,
                        "retType": "string",
                        "attributes": {
                            "pyHelper": "py_string_casefold"
                        },
                        "parameters": [],
                        "isInstance": true
                    },
                    "_py.String.center": {
                        "kind": -1,
                        "retType": "string",
                        "attributes": {
                            "pyHelper": "py_string_center"
                        },
                        "parameters": [
                            {
                                "name": "width"
                            },
                            {
                                "name": "fillChar",
                                "type": "string",
                                "initializer": "undefined"
                            }
                        ],
                        "isInstance": true
                    },
                    "_py.String.count": {
                        "kind": -1,
                        "retType": "number",
                        "attributes": {
                            "pyHelper": "py_string_count"
                        },
                        "parameters": [
                            {
                                "name": "sub",
                                "type": "string"
                            },
                            {
                                "name": "start",
                                "initializer": "undefined"
                            },
                            {
                                "name": "end",
                                "initializer": "undefined"
                            }
                        ],
                        "isInstance": true
                    },
                    "_py.String.endswith": {
                        "kind": -1,
                        "retType": "boolean",
                        "attributes": {
                            "pyHelper": "py_string_endswith"
                        },
                        "parameters": [
                            {
                                "name": "suffix",
                                "type": "string"
                            },
                            {
                                "name": "start",
                                "initializer": "undefined"
                            },
                            {
                                "name": "end",
                                "initializer": "undefined"
                            }
                        ],
                        "isInstance": true
                    },
                    "_py.String.find": {
                        "kind": -1,
                        "retType": "number",
                        "attributes": {
                            "pyHelper": "py_string_find"
                        },
                        "parameters": [
                            {
                                "name": "sub",
                                "type": "string"
                            },
                            {
                                "name": "start",
                                "initializer": "undefined"
                            },
                            {
                                "name": "end",
                                "initializer": "undefined"
                            }
                        ],
                        "isInstance": true
                    },
                    "_py.String.index": {
                        "kind": -1,
                        "retType": "number",
                        "attributes": {
                            "pyHelper": "py_string_index"
                        },
                        "parameters": [
                            {
                                "name": "sub",
                                "type": "string"
                            },
                            {
                                "name": "start",
                                "initializer": "undefined"
                            },
                            {
                                "name": "end",
                                "initializer": "undefined"
                            }
                        ],
                        "isInstance": true
                    },
                    "_py.String.isalnum": {
                        "kind": -1,
                        "retType": "boolean",
                        "attributes": {
                            "pyHelper": "py_string_isalnum"
                        },
                        "parameters": [],
                        "isInstance": true
                    },
                    "_py.String.isalpha": {
                        "kind": -1,
                        "retType": "boolean",
                        "attributes": {
                            "pyHelper": "py_string_isalpha"
                        },
                        "parameters": [],
                        "isInstance": true
                    },
                    "_py.String.isascii": {
                        "kind": -1,
                        "retType": "boolean",
                        "attributes": {
                            "pyHelper": "py_string_isascii"
                        },
                        "parameters": [],
                        "isInstance": true
                    },
                    "_py.String.isdigit": {
                        "kind": -1,
                        "retType": "boolean",
                        "attributes": {
                            "pyHelper": "py_string_isdigit"
                        },
                        "parameters": [],
                        "isInstance": true
                    },
                    "_py.String.isnumeric": {
                        "kind": -1,
                        "retType": "boolean",
                        "attributes": {
                            "pyHelper": "py_string_isnumeric"
                        },
                        "parameters": [],
                        "isInstance": true
                    },
                    "_py.String.isspace": {
                        "kind": -1,
                        "retType": "boolean",
                        "attributes": {
                            "pyHelper": "py_string_isspace"
                        },
                        "parameters": [],
                        "isInstance": true
                    },
                    "_py.String.isdecimal": {
                        "kind": -1,
                        "retType": "boolean",
                        "attributes": {
                            "pyHelper": "py_string_isdecimal"
                        },
                        "parameters": [],
                        "isInstance": true
                    },
                    "_py.String.isidentifier": {
                        "kind": -1,
                        "retType": "boolean",
                        "attributes": {
                            "pyHelper": "py_string_isidentifier"
                        },
                        "parameters": [],
                        "isInstance": true
                    },
                    "_py.String.islower": {
                        "kind": -1,
                        "retType": "boolean",
                        "attributes": {
                            "pyHelper": "py_string_islower"
                        },
                        "parameters": [],
                        "isInstance": true
                    },
                    "_py.String.isprintable": {
                        "kind": -1,
                        "retType": "boolean",
                        "attributes": {
                            "pyHelper": "py_string_isprintable"
                        },
                        "parameters": [],
                        "isInstance": true
                    },
                    "_py.String.istitle": {
                        "kind": -1,
                        "retType": "boolean",
                        "attributes": {
                            "pyHelper": "py_string_istitle"
                        },
                        "parameters": [],
                        "isInstance": true
                    },
                    "_py.String.isupper": {
                        "kind": -1,
                        "retType": "boolean",
                        "attributes": {
                            "pyHelper": "py_string_isupper"
                        },
                        "parameters": [],
                        "isInstance": true
                    },
                    "_py.String.join": {
                        "kind": -1,
                        "retType": "string",
                        "attributes": {
                            "pyHelper": "py_string_join"
                        },
                        "parameters": [
                            {
                                "name": "iterable",
                                "type": "any[]"
                            }
                        ],
                        "isInstance": true
                    },
                    "_py.String.ljust": {
                        "kind": -1,
                        "retType": "string",
                        "attributes": {
                            "pyHelper": "py_string_ljust"
                        },
                        "parameters": [
                            {
                                "name": "width"
                            },
                            {
                                "name": "fillChar",
                                "type": "string",
                                "initializer": "undefined"
                            }
                        ],
                        "isInstance": true
                    },
                    "_py.String.lower": {
                        "kind": -1,
                        "retType": "string",
                        "attributes": {
                            "pyHelper": "py_string_lower"
                        },
                        "parameters": [],
                        "isInstance": true
                    },
                    "_py.String.lstrip": {
                        "kind": -1,
                        "retType": "string",
                        "attributes": {
                            "pyHelper": "py_string_lstrip"
                        },
                        "parameters": [
                            {
                                "name": "chars",
                                "type": "string",
                                "initializer": "undefined"
                            }
                        ],
                        "isInstance": true
                    },
                    "_py.String.replace": {
                        "kind": -1,
                        "retType": "string",
                        "attributes": {
                            "py2tsOverride": "replace($0, $1)"
                        },
                        "parameters": [
                            {
                                "name": "oldString",
                                "type": "string"
                            },
                            {
                                "name": "newString",
                                "type": "string"
                            }
                        ],
                        "isInstance": true
                    },
                    "_py.String.rfind": {
                        "kind": -1,
                        "retType": "number",
                        "attributes": {
                            "pyHelper": "py_string_rfind"
                        },
                        "parameters": [
                            {
                                "name": "sub",
                                "type": "string"
                            },
                            {
                                "name": "start",
                                "initializer": "undefined"
                            },
                            {
                                "name": "end",
                                "initializer": "undefined"
                            }
                        ],
                        "isInstance": true
                    },
                    "_py.String.rindex": {
                        "kind": -1,
                        "retType": "number",
                        "attributes": {
                            "pyHelper": "py_string_rindex"
                        },
                        "parameters": [
                            {
                                "name": "sub",
                                "type": "string"
                            },
                            {
                                "name": "start",
                                "initializer": "undefined"
                            },
                            {
                                "name": "end",
                                "initializer": "undefined"
                            }
                        ],
                        "isInstance": true
                    },
                    "_py.String.rjust": {
                        "kind": -1,
                        "retType": "string",
                        "attributes": {
                            "pyHelper": "py_string_rjust"
                        },
                        "parameters": [
                            {
                                "name": "width"
                            },
                            {
                                "name": "fillChar",
                                "type": "string",
                                "initializer": "undefined"
                            }
                        ],
                        "isInstance": true
                    },
                    "_py.String.rsplit": {
                        "kind": -1,
                        "retType": "string[]",
                        "attributes": {
                            "pyHelper": "py_string_rsplit"
                        },
                        "parameters": [
                            {
                                "name": "sep",
                                "type": "string",
                                "initializer": "undefined"
                            },
                            {
                                "name": "maxSplit",
                                "initializer": "undefined"
                            }
                        ],
                        "isInstance": true
                    },
                    "_py.String.rstrip": {
                        "kind": -1,
                        "retType": "string",
                        "attributes": {
                            "pyHelper": "py_string_rstrip"
                        },
                        "parameters": [
                            {
                                "name": "chars",
                                "type": "string",
                                "initializer": "undefined"
                            }
                        ],
                        "isInstance": true
                    },
                    "_py.String.split": {
                        "kind": -1,
                        "retType": "string[]",
                        "attributes": {
                            "pyHelper": "py_string_split"
                        },
                        "parameters": [
                            {
                                "name": "sep",
                                "type": "string",
                                "initializer": "undefined"
                            },
                            {
                                "name": "maxsplit",
                                "initializer": "undefined"
                            }
                        ],
                        "isInstance": true
                    },
                    "_py.String.splitlines": {
                        "kind": -1,
                        "retType": "string[]",
                        "attributes": {
                            "pyHelper": "py_string_splitlines"
                        },
                        "parameters": [
                            {
                                "name": "keepends",
                                "type": "boolean",
                                "initializer": "undefined"
                            }
                        ],
                        "isInstance": true
                    },
                    "_py.String.startswith": {
                        "kind": -1,
                        "retType": "boolean",
                        "attributes": {
                            "pyHelper": "py_string_startswith"
                        },
                        "parameters": [
                            {
                                "name": "prefix",
                                "type": "string"
                            },
                            {
                                "name": "start",
                                "initializer": "undefined"
                            },
                            {
                                "name": "end",
                                "initializer": "undefined"
                            }
                        ],
                        "isInstance": true
                    },
                    "_py.String.strip": {
                        "kind": -1,
                        "retType": "string",
                        "attributes": {
                            "pyHelper": "py_string_strip"
                        },
                        "parameters": [
                            {
                                "name": "chars",
                                "type": "string",
                                "initializer": "undefined"
                            }
                        ],
                        "isInstance": true
                    },
                    "_py.String.swapcase": {
                        "kind": -1,
                        "retType": "string",
                        "attributes": {
                            "pyHelper": "py_string_swapcase"
                        },
                        "parameters": [],
                        "isInstance": true
                    },
                    "_py.String.title": {
                        "kind": -1,
                        "retType": "string",
                        "attributes": {
                            "pyHelper": "py_string_title"
                        },
                        "parameters": [],
                        "isInstance": true
                    },
                    "_py.String.upper": {
                        "kind": -1,
                        "retType": "string",
                        "attributes": {
                            "pyHelper": "py_string_upper"
                        },
                        "parameters": [],
                        "isInstance": true
                    },
                    "_py.String.zfill": {
                        "kind": -1,
                        "retType": "string",
                        "attributes": {
                            "pyHelper": "py_string_zfill"
                        },
                        "parameters": [
                            {
                                "name": "width"
                            }
                        ],
                        "isInstance": true
                    },
                    "_py.Dict": {
                        "kind": 9,
                        "retType": "_py.Dict",
                        "extendsTypes": []
                    },
                    "_py.Dict.clear": {
                        "kind": -1,
                        "parameters": [],
                        "isInstance": true
                    },
                    "_py.Dict.copy": {
                        "kind": -1,
                        "parameters": [],
                        "isInstance": true
                    },
                    "_py.Dict.get": {
                        "kind": -1,
                        "retType": "any",
                        "parameters": [
                            {
                                "name": "key",
                                "type": "string"
                            },
                            {
                                "name": "defaultValue",
                                "type": "any",
                                "initializer": "undefined"
                            }
                        ],
                        "isInstance": true
                    },
                    "_py.Dict.keys": {
                        "kind": -1,
                        "retType": "string[]",
                        "parameters": [],
                        "isInstance": true
                    },
                    "_py.Dict.pop": {
                        "kind": -1,
                        "retType": "any",
                        "parameters": [
                            {
                                "name": "key",
                                "type": "string"
                            },
                            {
                                "name": "defaultValue",
                                "type": "any",
                                "initializer": "undefined"
                            }
                        ],
                        "isInstance": true
                    },
                    "_py.Dict.setdefault": {
                        "kind": -1,
                        "retType": "any",
                        "parameters": [
                            {
                                "name": "key",
                                "type": "string"
                            },
                            {
                                "name": "defaultValue",
                                "type": "any",
                                "initializer": "undefined"
                            }
                        ],
                        "isInstance": true
                    },
                    "_py.Dict.update": {
                        "kind": -1,
                        "parameters": [
                            {
                                "name": "other",
                                "type": "_py.Dict"
                            }
                        ],
                        "isInstance": true
                    },
                    "_py.Dict.values": {
                        "kind": -1,
                        "retType": "any[]",
                        "parameters": [],
                        "isInstance": true
                    },
                    "_py.Set": {
                        "kind": 9,
                        "retType": "_py.Set",
                        "extendsTypes": []
                    },
                    "_py.Set.isdisjoint": {
                        "kind": -1,
                        "retType": "boolean",
                        "parameters": [
                            {
                                "name": "other",
                                "type": "_py.Set"
                            }
                        ],
                        "isInstance": true
                    },
                    "_py.Set.issubset": {
                        "kind": -1,
                        "retType": "boolean",
                        "parameters": [
                            {
                                "name": "other",
                                "type": "_py.Set"
                            }
                        ],
                        "isInstance": true
                    },
                    "_py.Set.issuperset": {
                        "kind": -1,
                        "retType": "boolean",
                        "parameters": [
                            {
                                "name": "other",
                                "type": "_py.Set"
                            }
                        ],
                        "isInstance": true
                    },
                    "_py.Set.union": {
                        "kind": -1,
                        "retType": "_py.Set",
                        "parameters": [
                            {
                                "name": "other",
                                "type": "_py.Set"
                            }
                        ],
                        "isInstance": true
                    },
                    "_py.Set.intersection": {
                        "kind": -1,
                        "retType": "_py.Set",
                        "parameters": [
                            {
                                "name": "other",
                                "type": "_py.Set"
                            }
                        ],
                        "isInstance": true
                    },
                    "_py.Set.difference": {
                        "kind": -1,
                        "retType": "_py.Set",
                        "parameters": [
                            {
                                "name": "other",
                                "type": "_py.Set"
                            }
                        ],
                        "isInstance": true
                    },
                    "_py.Set.symmetric_difference": {
                        "kind": -1,
                        "retType": "_py.Set",
                        "parameters": [
                            {
                                "name": "other",
                                "type": "_py.Set"
                            }
                        ],
                        "isInstance": true
                    },
                    "_py.Set.copy": {
                        "kind": -1,
                        "retType": "_py.Set",
                        "parameters": [],
                        "isInstance": true
                    },
                    "_py.Set.update": {
                        "kind": -1,
                        "parameters": [
                            {
                                "name": "other",
                                "type": "_py.Set"
                            }
                        ],
                        "isInstance": true
                    },
                    "_py.Set.intersection_update": {
                        "kind": -1,
                        "parameters": [
                            {
                                "name": "other",
                                "type": "_py.Set"
                            }
                        ],
                        "isInstance": true
                    },
                    "_py.Set.difference_update": {
                        "kind": -1,
                        "parameters": [
                            {
                                "name": "other",
                                "type": "_py.Set"
                            }
                        ],
                        "isInstance": true
                    },
                    "_py.Set.symmetric_difference_update": {
                        "kind": -1,
                        "parameters": [
                            {
                                "name": "other",
                                "type": "_py.Set"
                            }
                        ],
                        "isInstance": true
                    },
                    "_py.Set.add": {
                        "kind": -1,
                        "parameters": [
                            {
                                "name": "elem",
                                "type": "any"
                            }
                        ],
                        "isInstance": true
                    },
                    "_py.Set.remove": {
                        "kind": -1,
                        "parameters": [
                            {
                                "name": "elem",
                                "type": "any"
                            }
                        ],
                        "isInstance": true
                    },
                    "_py.Set.discard": {
                        "kind": -1,
                        "parameters": [
                            {
                                "name": "elem",
                                "type": "any"
                            }
                        ],
                        "isInstance": true
                    },
                    "_py.Set.pop": {
                        "kind": -1,
                        "retType": "any",
                        "parameters": [],
                        "isInstance": true
                    },
                    "_py.Set.clear": {
                        "kind": -1,
                        "parameters": [],
                        "isInstance": true
                    },
                    "control.runInParallel": {
                        "kind": -3,
                        "attributes": {
                            "hidden": "1",
                            "jsDoc": "Run other code in the parallel."
                        },
                        "parameters": [
                            {
                                "name": "a",
                                "type": "() => void",
                                "handlerParameters": []
                            }
                        ],
                        "pyQName": "control.run_in_parallel"
                    },
                    "control.runInBackground": {
                        "kind": -3,
                        "attributes": {
                            "deprecated": "1",
                            "hidden": "1",
                            "help": "control/run-in-background",
                            "blockAllowMultiple": "1",
                            "afterOnStart": true,
                            "blockId": "control_run_in_background",
                            "block": "run in background",
                            "blockGap": "8",
                            "weight": 0,
                            "jsDoc": "Deprecated, use ``control.runInParallel`` instead.",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "label",
                                        "text": "run in background",
                                        "style": []
                                    }
                                ],
                                "parameters": []
                            }
                        },
                        "parameters": [
                            {
                                "name": "a",
                                "type": "() => void",
                                "handlerParameters": []
                            }
                        ],
                        "pyQName": "control.run_in_background"
                    },
                    "control.PXT_PANIC": {
                        "kind": 6,
                        "retType": "control.PXT_PANIC",
                        "extendsTypes": ["control.PXT_PANIC", "Number"]
                    },
                    "control.PXT_PANIC.CODAL_OOM": {
                        "retType": "control.PXT_PANIC.CODAL_OOM",
                        "extendsTypes": [
                            "control.PXT_PANIC.CODAL_OOM",
                            "Number"
                        ]
                    },
                    "control.PXT_PANIC.GC_OOM": {
                        "retType": "control.PXT_PANIC.GC_OOM",
                        "extendsTypes": ["control.PXT_PANIC.GC_OOM", "Number"]
                    },
                    "control.PXT_PANIC.GC_TOO_BIG_ALLOCATION": {
                        "retType": "control.PXT_PANIC.GC_TOO_BIG_ALLOCATION",
                        "extendsTypes": [
                            "control.PXT_PANIC.GC_TOO_BIG_ALLOCATION",
                            "Number"
                        ]
                    },
                    "control.PXT_PANIC.CODAL_HEAP_ERROR": {
                        "retType": "control.PXT_PANIC.CODAL_HEAP_ERROR",
                        "extendsTypes": [
                            "control.PXT_PANIC.CODAL_HEAP_ERROR",
                            "Number"
                        ]
                    },
                    "control.PXT_PANIC.CODAL_NULL_DEREFERENCE": {
                        "retType": "control.PXT_PANIC.CODAL_NULL_DEREFERENCE",
                        "extendsTypes": [
                            "control.PXT_PANIC.CODAL_NULL_DEREFERENCE",
                            "Number"
                        ]
                    },
                    "control.PXT_PANIC.CODAL_USB_ERROR": {
                        "retType": "control.PXT_PANIC.CODAL_USB_ERROR",
                        "extendsTypes": [
                            "control.PXT_PANIC.CODAL_USB_ERROR",
                            "Number"
                        ]
                    },
                    "control.PXT_PANIC.CODAL_HARDWARE_CONFIGURATION_ERROR": {
                        "retType": "control.PXT_PANIC.CODAL_HARDWARE_CONFIGURATION_ERROR",
                        "extendsTypes": [
                            "control.PXT_PANIC.CODAL_HARDWARE_CONFIGURATION_ERROR",
                            "Number"
                        ]
                    },
                    "control.PXT_PANIC.INVALID_BINARY_HEADER": {
                        "retType": "control.PXT_PANIC.INVALID_BINARY_HEADER",
                        "extendsTypes": [
                            "control.PXT_PANIC.INVALID_BINARY_HEADER",
                            "Number"
                        ]
                    },
                    "control.PXT_PANIC.OUT_OF_BOUNDS": {
                        "retType": "control.PXT_PANIC.OUT_OF_BOUNDS",
                        "extendsTypes": [
                            "control.PXT_PANIC.OUT_OF_BOUNDS",
                            "Number"
                        ]
                    },
                    "control.PXT_PANIC.REF_DELETED": {
                        "retType": "control.PXT_PANIC.REF_DELETED",
                        "extendsTypes": [
                            "control.PXT_PANIC.REF_DELETED",
                            "Number"
                        ]
                    },
                    "control.PXT_PANIC.SIZE": {
                        "retType": "control.PXT_PANIC.SIZE",
                        "extendsTypes": ["control.PXT_PANIC.SIZE", "Number"]
                    },
                    "control.PXT_PANIC.INVALID_VTABLE": {
                        "retType": "control.PXT_PANIC.INVALID_VTABLE",
                        "extendsTypes": [
                            "control.PXT_PANIC.INVALID_VTABLE",
                            "Number"
                        ]
                    },
                    "control.PXT_PANIC.INTERNAL_ERROR": {
                        "retType": "control.PXT_PANIC.INTERNAL_ERROR",
                        "extendsTypes": [
                            "control.PXT_PANIC.INTERNAL_ERROR",
                            "Number"
                        ]
                    },
                    "control.PXT_PANIC.NO_SUCH_CONFIG": {
                        "retType": "control.PXT_PANIC.NO_SUCH_CONFIG",
                        "extendsTypes": [
                            "control.PXT_PANIC.NO_SUCH_CONFIG",
                            "Number"
                        ]
                    },
                    "control.PXT_PANIC.NO_SUCH_PIN": {
                        "retType": "control.PXT_PANIC.NO_SUCH_PIN",
                        "extendsTypes": [
                            "control.PXT_PANIC.NO_SUCH_PIN",
                            "Number"
                        ]
                    },
                    "control.PXT_PANIC.INVALID_ARGUMENT": {
                        "retType": "control.PXT_PANIC.INVALID_ARGUMENT",
                        "extendsTypes": [
                            "control.PXT_PANIC.INVALID_ARGUMENT",
                            "Number"
                        ]
                    },
                    "control.PXT_PANIC.MEMORY_LIMIT_EXCEEDED": {
                        "retType": "control.PXT_PANIC.MEMORY_LIMIT_EXCEEDED",
                        "extendsTypes": [
                            "control.PXT_PANIC.MEMORY_LIMIT_EXCEEDED",
                            "Number"
                        ]
                    },
                    "control.PXT_PANIC.SCREEN_ERROR": {
                        "retType": "control.PXT_PANIC.SCREEN_ERROR",
                        "extendsTypes": [
                            "control.PXT_PANIC.SCREEN_ERROR",
                            "Number"
                        ]
                    },
                    "control.PXT_PANIC.MISSING_PROPERTY": {
                        "retType": "control.PXT_PANIC.MISSING_PROPERTY",
                        "extendsTypes": [
                            "control.PXT_PANIC.MISSING_PROPERTY",
                            "Number"
                        ]
                    },
                    "control.PXT_PANIC.INVALID_IMAGE": {
                        "retType": "control.PXT_PANIC.INVALID_IMAGE",
                        "extendsTypes": [
                            "control.PXT_PANIC.INVALID_IMAGE",
                            "Number"
                        ]
                    },
                    "control.PXT_PANIC.CALLED_FROM_ISR": {
                        "retType": "control.PXT_PANIC.CALLED_FROM_ISR",
                        "extendsTypes": [
                            "control.PXT_PANIC.CALLED_FROM_ISR",
                            "Number"
                        ]
                    },
                    "control.PXT_PANIC.HEAP_DUMPED": {
                        "retType": "control.PXT_PANIC.HEAP_DUMPED",
                        "extendsTypes": [
                            "control.PXT_PANIC.HEAP_DUMPED",
                            "Number"
                        ]
                    },
                    "control.PXT_PANIC.STACK_OVERFLOW": {
                        "retType": "control.PXT_PANIC.STACK_OVERFLOW",
                        "extendsTypes": [
                            "control.PXT_PANIC.STACK_OVERFLOW",
                            "Number"
                        ]
                    },
                    "control.PXT_PANIC.BLOCKING_TO_STRING": {
                        "retType": "control.PXT_PANIC.BLOCKING_TO_STRING",
                        "extendsTypes": [
                            "control.PXT_PANIC.BLOCKING_TO_STRING",
                            "Number"
                        ]
                    },
                    "control.PXT_PANIC.VM_ERROR": {
                        "retType": "control.PXT_PANIC.VM_ERROR",
                        "extendsTypes": ["control.PXT_PANIC.VM_ERROR", "Number"]
                    },
                    "control.PXT_PANIC.SETTINGS_CLEARED": {
                        "retType": "control.PXT_PANIC.SETTINGS_CLEARED",
                        "extendsTypes": [
                            "control.PXT_PANIC.SETTINGS_CLEARED",
                            "Number"
                        ]
                    },
                    "control.PXT_PANIC.SETTINGS_OVERLOAD": {
                        "retType": "control.PXT_PANIC.SETTINGS_OVERLOAD",
                        "extendsTypes": [
                            "control.PXT_PANIC.SETTINGS_OVERLOAD",
                            "Number"
                        ]
                    },
                    "control.PXT_PANIC.SETTINGS_SECRET_MISSING": {
                        "retType": "control.PXT_PANIC.SETTINGS_SECRET_MISSING",
                        "extendsTypes": [
                            "control.PXT_PANIC.SETTINGS_SECRET_MISSING",
                            "Number"
                        ]
                    },
                    "control.PXT_PANIC.DELETE_ON_CLASS": {
                        "retType": "control.PXT_PANIC.DELETE_ON_CLASS",
                        "extendsTypes": [
                            "control.PXT_PANIC.DELETE_ON_CLASS",
                            "Number"
                        ]
                    },
                    "control.PXT_PANIC.CAST_FIRST": {
                        "retType": "control.PXT_PANIC.CAST_FIRST",
                        "extendsTypes": [
                            "control.PXT_PANIC.CAST_FIRST",
                            "Number"
                        ]
                    },
                    "control.PXT_PANIC.CAST_FROM_UNDEFINED": {
                        "retType": "control.PXT_PANIC.CAST_FIRST",
                        "extendsTypes": [
                            "control.PXT_PANIC.CAST_FROM_UNDEFINED",
                            "Number"
                        ]
                    },
                    "control.PXT_PANIC.CAST_FROM_BOOLEAN": {
                        "retType": "control.PXT_PANIC.CAST_FROM_BOOLEAN",
                        "extendsTypes": [
                            "control.PXT_PANIC.CAST_FROM_BOOLEAN",
                            "Number"
                        ]
                    },
                    "control.PXT_PANIC.CAST_FROM_NUMBER": {
                        "retType": "control.PXT_PANIC.CAST_FROM_NUMBER",
                        "extendsTypes": [
                            "control.PXT_PANIC.CAST_FROM_NUMBER",
                            "Number"
                        ]
                    },
                    "control.PXT_PANIC.CAST_FROM_STRING": {
                        "retType": "control.PXT_PANIC.CAST_FROM_STRING",
                        "extendsTypes": [
                            "control.PXT_PANIC.CAST_FROM_STRING",
                            "Number"
                        ]
                    },
                    "control.PXT_PANIC.CAST_FROM_OBJECT": {
                        "retType": "control.PXT_PANIC.CAST_FROM_OBJECT",
                        "extendsTypes": [
                            "control.PXT_PANIC.CAST_FROM_OBJECT",
                            "Number"
                        ]
                    },
                    "control.PXT_PANIC.CAST_FROM_FUNCTION": {
                        "retType": "control.PXT_PANIC.CAST_FROM_FUNCTION",
                        "extendsTypes": [
                            "control.PXT_PANIC.CAST_FROM_FUNCTION",
                            "Number"
                        ]
                    },
                    "control.PXT_PANIC.CAST_FROM_NULL": {
                        "retType": "control.PXT_PANIC.CAST_FROM_NULL",
                        "extendsTypes": [
                            "control.PXT_PANIC.CAST_FROM_NULL",
                            "Number"
                        ]
                    },
                    "control.PXT_PANIC.UNHANDLED_EXCEPTION": {
                        "retType": "control.PXT_PANIC.UNHANDLED_EXCEPTION",
                        "extendsTypes": [
                            "control.PXT_PANIC.UNHANDLED_EXCEPTION",
                            "Number"
                        ]
                    },
                    "control.panic": {
                        "kind": -3,
                        "attributes": {
                            "paramDefl": {
                                "code": "5"
                            },
                            "help": "control/panic",
                            "weight": 29,
                            "blockId": "control_panic",
                            "block": "panic %code",
                            "paramHelp": {
                                "code": "an error number to display. eg: 5"
                            },
                            "jsDoc": "Display an error code and stop the program.",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "label",
                                        "text": "panic ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "code",
                                        "ref": false
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "code",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "parameters": [
                            {
                                "name": "code",
                                "description": "an error number to display. eg: 5",
                                "default": "5"
                            }
                        ]
                    },
                    "control.assert": {
                        "kind": -3,
                        "attributes": {
                            "help": "control/assert",
                            "weight": 30,
                            "blockId": "control_assert",
                            "block": "assert %cond|with value %code",
                            "jsDoc": "Display an error code and stop the program when the assertion is `false`.",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "label",
                                        "text": "assert ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "cond",
                                        "ref": false
                                    },
                                    {
                                        "kind": "break"
                                    },
                                    {
                                        "kind": "label",
                                        "text": "with value ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "code",
                                        "ref": false
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "cond",
                                        "ref": false
                                    },
                                    {
                                        "kind": "param",
                                        "name": "code",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "parameters": [
                            {
                                "name": "cond",
                                "type": "boolean"
                            },
                            {
                                "name": "code"
                            }
                        ]
                    },
                    "control.fail": {
                        "kind": -3,
                        "parameters": [
                            {
                                "name": "message",
                                "type": "string"
                            }
                        ]
                    },
                    "control.allocateEventSource": {
                        "kind": -3,
                        "retType": "number",
                        "parameters": [],
                        "pyQName": "control.allocate_event_source"
                    },
                    "control.AnimationQueue": {
                        "kind": 8,
                        "retType": "control.AnimationQueue",
                        "extendsTypes": []
                    },
                    "control.AnimationQueue.running": {
                        "kind": 2,
                        "retType": "boolean",
                        "isInstance": true
                    },
                    "control.AnimationQueue.eventID": {
                        "kind": 2,
                        "retType": "number",
                        "isInstance": true,
                        "pyQName": "control.AnimationQueue.event_id"
                    },
                    "control.AnimationQueue.interval": {
                        "kind": 2,
                        "retType": "number",
                        "isInstance": true
                    },
                    "control.AnimationQueue.__constructor": {
                        "kind": -3,
                        "parameters": [],
                        "isInstance": true
                    },
                    "control.AnimationQueue.runUntilDone": {
                        "kind": -1,
                        "attributes": {
                            "jsDoc": "Runs 'render' in a loop until it returns false or the 'stop' function is called"
                        },
                        "parameters": [
                            {
                                "name": "render",
                                "type": "() => boolean",
                                "handlerParameters": []
                            }
                        ],
                        "isInstance": true,
                        "pyQName": "control.AnimationQueue.run_until_done"
                    },
                    "control.AnimationQueue.isCancelled": {
                        "kind": -1,
                        "retType": "boolean",
                        "parameters": [
                            {
                                "name": "evid"
                            }
                        ],
                        "isInstance": true,
                        "pyQName": "control.AnimationQueue.is_cancelled"
                    },
                    "control.AnimationQueue.cancel": {
                        "kind": -1,
                        "attributes": {
                            "jsDoc": "Cancels the current running animation and clears the queue"
                        },
                        "parameters": [],
                        "isInstance": true
                    },
                    "control.getConfigValue": {
                        "kind": -3,
                        "retType": "number",
                        "parameters": [
                            {
                                "name": "key"
                            },
                            {
                                "name": "defl"
                            }
                        ],
                        "pyQName": "control.get_config_value"
                    },
                    "control.programHash": {
                        "kind": -3,
                        "retType": "number",
                        "parameters": [],
                        "pyQName": "control.program_hash"
                    },
                    "control.programName": {
                        "kind": -3,
                        "retType": "string",
                        "parameters": [],
                        "pyQName": "control.program_name"
                    },
                    "control.ramSize": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "jsDoc": "Returns estimated size of memory in bytes."
                        },
                        "parameters": [],
                        "pyQName": "control.ram_size"
                    },
                    "control.benchmark": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "jsDoc": "Runs the function and returns run time in microseconds."
                        },
                        "parameters": [
                            {
                                "name": "f",
                                "type": "() => void",
                                "handlerParameters": []
                            }
                        ]
                    },
                    "convertToText": {
                        "kind": -3,
                        "retType": "string",
                        "attributes": {
                            "help": "text/convert-to-text",
                            "weight": 1,
                            "block": "convert $value=math_number to text",
                            "blockId": "variable_to_text",
                            "blockNamespace": "text",
                            "paramHelp": {
                                "value": "value to be converted to text"
                            },
                            "jsDoc": "Convert any value to text",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "label",
                                        "text": "convert ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "value",
                                        "shadowBlockId": "math_number",
                                        "ref": true
                                    },
                                    {
                                        "kind": "label",
                                        "text": " to text",
                                        "style": []
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "value",
                                        "shadowBlockId": "math_number",
                                        "ref": true
                                    }
                                ]
                            }
                        },
                        "parameters": [
                            {
                                "name": "value",
                                "description": "value to be converted to text",
                                "type": "any"
                            }
                        ],
                        "pyQName": "convert_to_text"
                    },
                    "control.enablePerfCounter": {
                        "kind": -3,
                        "attributes": {
                            "shim": "TD_NOOP",
                            "shimArgument": "perfCounter",
                            "jsDoc": "Enable profiling for current function."
                        },
                        "parameters": [
                            {
                                "name": "name",
                                "type": "string",
                                "initializer": "undefined"
                            }
                        ],
                        "pyQName": "control.enable_perf_counter"
                    },
                    "control.dmesgPerfCounters": {
                        "kind": -3,
                        "attributes": {
                            "jsDoc": "Dump values of profiling performance counters."
                        },
                        "parameters": [],
                        "pyQName": "control.dmesg_perf_counters"
                    },
                    "control.IntervalMode": {
                        "kind": 6,
                        "retType": "control.IntervalMode",
                        "extendsTypes": ["control.IntervalMode", "Number"]
                    },
                    "control.IntervalMode.Interval": {
                        "retType": "control.IntervalMode.Interval",
                        "extendsTypes": [
                            "control.IntervalMode.Interval",
                            "Number"
                        ],
                        "pyQName": "control.IntervalMode.INTERVAL"
                    },
                    "control.IntervalMode.Timeout": {
                        "retType": "control.IntervalMode.Timeout",
                        "extendsTypes": [
                            "control.IntervalMode.Timeout",
                            "Number"
                        ],
                        "pyQName": "control.IntervalMode.TIMEOUT"
                    },
                    "control.IntervalMode.Immediate": {
                        "retType": "control.IntervalMode.Immediate",
                        "extendsTypes": [
                            "control.IntervalMode.Immediate",
                            "Number"
                        ],
                        "pyQName": "control.IntervalMode.IMMEDIATE"
                    },
                    "control.setInterval": {
                        "kind": -3,
                        "retType": "number",
                        "parameters": [
                            {
                                "name": "func",
                                "type": "() => void",
                                "handlerParameters": []
                            },
                            {
                                "name": "delay"
                            },
                            {
                                "name": "mode",
                                "type": "control.IntervalMode",
                                "isEnum": true
                            }
                        ],
                        "pyQName": "control.set_interval"
                    },
                    "control.clearInterval": {
                        "kind": -3,
                        "parameters": [
                            {
                                "name": "intervalId"
                            },
                            {
                                "name": "mode",
                                "type": "control.IntervalMode",
                                "isEnum": true
                            }
                        ],
                        "pyQName": "control.clear_interval"
                    },
                    "ConsolePriority": {
                        "kind": 6,
                        "retType": "ConsolePriority",
                        "extendsTypes": ["ConsolePriority", "Number"]
                    },
                    "ConsolePriority.Debug": {
                        "retType": "ConsolePriority.Debug",
                        "extendsTypes": ["ConsolePriority.Debug", "Number"],
                        "pyQName": "ConsolePriority.DEBUG"
                    },
                    "ConsolePriority.Log": {
                        "retType": "ConsolePriority.Log",
                        "extendsTypes": ["ConsolePriority.Log", "Number"],
                        "pyQName": "ConsolePriority.LOG"
                    },
                    "ConsolePriority.Warning": {
                        "retType": "ConsolePriority.Warning",
                        "extendsTypes": ["ConsolePriority.Warning", "Number"],
                        "pyQName": "ConsolePriority.WARNING"
                    },
                    "ConsolePriority.Error": {
                        "retType": "ConsolePriority.Error",
                        "extendsTypes": ["ConsolePriority.Error", "Number"],
                        "pyQName": "ConsolePriority.ERROR"
                    },
                    "ConsolePriority.Silent": {
                        "retType": "ConsolePriority.Silent",
                        "extendsTypes": ["ConsolePriority.Silent", "Number"],
                        "pyQName": "ConsolePriority.SILENT"
                    },
                    "console": {
                        "kind": 5,
                        "retType": "",
                        "attributes": {
                            "weight": 12,
                            "color": "#002050",
                            "icon": "",
                            "advanced": true,
                            "jsDoc": "Reading and writing data to the console output."
                        }
                    },
                    "console.minPriority": {
                        "kind": 4,
                        "retType": "ConsolePriority",
                        "attributes": {
                            "jsDoc": "Minimum priority to send messages to listeners"
                        },
                        "pyQName": "console.min_priority"
                    },
                    "console.add": {
                        "kind": -3,
                        "parameters": [
                            {
                                "name": "priority",
                                "type": "ConsolePriority",
                                "isEnum": true
                            },
                            {
                                "name": "message",
                                "type": "any"
                            }
                        ]
                    },
                    "console.debug": {
                        "kind": -3,
                        "parameters": [
                            {
                                "name": "text",
                                "type": "any"
                            }
                        ]
                    },
                    "console.warn": {
                        "kind": -3,
                        "parameters": [
                            {
                                "name": "text",
                                "type": "any"
                            }
                        ]
                    },
                    "console.error": {
                        "kind": -3,
                        "parameters": [
                            {
                                "name": "text",
                                "type": "any"
                            }
                        ]
                    },
                    "console.log": {
                        "kind": -3,
                        "attributes": {
                            "weight": 90,
                            "help": "console/log",
                            "blockGap": "8",
                            "blockId": "console_log",
                            "block": "console log $value",
                            "_shadowOverrides": {
                                "value": "text"
                            },
                            "paramHelp": {
                                "value": "to send"
                            },
                            "jsDoc": "Write a line of text to the console output.",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "label",
                                        "text": "console log ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "value",
                                        "shadowBlockId": "text",
                                        "ref": true
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "value",
                                        "shadowBlockId": "text",
                                        "ref": true
                                    }
                                ]
                            }
                        },
                        "parameters": [
                            {
                                "name": "value",
                                "description": "to send",
                                "type": "any"
                            }
                        ],
                        "pyQName": "print"
                    },
                    "console.logValue": {
                        "kind": -3,
                        "attributes": {
                            "paramDefl": {
                                "name": "x"
                            },
                            "weight": 88,
                            "blockGap": "8",
                            "help": "console/log-value",
                            "blockId": "console_log_value",
                            "block": "console|log value %name|= %value",
                            "_shadowOverrides": {
                                "name": "text",
                                "value": "math_number"
                            },
                            "paramHelp": {
                                "name": "name of the value stream, eg: \"x\"",
                                "value": "to write"
                            },
                            "jsDoc": "Write a name:value pair as a line of text to the console output.",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "label",
                                        "text": "console",
                                        "style": []
                                    },
                                    {
                                        "kind": "break"
                                    },
                                    {
                                        "kind": "label",
                                        "text": "log value ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "name",
                                        "shadowBlockId": "text",
                                        "ref": false
                                    },
                                    {
                                        "kind": "break"
                                    },
                                    {
                                        "kind": "label",
                                        "text": "= ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "value",
                                        "shadowBlockId": "math_number",
                                        "ref": false
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "name",
                                        "shadowBlockId": "text",
                                        "ref": false
                                    },
                                    {
                                        "kind": "param",
                                        "name": "value",
                                        "shadowBlockId": "math_number",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "parameters": [
                            {
                                "name": "name",
                                "description": "name of the value stream, eg: \"x\"",
                                "type": "any",
                                "default": "x"
                            },
                            {
                                "name": "value",
                                "description": "to write",
                                "type": "any"
                            }
                        ],
                        "pyQName": "console.log_value"
                    },
                    "console.inspect": {
                        "kind": -3,
                        "retType": "string",
                        "attributes": {
                            "paramHelp": {
                                "obj": "value to be converted to a string",
                                "maxElements": "[optional] max number values in an object to include in output"
                            },
                            "jsDoc": "Convert any object or value to a string representation"
                        },
                        "parameters": [
                            {
                                "name": "obj",
                                "description": "value to be converted to a string",
                                "type": "any"
                            },
                            {
                                "name": "maxElements",
                                "description": "[optional] max number values in an object to include in output",
                                "initializer": "20"
                            }
                        ]
                    },
                    "console.addListener": {
                        "kind": -3,
                        "attributes": {
                            "paramHelp": {
                                "listener": ""
                            },
                            "jsDoc": "Adds a listener for the log messages"
                        },
                        "parameters": [
                            {
                                "name": "listener",
                                "type": "(priority: ConsolePriority, text: string) => void",
                                "handlerParameters": [
                                    {
                                        "name": "priority",
                                        "type": "ConsolePriority"
                                    },
                                    {
                                        "name": "text",
                                        "type": "string"
                                    }
                                ]
                            }
                        ],
                        "pyQName": "console.add_listener"
                    },
                    "console.removeListener": {
                        "kind": -3,
                        "attributes": {
                            "paramHelp": {
                                "listener": ""
                            },
                            "jsDoc": "Removes a listener"
                        },
                        "parameters": [
                            {
                                "name": "listener",
                                "type": "(priority: ConsolePriority, text: string) => void",
                                "handlerParameters": [
                                    {
                                        "name": "priority",
                                        "type": "ConsolePriority"
                                    },
                                    {
                                        "name": "text",
                                        "type": "string"
                                    }
                                ]
                            }
                        ],
                        "pyQName": "console.remove_listener"
                    },
                    "control.GCStats": {
                        "kind": 9,
                        "retType": "control.GCStats",
                        "extendsTypes": []
                    },
                    "control.GCStats.numGC": {
                        "kind": 2,
                        "retType": "number",
                        "isInstance": true,
                        "pyQName": "control.GCStats.num_gc"
                    },
                    "control.GCStats.numBlocks": {
                        "kind": 2,
                        "retType": "number",
                        "isInstance": true,
                        "pyQName": "control.GCStats.num_blocks"
                    },
                    "control.GCStats.totalBytes": {
                        "kind": 2,
                        "retType": "number",
                        "isInstance": true,
                        "pyQName": "control.GCStats.total_bytes"
                    },
                    "control.GCStats.lastFreeBytes": {
                        "kind": 2,
                        "retType": "number",
                        "isInstance": true,
                        "pyQName": "control.GCStats.last_free_bytes"
                    },
                    "control.GCStats.lastMaxBlockBytes": {
                        "kind": 2,
                        "retType": "number",
                        "isInstance": true,
                        "pyQName": "control.GCStats.last_max_block_bytes"
                    },
                    "control.GCStats.minFreeBytes": {
                        "kind": 2,
                        "retType": "number",
                        "isInstance": true,
                        "pyQName": "control.GCStats.min_free_bytes"
                    },
                    "control.gcStats": {
                        "kind": -3,
                        "retType": "control.GCStats",
                        "attributes": {
                            "jsDoc": "Get various statistics about the garbage collector (GC)"
                        },
                        "parameters": [],
                        "pyQName": "control.gc_stats"
                    },
                    "DigitalInOutPin": {
                        "kind": 9,
                        "retType": "DigitalInOutPin",
                        "attributes": {
                            "noRefCounting": "true",
                            "fixedInstances": "true"
                        },
                        "extendsTypes": ["DigitalInOutPin"]
                    },
                    "AnalogInPin": {
                        "kind": 9,
                        "retType": "AnalogInPin",
                        "attributes": {
                            "noRefCounting": "true",
                            "fixedInstances": "true"
                        },
                        "extendsTypes": ["AnalogInPin", "DigitalInOutPin"]
                    },
                    "AnalogOutPin": {
                        "kind": 9,
                        "retType": "AnalogOutPin",
                        "attributes": {
                            "noRefCounting": "true",
                            "fixedInstances": "true"
                        },
                        "extendsTypes": ["AnalogOutPin", "DigitalInOutPin"]
                    },
                    "AnalogInOutPin": {
                        "kind": 9,
                        "retType": "AnalogInOutPin",
                        "attributes": {
                            "noRefCounting": "true",
                            "fixedInstances": "true"
                        },
                        "extendsTypes": [
                            "AnalogInOutPin",
                            "AnalogInPin",
                            "DigitalInOutPin",
                            "AnalogOutPin"
                        ]
                    },
                    "PwmOnlyPin": {
                        "kind": 9,
                        "retType": "PwmOnlyPin",
                        "attributes": {
                            "noRefCounting": "true",
                            "fixedInstances": "true"
                        },
                        "extendsTypes": [
                            "PwmOnlyPin",
                            "DigitalInOutPin",
                            "AnalogOutPin"
                        ]
                    },
                    "PwmPin": {
                        "kind": 9,
                        "retType": "PwmPin",
                        "attributes": {
                            "noRefCounting": "true",
                            "fixedInstances": "true"
                        },
                        "extendsTypes": [
                            "PwmPin",
                            "PwmOnlyPin",
                            "DigitalInOutPin",
                            "AnalogOutPin",
                            "AnalogInOutPin",
                            "AnalogInPin"
                        ]
                    },
                    "pins.sizeOf": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "deprecated": "1"
                        },
                        "parameters": [
                            {
                                "name": "format",
                                "type": "NumberFormat",
                                "isEnum": true
                            }
                        ],
                        "pyQName": "pins.size_of"
                    },
                    "pins.createBufferFromArray": {
                        "kind": -3,
                        "retType": "Buffer",
                        "attributes": {
                            "deprecated": "1"
                        },
                        "parameters": [
                            {
                                "name": "bytes",
                                "type": "number[]"
                            }
                        ],
                        "pyQName": "bytes"
                    },
                    "pins.packedSize": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "deprecated": "1"
                        },
                        "parameters": [
                            {
                                "name": "format",
                                "type": "string"
                            }
                        ],
                        "pyQName": "pins.packed_size"
                    },
                    "pins.packBuffer": {
                        "kind": -3,
                        "retType": "Buffer",
                        "attributes": {
                            "deprecated": "1"
                        },
                        "parameters": [
                            {
                                "name": "format",
                                "type": "string"
                            },
                            {
                                "name": "nums",
                                "type": "number[]"
                            }
                        ],
                        "pyQName": "pins.pack_buffer"
                    },
                    "pins.packIntoBuffer": {
                        "kind": -3,
                        "attributes": {
                            "deprecated": "1"
                        },
                        "parameters": [
                            {
                                "name": "format",
                                "type": "string"
                            },
                            {
                                "name": "buf",
                                "type": "Buffer"
                            },
                            {
                                "name": "offset"
                            },
                            {
                                "name": "nums",
                                "type": "number[]"
                            }
                        ],
                        "pyQName": "pins.pack_into_buffer"
                    },
                    "pins.unpackBuffer": {
                        "kind": -3,
                        "retType": "number[]",
                        "attributes": {
                            "deprecated": "1"
                        },
                        "parameters": [
                            {
                                "name": "format",
                                "type": "string"
                            },
                            {
                                "name": "buf",
                                "type": "Buffer"
                            },
                            {
                                "name": "offset",
                                "initializer": "0"
                            }
                        ],
                        "pyQName": "pins.unpack_buffer"
                    },
                    "pins.concatBuffers": {
                        "kind": -3,
                        "retType": "Buffer",
                        "attributes": {
                            "deprecated": "1"
                        },
                        "parameters": [
                            {
                                "name": "bufs",
                                "type": "Buffer[]"
                            }
                        ],
                        "pyQName": "pins.concat_buffers"
                    },
                    "msgpack": {
                        "kind": 5,
                        "retType": ""
                    },
                    "msgpack.unpackNumberArray": {
                        "kind": -3,
                        "retType": "number[]",
                        "attributes": {
                            "jsDoc": "Unpacks a buffer into a number array."
                        },
                        "parameters": [
                            {
                                "name": "buf",
                                "type": "Buffer"
                            },
                            {
                                "name": "offset",
                                "initializer": "0"
                            }
                        ],
                        "pyQName": "msgpack.unpack_number_array"
                    },
                    "msgpack.packNumberArray": {
                        "kind": -3,
                        "retType": "Buffer",
                        "attributes": {
                            "paramHelp": {
                                "nums": "the numbers to be packed"
                            },
                            "jsDoc": "Pack a number array into a buffer."
                        },
                        "parameters": [
                            {
                                "name": "nums",
                                "description": "the numbers to be packed",
                                "type": "number[]"
                            }
                        ],
                        "pyQName": "msgpack.pack_number_array"
                    },
                    "helpers.bufferConcat": {
                        "kind": -3,
                        "retType": "Buffer",
                        "parameters": [
                            {
                                "name": "a",
                                "type": "Buffer"
                            },
                            {
                                "name": "b",
                                "type": "Buffer"
                            }
                        ],
                        "pyQName": "helpers.buffer_concat"
                    },
                    "helpers.bufferEquals": {
                        "kind": -3,
                        "retType": "boolean",
                        "parameters": [
                            {
                                "name": "l",
                                "type": "Buffer"
                            },
                            {
                                "name": "r",
                                "type": "Buffer"
                            }
                        ],
                        "pyQName": "helpers.buffer_equals"
                    },
                    "helpers.bufferIndexOf": {
                        "kind": -3,
                        "retType": "number",
                        "parameters": [
                            {
                                "name": "a",
                                "type": "Buffer"
                            },
                            {
                                "name": "b",
                                "type": "Buffer"
                            }
                        ],
                        "pyQName": "helpers.buffer_index_of"
                    },
                    "helpers.bufferUnpack": {
                        "kind": -3,
                        "retType": "number[]",
                        "parameters": [
                            {
                                "name": "buf",
                                "type": "Buffer"
                            },
                            {
                                "name": "format",
                                "type": "string"
                            },
                            {
                                "name": "offset",
                                "initializer": "undefined"
                            }
                        ],
                        "pyQName": "helpers.buffer_unpack"
                    },
                    "helpers.bufferPackAt": {
                        "kind": -3,
                        "parameters": [
                            {
                                "name": "buf",
                                "type": "Buffer"
                            },
                            {
                                "name": "offset"
                            },
                            {
                                "name": "format",
                                "type": "string"
                            },
                            {
                                "name": "nums",
                                "type": "number[]"
                            }
                        ],
                        "pyQName": "helpers.buffer_pack_at"
                    },
                    "helpers.bufferChunked": {
                        "kind": -3,
                        "retType": "Buffer[]",
                        "parameters": [
                            {
                                "name": "buf",
                                "type": "Buffer"
                            },
                            {
                                "name": "maxBytes"
                            }
                        ],
                        "pyQName": "helpers.buffer_chunked"
                    },
                    "helpers.bufferToArray": {
                        "kind": -3,
                        "retType": "number[]",
                        "parameters": [
                            {
                                "name": "buf",
                                "type": "Buffer"
                            },
                            {
                                "name": "format",
                                "type": "NumberFormat",
                                "isEnum": true
                            }
                        ],
                        "pyQName": "helpers.buffer_to_array"
                    },
                    "helpers._b64": {
                        "kind": 4,
                        "retType": "\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\""
                    },
                    "helpers.bufferToBase64": {
                        "kind": -3,
                        "retType": "string",
                        "parameters": [
                            {
                                "name": "buf",
                                "type": "Buffer"
                            }
                        ],
                        "pyQName": "helpers.buffer_to_base64"
                    },
                    "Buffer.concat": {
                        "kind": -3,
                        "retType": "Buffer",
                        "attributes": {
                            "helper": "bufferConcat",
                            "jsDoc": "Return concatenation of current buffer and the given buffer\n\nConcatenates all buffers in the list"
                        },
                        "parameters": [
                            {
                                "name": "buffers",
                                "type": "Buffer[]"
                            }
                        ]
                    },
                    "Buffer.indexOf": {
                        "kind": -1,
                        "retType": "number",
                        "attributes": {
                            "helper": "bufferIndexOf",
                            "jsDoc": "Return position of other buffer in current buffer"
                        },
                        "parameters": [
                            {
                                "name": "other",
                                "type": "Buffer"
                            }
                        ],
                        "isInstance": true,
                        "pyQName": "Buffer.index_of"
                    },
                    "Buffer.unpack": {
                        "kind": -1,
                        "retType": "number[]",
                        "attributes": {
                            "helper": "bufferUnpack",
                            "jsDoc": "Reads numbers from the buffer according to the format"
                        },
                        "parameters": [
                            {
                                "name": "format",
                                "type": "string"
                            },
                            {
                                "name": "offset",
                                "initializer": "undefined"
                            }
                        ],
                        "isInstance": true
                    },
                    "Buffer.packAt": {
                        "kind": -1,
                        "attributes": {
                            "helper": "bufferPackAt",
                            "jsDoc": "Writes numbers to the buffer according to the format"
                        },
                        "parameters": [
                            {
                                "name": "offset"
                            },
                            {
                                "name": "format",
                                "type": "string"
                            },
                            {
                                "name": "nums",
                                "type": "number[]"
                            }
                        ],
                        "isInstance": true,
                        "pyQName": "Buffer.pack_at"
                    },
                    "Buffer.equals": {
                        "kind": -1,
                        "retType": "boolean",
                        "attributes": {
                            "helper": "bufferEquals",
                            "jsDoc": "Returns true if this and the other buffer hold the same data"
                        },
                        "parameters": [
                            {
                                "name": "other",
                                "type": "Buffer"
                            }
                        ],
                        "isInstance": true
                    },
                    "Buffer.chunked": {
                        "kind": -1,
                        "retType": "Buffer[]",
                        "attributes": {
                            "helper": "bufferChunked",
                            "jsDoc": "Splits buffer into parts no larger than specified"
                        },
                        "parameters": [
                            {
                                "name": "maxSize"
                            }
                        ],
                        "isInstance": true
                    },
                    "Buffer.toArray": {
                        "kind": -1,
                        "retType": "number[]",
                        "attributes": {
                            "helper": "bufferToArray",
                            "jsDoc": "Read contents of buffer as an array in specified format"
                        },
                        "parameters": [
                            {
                                "name": "format",
                                "type": "NumberFormat",
                                "isEnum": true
                            }
                        ],
                        "isInstance": true,
                        "pyQName": "Buffer.to_array"
                    },
                    "Buffer.toBase64": {
                        "kind": -1,
                        "retType": "string",
                        "attributes": {
                            "helper": "bufferToBase64",
                            "jsDoc": "Convert buffer to ASCII base64 encoding."
                        },
                        "parameters": [],
                        "isInstance": true,
                        "pyQName": "Buffer.to_base64"
                    },
                    "Buffer@type": {
                        "kind": 9,
                        "retType": "Buffer",
                        "attributes": {
                            "indexerGet": "BufferMethods::getByte",
                            "indexerSet": "BufferMethods::setByte"
                        },
                        "extendsTypes": [],
                        "pyQName": "Buffer"
                    },
                    "Buffer.create": {
                        "kind": -3,
                        "retType": "Buffer",
                        "attributes": {
                            "paramHelp": {
                                "size": "number of bytes in the buffer"
                            },
                            "jsDoc": "Allocate a new buffer."
                        },
                        "parameters": [
                            {
                                "name": "size",
                                "description": "number of bytes in the buffer"
                            }
                        ]
                    },
                    "Buffer.fromHex": {
                        "kind": -3,
                        "retType": "Buffer",
                        "attributes": {
                            "jsDoc": "Create a new buffer, decoding a hex string"
                        },
                        "parameters": [
                            {
                                "name": "hex",
                                "type": "string"
                            }
                        ],
                        "pyQName": "Buffer.from_hex"
                    },
                    "Buffer.fromBase64": {
                        "kind": -3,
                        "retType": "Buffer",
                        "attributes": {
                            "jsDoc": "Create a new buffer, decoding a Base64 string"
                        },
                        "parameters": [
                            {
                                "name": "b64",
                                "type": "string"
                            }
                        ],
                        "pyQName": "Buffer.from_base64"
                    },
                    "Buffer.fromUTF8": {
                        "kind": -3,
                        "retType": "Buffer",
                        "attributes": {
                            "paramHelp": {
                                "str": "the string to put in the buffer"
                            },
                            "jsDoc": "Create a new buffer from an UTF8-encoded string"
                        },
                        "parameters": [
                            {
                                "name": "str",
                                "description": "the string to put in the buffer",
                                "type": "string"
                            }
                        ],
                        "pyQName": "Buffer.from_utf8"
                    },
                    "Buffer.chunkedFromUTF8": {
                        "kind": -3,
                        "retType": "Buffer[]",
                        "parameters": [
                            {
                                "name": "str",
                                "type": "string"
                            },
                            {
                                "name": "maxBytes"
                            }
                        ],
                        "pyQName": "Buffer.chunked_from_utf8"
                    },
                    "Buffer.fromArray": {
                        "kind": -3,
                        "retType": "Buffer",
                        "attributes": {
                            "paramHelp": {
                                "bytes": "data to initialize with"
                            },
                            "jsDoc": "Create a new buffer initialized to bytes from given array."
                        },
                        "parameters": [
                            {
                                "name": "bytes",
                                "description": "data to initialize with",
                                "type": "number[]"
                            }
                        ],
                        "pyQName": "Buffer.from_array"
                    },
                    "Buffer.packedSize": {
                        "kind": -3,
                        "retType": "number",
                        "parameters": [
                            {
                                "name": "format",
                                "type": "string"
                            }
                        ],
                        "pyQName": "Buffer.packed_size"
                    },
                    "Buffer.pack": {
                        "kind": -3,
                        "retType": "Buffer",
                        "parameters": [
                            {
                                "name": "format",
                                "type": "string"
                            },
                            {
                                "name": "nums",
                                "type": "number[]"
                            }
                        ]
                    },
                    "Buffer.__packUnpackCore": {
                        "kind": -3,
                        "retType": "number",
                        "parameters": [
                            {
                                "name": "format",
                                "type": "string"
                            },
                            {
                                "name": "nums",
                                "type": "number[]"
                            },
                            {
                                "name": "buf",
                                "type": "Buffer"
                            },
                            {
                                "name": "isPack",
                                "type": "boolean"
                            },
                            {
                                "name": "off",
                                "initializer": "0"
                            }
                        ]
                    },
                    "Buffer.sizeOfNumberFormat": {
                        "kind": -3,
                        "retType": "number",
                        "attributes": {
                            "jsDoc": "Get the size in bytes of specified number format."
                        },
                        "parameters": [
                            {
                                "name": "format",
                                "type": "NumberFormat",
                                "isEnum": true
                            }
                        ],
                        "pyQName": "Buffer.size_of_number_format"
                    },
                    "JSON": {
                        "kind": 5,
                        "retType": ""
                    },
                    "JSON.parseIntRadix": {
                        "kind": -3,
                        "retType": "number",
                        "parameters": [
                            {
                                "name": "s",
                                "type": "string"
                            },
                            {
                                "name": "base",
                                "initializer": "undefined"
                            }
                        ],
                        "pyQName": "JSON.parse_int_radix"
                    },
                    "JSON.stringify": {
                        "kind": -3,
                        "retType": "string",
                        "attributes": {
                            "paramHelp": {
                                "value": "A JavaScript value, usually an object or array, to be converted.",
                                "replacer": "Not supported; use null.",
                                "indent": "Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read."
                            },
                            "jsDoc": "Converts a JavaScript value to a JavaScript Object Notation (JSON) string."
                        },
                        "parameters": [
                            {
                                "name": "value",
                                "description": "A JavaScript value, usually an object or array, to be converted.",
                                "type": "any"
                            },
                            {
                                "name": "replacer",
                                "description": "Not supported; use null.",
                                "type": "any",
                                "initializer": "null"
                            },
                            {
                                "name": "indent",
                                "description": "Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.",
                                "initializer": "0"
                            }
                        ]
                    },
                    "JSON.parse": {
                        "kind": -3,
                        "retType": "any",
                        "attributes": {
                            "paramHelp": {
                                "text": "A valid JSON string."
                            },
                            "jsDoc": "Converts a JavaScript Object Notation (JSON) string into an object."
                        },
                        "parameters": [
                            {
                                "name": "s",
                                "type": "string"
                            }
                        ]
                    },
                    "control.__queuePollEvent": {
                        "kind": -3,
                        "parameters": [
                            {
                                "name": "timeOut"
                            },
                            {
                                "name": "condition",
                                "type": "() => boolean",
                                "handlerParameters": []
                            },
                            {
                                "name": "handler",
                                "type": "() => void",
                                "handlerParameters": []
                            }
                        ]
                    },
                    "pauseUntil": {
                        "kind": -3,
                        "attributes": {
                            "blockId": "pxt_pause_until",
                            "paramHelp": {
                                "condition": "condition to test for",
                                "timeOut": "if positive, maximum duration to wait for in milliseconds"
                            },
                            "jsDoc": "Busy wait for a condition to be true"
                        },
                        "parameters": [
                            {
                                "name": "condition",
                                "description": "condition to test for",
                                "type": "() => boolean",
                                "handlerParameters": []
                            },
                            {
                                "name": "timeOut",
                                "description": "if positive, maximum duration to wait for in milliseconds",
                                "initializer": "undefined"
                            }
                        ],
                        "pyQName": "pause_until"
                    },
                    "Fx8": {
                        "kind": -3,
                        "retType": "Fx8",
                        "parameters": [
                            {
                                "name": "v"
                            }
                        ],
                        "pyQName": "fx8"
                    },
                    "Fx8._dummyFx8": {
                        "kind": 2,
                        "retType": "string",
                        "isInstance": true,
                        "pyQName": "fx8._dummy_fx8"
                    },
                    "Fx8@type": {
                        "kind": 9,
                        "retType": "Fx8",
                        "extendsTypes": [],
                        "pyQName": "Fx8"
                    },
                    "Fx": {
                        "kind": 5,
                        "retType": ""
                    },
                    "Fx.zeroFx8": {
                        "kind": 4,
                        "retType": "Fx8",
                        "pyQName": "Fx.zero_fx8"
                    },
                    "Fx.oneHalfFx8": {
                        "kind": 4,
                        "retType": "Fx8",
                        "pyQName": "Fx.one_half_fx8"
                    },
                    "Fx.oneFx8": {
                        "kind": 4,
                        "retType": "Fx8",
                        "pyQName": "Fx.one_fx8"
                    },
                    "Fx.twoFx8": {
                        "kind": 4,
                        "retType": "Fx8",
                        "pyQName": "Fx.two_fx8"
                    },
                    "Fx.neg": {
                        "kind": -3,
                        "retType": "Fx8",
                        "parameters": [
                            {
                                "name": "a",
                                "type": "Fx8"
                            }
                        ]
                    },
                    "Fx.toIntShifted": {
                        "kind": -3,
                        "retType": "number",
                        "parameters": [
                            {
                                "name": "a",
                                "type": "Fx8"
                            },
                            {
                                "name": "n"
                            }
                        ],
                        "pyQName": "Fx.to_int_shifted"
                    },
                    "Fx.add": {
                        "kind": -3,
                        "retType": "Fx8",
                        "parameters": [
                            {
                                "name": "a",
                                "type": "Fx8"
                            },
                            {
                                "name": "b",
                                "type": "Fx8"
                            }
                        ]
                    },
                    "Fx.iadd": {
                        "kind": -3,
                        "retType": "Fx8",
                        "parameters": [
                            {
                                "name": "a"
                            },
                            {
                                "name": "b",
                                "type": "Fx8"
                            }
                        ]
                    },
                    "Fx.sub": {
                        "kind": -3,
                        "retType": "Fx8",
                        "parameters": [
                            {
                                "name": "a",
                                "type": "Fx8"
                            },
                            {
                                "name": "b",
                                "type": "Fx8"
                            }
                        ]
                    },
                    "Fx.mul": {
                        "kind": -3,
                        "retType": "Fx8",
                        "parameters": [
                            {
                                "name": "a",
                                "type": "Fx8"
                            },
                            {
                                "name": "b",
                                "type": "Fx8"
                            }
                        ]
                    },
                    "Fx.imul": {
                        "kind": -3,
                        "retType": "Fx8",
                        "parameters": [
                            {
                                "name": "a",
                                "type": "Fx8"
                            },
                            {
                                "name": "b"
                            }
                        ]
                    },
                    "Fx.div": {
                        "kind": -3,
                        "retType": "Fx8",
                        "parameters": [
                            {
                                "name": "a",
                                "type": "Fx8"
                            },
                            {
                                "name": "b",
                                "type": "Fx8"
                            }
                        ]
                    },
                    "Fx.idiv": {
                        "kind": -3,
                        "retType": "Fx8",
                        "parameters": [
                            {
                                "name": "a",
                                "type": "Fx8"
                            },
                            {
                                "name": "b"
                            }
                        ]
                    },
                    "Fx.compare": {
                        "kind": -3,
                        "retType": "number",
                        "parameters": [
                            {
                                "name": "a",
                                "type": "Fx8"
                            },
                            {
                                "name": "b",
                                "type": "Fx8"
                            }
                        ]
                    },
                    "Fx.abs": {
                        "kind": -3,
                        "retType": "Fx8",
                        "parameters": [
                            {
                                "name": "a",
                                "type": "Fx8"
                            }
                        ]
                    },
                    "Fx.min": {
                        "kind": -3,
                        "retType": "Fx8",
                        "parameters": [
                            {
                                "name": "a",
                                "type": "Fx8"
                            },
                            {
                                "name": "b",
                                "type": "Fx8"
                            }
                        ]
                    },
                    "Fx.max": {
                        "kind": -3,
                        "retType": "Fx8",
                        "parameters": [
                            {
                                "name": "a",
                                "type": "Fx8"
                            },
                            {
                                "name": "b",
                                "type": "Fx8"
                            }
                        ]
                    },
                    "Fx.floor": {
                        "kind": -3,
                        "retType": "Fx8",
                        "parameters": [
                            {
                                "name": "v",
                                "type": "Fx8"
                            }
                        ]
                    },
                    "Fx.ceil": {
                        "kind": -3,
                        "retType": "Fx8",
                        "parameters": [
                            {
                                "name": "v",
                                "type": "Fx8"
                            }
                        ]
                    },
                    "Fx.leftShift": {
                        "kind": -3,
                        "retType": "Fx8",
                        "parameters": [
                            {
                                "name": "a",
                                "type": "Fx8"
                            },
                            {
                                "name": "n"
                            }
                        ],
                        "pyQName": "Fx.left_shift"
                    },
                    "Fx.rightShift": {
                        "kind": -3,
                        "retType": "Fx8",
                        "parameters": [
                            {
                                "name": "a",
                                "type": "Fx8"
                            },
                            {
                                "name": "n"
                            }
                        ],
                        "pyQName": "Fx.right_shift"
                    },
                    "Fx.toInt": {
                        "kind": -3,
                        "retType": "number",
                        "parameters": [
                            {
                                "name": "v",
                                "type": "Fx8"
                            }
                        ],
                        "pyQName": "Fx.to_int"
                    },
                    "Fx.toFloat": {
                        "kind": -3,
                        "retType": "number",
                        "parameters": [
                            {
                                "name": "v",
                                "type": "Fx8"
                            }
                        ],
                        "pyQName": "Fx.to_float"
                    },
                    "hex": {
                        "kind": -3,
                        "retType": "Buffer",
                        "attributes": {
                            "shim": "@hex",
                            "jsDoc": "Tagged hex literal converter"
                        },
                        "parameters": [
                            {
                                "name": "lits",
                                "type": "any"
                            },
                            {
                                "name": "args",
                                "type": "any[]"
                            }
                        ]
                    },
                    "pause": {
                        "kind": -3,
                        "attributes": {
                            "paramDefl": {
                                "ms": "100"
                            },
                            "callingConvention": 1,
                            "help": "loops/pause",
                            "weight": 99,
                            "async": "true",
                            "block": "pause %pause=timePicker|ms",
                            "blockId": "device_pause",
                            "blockNamespace": "loops",
                            "paramHelp": {
                                "ms": "how long to pause for, eg: 100, 200, 500, 1000, 2000"
                            },
                            "jsDoc": "Pause for the specified time in milliseconds",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "label",
                                        "text": "pause ",
                                        "style": []
                                    },
                                    {
                                        "kind": "param",
                                        "name": "pause",
                                        "shadowBlockId": "timePicker",
                                        "ref": false
                                    },
                                    {
                                        "kind": "break"
                                    },
                                    {
                                        "kind": "label",
                                        "text": "ms",
                                        "style": []
                                    }
                                ],
                                "parameters": [
                                    {
                                        "kind": "param",
                                        "name": "pause",
                                        "shadowBlockId": "timePicker",
                                        "ref": false
                                    }
                                ]
                            }
                        },
                        "parameters": [
                            {
                                "name": "ms",
                                "description": "how long to pause for, eg: 100, 200, 500, 1000, 2000",
                                "default": "100"
                            }
                        ]
                    },
                    "basic": {
                        "kind": 5,
                        "retType": ""
                    },
                    "basic.pause": {
                        "kind": -3,
                        "parameters": [
                            {
                                "name": "millis"
                            }
                        ]
                    },
                    "forever": {
                        "kind": -3,
                        "attributes": {
                            "help": "loops/forever",
                            "weight": 100,
                            "afterOnStart": true,
                            "blockNamespace": "loops",
                            "blockId": "forever",
                            "block": "forever",
                            "blockAllowMultiple": "1",
                            "paramHelp": {
                                "body": "code to execute"
                            },
                            "jsDoc": "Repeats the code forever in the background. On each iteration, allows other codes to run.",
                            "_def": {
                                "parts": [
                                    {
                                        "kind": "label",
                                        "text": "forever",
                                        "style": []
                                    }
                                ],
                                "parameters": []
                            }
                        },
                        "parameters": [
                            {
                                "name": "a",
                                "type": "() => void",
                                "handlerParameters": []
                            }
                        ]
                    },
                    "basic.forever": {
                        "kind": -3,
                        "parameters": [
                            {
                                "name": "a",
                                "type": "() => void",
                                "handlerParameters": []
                            }
                        ]
                    },
                    "config": {
                        "kind": 5,
                        "retType": ""
                    },
                    "config.PIN_UART1_TX": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_ID_SYSTEM_LEVEL_DETECTOR_SPL"
                    },
                    "config.PIN_UART1_RX": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_ID_MSC"
                    },
                    "config.PIN_UART2_TX": {
                        "kind": 4,
                        "retType": "DAL.LSM303_INT2_SRC_A"
                    },
                    "config.PIN_UART2_RX": {
                        "kind": 4,
                        "retType": "DAL.LSM303_INT2_THS_A"
                    },
                    "config.PIN_UART3_TX": {
                        "kind": 4,
                        "retType": "DAL.LSM303_CLICK_CFG_A"
                    },
                    "config.PIN_UART3_RX": {
                        "kind": 4,
                        "retType": "DAL.LSM303_CLICK_SRC_A"
                    },
                    "config.PIN_UART4_TX": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_OK"
                    },
                    "config.PIN_UART4_RX": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_ID_BUTTON_A"
                    },
                    "config.PIN_SPI1_MISO": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_ID_COMPASS"
                    },
                    "config.PIN_SPI1_MOSI": {
                        "kind": 4,
                        "retType": "DAL.CFG_PIN_TX1"
                    },
                    "config.PIN_SPI1_SCK": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_ID_ACCELEROMETER"
                    },
                    "config.PIN_SPI2_MISO": {
                        "kind": 4,
                        "retType": "DAL.LSM303_INT1_DURATION_A"
                    },
                    "config.PIN_SPI2_MOSI": {
                        "kind": 4,
                        "retType": "DAL.LSM303_INT2_CFG_A"
                    },
                    "config.PIN_SPI2_SCK": {
                        "kind": 4,
                        "retType": "DAL.LSM303_INT1_SRC_A"
                    },
                    "config.PIN_SPI3_MISO": {
                        "kind": 4,
                        "retType": "DAL.LSM303_OUT_Y_H_A"
                    },
                    "config.PIN_SPI3_MOSI": {
                        "kind": 4,
                        "retType": "DAL.LSM303_OUT_Z_L_A"
                    },
                    "config.PIN_SPI3_SCK": {
                        "kind": 4,
                        "retType": "DAL.LSM303_OUT_Y_L_A"
                    },
                    "config.PIN_I2C1_SCL": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_ID_SPI"
                    },
                    "config.PIN_I2C1_SDA": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_ID_DISTANCE"
                    },
                    "config.PIN_I2C2_SCL": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_ID_GYROSCOPE"
                    },
                    "config.PIN_I2C2_SDA": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_ID_HUMIDITY"
                    },
                    "config.PIN_ACCELEROMETER_SDA": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_ID_HUMIDITY"
                    },
                    "config.PIN_ACCELEROMETER_SCL": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_ID_GYROSCOPE"
                    },
                    "config.PIN_ACCELEROMETER_INT": {
                        "kind": 4,
                        "retType": "DAL.LSM303_TIME_LIMIT_A"
                    },
                    "config.PIN_HTS221_SDA": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_ID_HUMIDITY"
                    },
                    "config.PIN_HTS221_SCL": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_ID_GYROSCOPE"
                    },
                    "config.PIN_LPS22HB_SDA": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_ID_HUMIDITY"
                    },
                    "config.PIN_LPS22HB_SCL": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_ID_GYROSCOPE"
                    },
                    "config.PIN_VL53L0X_SDA": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_ID_HUMIDITY"
                    },
                    "config.PIN_VL53L0X_SCL": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_ID_GYROSCOPE"
                    },
                    "config.PIN_VL53L0X_SHUT": {
                        "kind": 4,
                        "retType": "DAL.LSM303_DATACAPTURE_A"
                    },
                    "config.PIN_LSM6DSL_SDA": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_ID_HUMIDITY"
                    },
                    "config.PIN_LSM6DSL_SCL": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_ID_GYROSCOPE"
                    },
                    "config.PIN_BLE_SPI_MOSI": {
                        "kind": 4,
                        "retType": "DAL.LSM303_OUT_Z_L_A"
                    },
                    "config.PIN_BLE_SPI_MISO": {
                        "kind": 4,
                        "retType": "DAL.LSM303_OUT_Y_H_A"
                    },
                    "config.PIN_BLE_SPI_SCLK": {
                        "kind": 4,
                        "retType": "DAL.LSM303_OUT_Y_L_A"
                    },
                    "config.PIN_BLE_SPI_CS": {
                        "kind": 4,
                        "retType": "DAL.LSM303_TIME_WINDOW_A"
                    },
                    "config.PIN_BLE_SPI_IRQ": {
                        "kind": 4,
                        "retType": "DAL.LSM303_OFFSET_X_REG_H_M"
                    },
                    "config.PIN_BLE_RST": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_ID_THERMOMETER"
                    },
                    "config.PIN_WIFI_ISM43362_MOSI": {
                        "kind": 4,
                        "retType": "DAL.LSM303_OUT_Z_L_A"
                    },
                    "config.PIN_WIFI_ISM43362_MISO": {
                        "kind": 4,
                        "retType": "DAL.LSM303_OUT_Y_H_A"
                    },
                    "config.PIN_WIFI_ISM43362_SCK": {
                        "kind": 4,
                        "retType": "DAL.LSM303_OUT_Y_L_A"
                    },
                    "config.PIN_WIFI_ISM43362_CS": {
                        "kind": 4,
                        "retType": "DAL.MESSAGE_BUS_LISTENER_NONBLOCKING"
                    },
                    "config.PIN_WIFI_ISM43362_COMMAND_DATA_READY": {
                        "kind": 4,
                        "retType": "DAL.KEY_F8"
                    },
                    "config.PIN_WIFI_ISM43362_RESET": {
                        "kind": 4,
                        "retType": "DAL.LSM303_OFFSET_Y_REG_H_M"
                    },
                    "config.PIN_WIFI_ISM43362_WAKE_UP": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_ID_SINGLE_WIRE_SERIAL"
                    },
                    "config.PIN_A0": {
                        "kind": 4,
                        "retType": "DAL.LSM303_CTRL_REG6_A"
                    },
                    "config.PIN_A1": {
                        "kind": 4,
                        "retType": "DAL.LSM303_CTRL_REG5_A"
                    },
                    "config.PIN_A2": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_ID_PULSE_IN"
                    },
                    "config.PIN_A3": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_ID_SYSTEM_ADC"
                    },
                    "config.PIN_A4": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_ID_JACDAC_CONFIGURATION_SERVICE"
                    },
                    "config.PIN_A5": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_ID_JACDAC_CONTROL_SERVICE"
                    },
                    "config.PIN_D0": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_ID_BUTTON_A"
                    },
                    "config.PIN_D1": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_OK"
                    },
                    "config.PIN_D2": {
                        "kind": 4,
                        "retType": "DAL.LSM303_ACT_THS_A"
                    },
                    "config.PIN_D3": {
                        "kind": 4,
                        "retType": "DAL.CFG_PIN_PCC_D1"
                    },
                    "config.PIN_D4": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_ID_BUTTON_AB"
                    },
                    "config.PIN_D5": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_ID_SYSTEM_MICROPHONE"
                    },
                    "config.PIN_D6": {
                        "kind": 4,
                        "retType": "DAL.CFG_PIN_PCC_D2"
                    },
                    "config.PIN_D7": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_ID_BUTTON_RESET"
                    },
                    "config.PIN_D8": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_ID_TOUCH_SENSOR"
                    },
                    "config.PIN_D9": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_ID_SCHEDULER"
                    },
                    "config.PIN_D10": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_ID_BUTTON_B"
                    },
                    "config.PIN_D11": {
                        "kind": 4,
                        "retType": "DAL.CFG_PIN_TX1"
                    },
                    "config.PIN_D12": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_ID_COMPASS"
                    },
                    "config.PIN_D13": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_ID_ACCELEROMETER"
                    },
                    "config.PIN_D14": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_ID_DISTANCE"
                    },
                    "config.PIN_D15": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_ID_SPI"
                    },
                    "config.PIN_RX": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_ID_MSC"
                    },
                    "config.PIN_TX": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_ID_SYSTEM_LEVEL_DETECTOR_SPL"
                    },
                    "config.PIN_MISO": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_ID_COMPASS"
                    },
                    "config.PIN_MOSI": {
                        "kind": 4,
                        "retType": "DAL.CFG_PIN_TX1"
                    },
                    "config.PIN_SCK": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_ID_ACCELEROMETER"
                    },
                    "config.PIN_SCL": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_ID_SPI"
                    },
                    "config.PIN_SDA": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_ID_DISTANCE"
                    },
                    "config.PIN_LED": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_ID_ACCELEROMETER"
                    },
                    "config.PIN_LED2": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_ID_JACDAC"
                    },
                    "config.PIN_LED3": {
                        "kind": 4,
                        "retType": "DAL.LSM303_OUT_X_H_A"
                    },
                    "config.PIN_BTN_USER": {
                        "kind": 4,
                        "retType": "DAL.LSM303_OUT_Z_H_A"
                    },
                    "config.PIN_RESET": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_OK"
                    },
                    "config.PIN_TEMPERATURE": {
                        "kind": 4,
                        "retType": "DAL.DEVICE_OK"
                    },
                    "config.PIN_SPEAKER_AMP": {
                        "kind": 4,
                        "retType": "DAL.CFG_PIN_PCC_D1"
                    }
                }
            },
            "sha": "6da5bec933c6e46168a7d9dbe58d3a9df2fd063eee644fa680c2adf2ba4c6630"
        },
        "libs/blocksprj": {
            "apis": {
                "byQName": {}
            },
            "sha": "5d792fc504c8fbca01fa8d8089ec8fb143a150a1e867738b11924accff1489e7"
        },
        "libs/tsprj": {
            "apis": {
                "byQName": {}
            },
            "sha": "c0a76ae955234bfc818739d06d3a9ef139691fe787009ae0e846f26d24b8b44c"
        }
    }
}
